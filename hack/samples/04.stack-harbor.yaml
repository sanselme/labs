apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
    control-plane: controller-manager
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: baseline
  name: capi-kubeadm-bootstrap-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
    control-plane: controller-manager
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: baseline
  name: capi-kubeadm-control-plane-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
    control-plane: controller-manager
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: baseline
  name: capi-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: k0smotron
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: k0smotron
    control-plane: controller-manager
  name: k0smotron
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: clusterclasses.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: ClusterClass
    listKind: ClusterClassList
    plural: clusterclasses
    shortNames:
    - cc
    singular: clusterclass
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Time duration since creation of ClusterClass
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "ClusterClass is a template which can be used to create managed
          topologies. \n Deprecated: This type will be removed in one of the next
          releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterClassSpec describes the desired state of the ClusterClass.
            properties:
              controlPlane:
                description: ControlPlane is a reference to a local struct that holds
                  the details for provisioning the Control Plane for the Cluster.
                properties:
                  machineInfrastructure:
                    description: "MachineTemplate defines the metadata and infrastructure
                      information for control plane machines. \n This field is supported
                      if and only if the control plane provider template referenced
                      above is Machine based and supports setting replicas."
                    properties:
                      ref:
                        description: Ref is a required reference to a custom resource
                          offered by a provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                    required:
                    - ref
                    type: object
                  metadata:
                    description: "Metadata is the metadata applied to the machines
                      of the ControlPlane. At runtime this metadata is merged with
                      the corresponding metadata from the topology. \n This field
                      is supported if and only if the control plane provider template
                      referenced is Machine based."
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  ref:
                    description: Ref is a required reference to a custom resource
                      offered by a provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - ref
                type: object
              infrastructure:
                description: Infrastructure is a reference to a provider-specific
                  template that holds the details for provisioning infrastructure
                  specific cluster for the underlying provider. The underlying provider
                  is responsible for the implementation of the template to an infrastructure
                  cluster.
                properties:
                  ref:
                    description: Ref is a required reference to a custom resource
                      offered by a provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - ref
                type: object
              workers:
                description: Workers describes the worker nodes for the cluster. It
                  is a collection of node types which can be used to create the worker
                  nodes of the cluster.
                properties:
                  machineDeployments:
                    description: MachineDeployments is a list of machine deployment
                      classes that can be used to create a set of worker nodes.
                    items:
                      description: MachineDeploymentClass serves as a template to
                        define a set of worker nodes of the cluster provisioned using
                        the `ClusterClass`.
                      properties:
                        class:
                          description: Class denotes a type of worker node present
                            in the cluster, this name MUST be unique within a ClusterClass
                            and can be referenced in the Cluster to create a managed
                            MachineDeployment.
                          type: string
                        template:
                          description: Template is a local struct containing a collection
                            of templates for creation of MachineDeployment objects
                            representing a set of worker nodes.
                          properties:
                            bootstrap:
                              description: Bootstrap contains the bootstrap template
                                reference to be used for the creation of worker Machines.
                              properties:
                                ref:
                                  description: Ref is a required reference to a custom
                                    resource offered by a provider.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an
                                        object instead of an entire object, this string
                                        should contain a valid JSON/Go field access
                                        statement, such as desiredState.manifest.containers[2].
                                        For example, if the object reference is to
                                        a container within a pod, this would take
                                        on a value like: "spec.containers{name}" (where
                                        "name" refers to the name of the container
                                        that triggered the event) or if no container
                                        name is specified "spec.containers[2]" (container
                                        with index 2 in this pod). This syntax is
                                        chosen only to have some well-defined way
                                        of referencing a part of an object. TODO:
                                        this design is not final and this field is
                                        subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More
                                        info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which
                                        this reference is made, if any. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                              - ref
                              type: object
                            infrastructure:
                              description: Infrastructure contains the infrastructure
                                template reference to be used for the creation of
                                worker Machines.
                              properties:
                                ref:
                                  description: Ref is a required reference to a custom
                                    resource offered by a provider.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an
                                        object instead of an entire object, this string
                                        should contain a valid JSON/Go field access
                                        statement, such as desiredState.manifest.containers[2].
                                        For example, if the object reference is to
                                        a container within a pod, this would take
                                        on a value like: "spec.containers{name}" (where
                                        "name" refers to the name of the container
                                        that triggered the event) or if no container
                                        name is specified "spec.containers[2]" (container
                                        with index 2 in this pod). This syntax is
                                        chosen only to have some well-defined way
                                        of referencing a part of an object. TODO:
                                        this design is not final and this field is
                                        subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More
                                        info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which
                                        this reference is made, if any. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                              - ref
                              type: object
                            metadata:
                              description: Metadata is the metadata applied to the
                                machines of the MachineDeployment. At runtime this
                                metadata is merged with the corresponding metadata
                                from the topology.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                          required:
                          - bootstrap
                          - infrastructure
                          type: object
                      required:
                      - class
                      - template
                      type: object
                    type: array
                type: object
            type: object
        type: object
    served: true
    storage: false
    subresources: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of ClusterClass
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ClusterClass is a template which can be used to create managed
          topologies.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterClassSpec describes the desired state of the ClusterClass.
            properties:
              controlPlane:
                description: ControlPlane is a reference to a local struct that holds
                  the details for provisioning the Control Plane for the Cluster.
                properties:
                  machineHealthCheck:
                    description: MachineHealthCheck defines a MachineHealthCheck for
                      this ControlPlaneClass. This field is supported if and only
                      if the ControlPlane provider template referenced above is Machine
                      based and supports setting replicas.
                    properties:
                      maxUnhealthy:
                        anyOf:
                        - type: integer
                        - type: string
                        description: Any further remediation is only allowed if at
                          most "MaxUnhealthy" machines selected by "selector" are
                          not healthy.
                        x-kubernetes-int-or-string: true
                      nodeStartupTimeout:
                        description: Machines older than this duration without a node
                          will be considered to have failed and will be remediated.
                          If you wish to disable this feature, set the value explicitly
                          to 0.
                        type: string
                      remediationTemplate:
                        description: "RemediationTemplate is a reference to a remediation
                          template provided by an infrastructure provider. \n This
                          field is completely optional, when filled, the MachineHealthCheck
                          controller creates a new object from the template referenced
                          and hands off remediation of the machine to a controller
                          that lives outside of Cluster API."
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      unhealthyConditions:
                        description: UnhealthyConditions contains a list of the conditions
                          that determine whether a node is considered unhealthy. The
                          conditions are combined in a logical OR, i.e. if any of
                          the conditions is met, the node is unhealthy.
                        items:
                          description: UnhealthyCondition represents a Node condition
                            type and value with a timeout specified as a duration.  When
                            the named condition has been in the given status for at
                            least the timeout value, a node is considered unhealthy.
                          properties:
                            status:
                              minLength: 1
                              type: string
                            timeout:
                              type: string
                            type:
                              minLength: 1
                              type: string
                          required:
                          - status
                          - timeout
                          - type
                          type: object
                        type: array
                      unhealthyRange:
                        description: 'Any further remediation is only allowed if the
                          number of machines selected by "selector" as not healthy
                          is within the range of "UnhealthyRange". Takes precedence
                          over MaxUnhealthy. Eg. "[3-5]" - This means that remediation
                          will be allowed only when: (a) there are at least 3 unhealthy
                          machines (and) (b) there are at most 5 unhealthy machines'
                        pattern: ^\[[0-9]+-[0-9]+\]$
                        type: string
                    type: object
                  machineInfrastructure:
                    description: "MachineInfrastructure defines the metadata and infrastructure
                      information for control plane machines. \n This field is supported
                      if and only if the control plane provider template referenced
                      above is Machine based and supports setting replicas."
                    properties:
                      ref:
                        description: Ref is a required reference to a custom resource
                          offered by a provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                    required:
                    - ref
                    type: object
                  metadata:
                    description: "Metadata is the metadata applied to the ControlPlane
                      and the Machines of the ControlPlane if the ControlPlaneTemplate
                      referenced is machine based. If not, it is applied only to the
                      ControlPlane. At runtime this metadata is merged with the corresponding
                      metadata from the topology. \n This field is supported if and
                      only if the control plane provider template referenced is Machine
                      based."
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  nodeDeletionTimeout:
                    description: 'NodeDeletionTimeout defines how long the controller
                      will attempt to delete the Node that the Machine hosts after
                      the Machine is marked for deletion. A duration of 0 will retry
                      deletion indefinitely. Defaults to 10 seconds. NOTE: This value
                      can be overridden while defining a Cluster.Topology.'
                    type: string
                  nodeDrainTimeout:
                    description: 'NodeDrainTimeout is the total amount of time that
                      the controller will spend on draining a node. The default value
                      is 0, meaning that the node can be drained without any time
                      limitations. NOTE: NodeDrainTimeout is different from `kubectl
                      drain --timeout` NOTE: This value can be overridden while defining
                      a Cluster.Topology.'
                    type: string
                  nodeVolumeDetachTimeout:
                    description: 'NodeVolumeDetachTimeout is the total amount of time
                      that the controller will spend on waiting for all volumes to
                      be detached. The default value is 0, meaning that the volumes
                      can be detached without any time limitations. NOTE: This value
                      can be overridden while defining a Cluster.Topology.'
                    type: string
                  ref:
                    description: Ref is a required reference to a custom resource
                      offered by a provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - ref
                type: object
              infrastructure:
                description: Infrastructure is a reference to a provider-specific
                  template that holds the details for provisioning infrastructure
                  specific cluster for the underlying provider. The underlying provider
                  is responsible for the implementation of the template to an infrastructure
                  cluster.
                properties:
                  ref:
                    description: Ref is a required reference to a custom resource
                      offered by a provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - ref
                type: object
              patches:
                description: 'Patches defines the patches which are applied to customize
                  referenced templates of a ClusterClass. Note: Patches will be applied
                  in the order of the array.'
                items:
                  description: ClusterClassPatch defines a patch which is applied
                    to customize the referenced templates.
                  properties:
                    definitions:
                      description: 'Definitions define inline patches. Note: Patches
                        will be applied in the order of the array. Note: Exactly one
                        of Definitions or External must be set.'
                      items:
                        description: PatchDefinition defines a patch which is applied
                          to customize the referenced templates.
                        properties:
                          jsonPatches:
                            description: 'JSONPatches defines the patches which should
                              be applied on the templates matching the selector. Note:
                              Patches will be applied in the order of the array.'
                            items:
                              description: JSONPatch defines a JSON patch.
                              properties:
                                op:
                                  description: 'Op defines the operation of the patch.
                                    Note: Only `add`, `replace` and `remove` are supported.'
                                  type: string
                                path:
                                  description: 'Path defines the path of the patch.
                                    Note: Only the spec of a template can be patched,
                                    thus the path has to start with /spec/. Note:
                                    For now the only allowed array modifications are
                                    `append` and `prepend`, i.e.: * for op: `add`:
                                    only index 0 (prepend) and - (append) are allowed
                                    * for op: `replace` or `remove`: no indexes are
                                    allowed'
                                  type: string
                                value:
                                  description: 'Value defines the value of the patch.
                                    Note: Either Value or ValueFrom is required for
                                    add and replace operations. Only one of them is
                                    allowed to be set at the same time. Note: We have
                                    to use apiextensionsv1.JSON instead of our JSON
                                    type, because controller-tools has a hard-coded
                                    schema for apiextensionsv1.JSON which cannot be
                                    produced by another type (unset type field). Ref:
                                    https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
                                  x-kubernetes-preserve-unknown-fields: true
                                valueFrom:
                                  description: 'ValueFrom defines the value of the
                                    patch. Note: Either Value or ValueFrom is required
                                    for add and replace operations. Only one of them
                                    is allowed to be set at the same time.'
                                  properties:
                                    template:
                                      description: 'Template is the Go template to
                                        be used to calculate the value. A template
                                        can reference variables defined in .spec.variables
                                        and builtin variables. Note: The template
                                        must evaluate to a valid YAML or JSON value.'
                                      type: string
                                    variable:
                                      description: Variable is the variable to be
                                        used as value. Variable can be one of the
                                        variables defined in .spec.variables or a
                                        builtin variable.
                                      type: string
                                  type: object
                              required:
                              - op
                              - path
                              type: object
                            type: array
                          selector:
                            description: Selector defines on which templates the patch
                              should be applied.
                            properties:
                              apiVersion:
                                description: APIVersion filters templates by apiVersion.
                                type: string
                              kind:
                                description: Kind filters templates by kind.
                                type: string
                              matchResources:
                                description: MatchResources selects templates based
                                  on where they are referenced.
                                properties:
                                  controlPlane:
                                    description: 'ControlPlane selects templates referenced
                                      in .spec.ControlPlane. Note: this will match
                                      the controlPlane and also the controlPlane machineInfrastructure
                                      (depending on the kind and apiVersion).'
                                    type: boolean
                                  infrastructureCluster:
                                    description: InfrastructureCluster selects templates
                                      referenced in .spec.infrastructure.
                                    type: boolean
                                  machineDeploymentClass:
                                    description: MachineDeploymentClass selects templates
                                      referenced in specific MachineDeploymentClasses
                                      in .spec.workers.machineDeployments.
                                    properties:
                                      names:
                                        description: Names selects templates by class
                                          names.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                type: object
                            required:
                            - apiVersion
                            - kind
                            - matchResources
                            type: object
                        required:
                        - jsonPatches
                        - selector
                        type: object
                      type: array
                    description:
                      description: Description is a human-readable description of
                        this patch.
                      type: string
                    enabledIf:
                      description: EnabledIf is a Go template to be used to calculate
                        if a patch should be enabled. It can reference variables defined
                        in .spec.variables and builtin variables. The patch will be
                        enabled if the template evaluates to `true`, otherwise it
                        will be disabled. If EnabledIf is not set, the patch will
                        be enabled per default.
                      type: string
                    external:
                      description: 'External defines an external patch. Note: Exactly
                        one of Definitions or External must be set.'
                      properties:
                        discoverVariablesExtension:
                          description: DiscoverVariablesExtension references an extension
                            which is called to discover variables.
                          type: string
                        generateExtension:
                          description: GenerateExtension references an extension which
                            is called to generate patches.
                          type: string
                        settings:
                          additionalProperties:
                            type: string
                          description: Settings defines key value pairs to be passed
                            to the extensions. Values defined here take precedence
                            over the values defined in the corresponding ExtensionConfig.
                          type: object
                        validateExtension:
                          description: ValidateExtension references an extension which
                            is called to validate the topology.
                          type: string
                      type: object
                    name:
                      description: Name of the patch.
                      type: string
                  required:
                  - name
                  type: object
                type: array
              variables:
                description: Variables defines the variables which can be configured
                  in the Cluster topology and are then used in patches.
                items:
                  description: ClusterClassVariable defines a variable which can be
                    configured in the Cluster topology and used in patches.
                  properties:
                    name:
                      description: Name of the variable.
                      type: string
                    required:
                      description: 'Required specifies if the variable is required.
                        Note: this applies to the variable as a whole and thus the
                        top-level object defined in the schema. If nested fields are
                        required, this will be specified inside the schema.'
                      type: boolean
                    schema:
                      description: Schema defines the schema of the variable.
                      properties:
                        openAPIV3Schema:
                          description: OpenAPIV3Schema defines the schema of a variable
                            via OpenAPI v3 schema. The schema is a subset of the schema
                            used in Kubernetes CRDs.
                          properties:
                            additionalProperties:
                              description: 'AdditionalProperties specifies the schema
                                of values in a map (keys are always strings). NOTE:
                                Can only be set if type is object. NOTE: AdditionalProperties
                                is mutually exclusive with Properties. NOTE: This
                                field uses PreserveUnknownFields and Schemaless, because
                                recursive validation is not possible.'
                              x-kubernetes-preserve-unknown-fields: true
                            default:
                              description: 'Default is the default value of the variable.
                                NOTE: Can be set for all types.'
                              x-kubernetes-preserve-unknown-fields: true
                            description:
                              description: Description is a human-readable description
                                of this variable.
                              type: string
                            enum:
                              description: 'Enum is the list of valid values of the
                                variable. NOTE: Can be set for all types.'
                              items:
                                x-kubernetes-preserve-unknown-fields: true
                              type: array
                            example:
                              description: Example is an example for this variable.
                              x-kubernetes-preserve-unknown-fields: true
                            exclusiveMaximum:
                              description: 'ExclusiveMaximum specifies if the Maximum
                                is exclusive. NOTE: Can only be set if type is integer
                                or number.'
                              type: boolean
                            exclusiveMinimum:
                              description: 'ExclusiveMinimum specifies if the Minimum
                                is exclusive. NOTE: Can only be set if type is integer
                                or number.'
                              type: boolean
                            format:
                              description: 'Format is an OpenAPI v3 format string.
                                Unknown formats are ignored. For a list of supported
                                formats please see: (of the k8s.io/apiextensions-apiserver
                                version we''re currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go
                                NOTE: Can only be set if type is string.'
                              type: string
                            items:
                              description: 'Items specifies fields of an array. NOTE:
                                Can only be set if type is array. NOTE: This field
                                uses PreserveUnknownFields and Schemaless, because
                                recursive validation is not possible.'
                              x-kubernetes-preserve-unknown-fields: true
                            maxItems:
                              description: 'MaxItems is the max length of an array
                                variable. NOTE: Can only be set if type is array.'
                              format: int64
                              type: integer
                            maxLength:
                              description: 'MaxLength is the max length of a string
                                variable. NOTE: Can only be set if type is string.'
                              format: int64
                              type: integer
                            maximum:
                              description: 'Maximum is the maximum of an integer or
                                number variable. If ExclusiveMaximum is false, the
                                variable is valid if it is lower than, or equal to,
                                the value of Maximum. If ExclusiveMaximum is true,
                                the variable is valid if it is strictly lower than
                                the value of Maximum. NOTE: Can only be set if type
                                is integer or number.'
                              format: int64
                              type: integer
                            minItems:
                              description: 'MinItems is the min length of an array
                                variable. NOTE: Can only be set if type is array.'
                              format: int64
                              type: integer
                            minLength:
                              description: 'MinLength is the min length of a string
                                variable. NOTE: Can only be set if type is string.'
                              format: int64
                              type: integer
                            minimum:
                              description: 'Minimum is the minimum of an integer or
                                number variable. If ExclusiveMinimum is false, the
                                variable is valid if it is greater than, or equal
                                to, the value of Minimum. If ExclusiveMinimum is true,
                                the variable is valid if it is strictly greater than
                                the value of Minimum. NOTE: Can only be set if type
                                is integer or number.'
                              format: int64
                              type: integer
                            pattern:
                              description: 'Pattern is the regex which a string variable
                                must match. NOTE: Can only be set if type is string.'
                              type: string
                            properties:
                              description: 'Properties specifies fields of an object.
                                NOTE: Can only be set if type is object. NOTE: Properties
                                is mutually exclusive with AdditionalProperties. NOTE:
                                This field uses PreserveUnknownFields and Schemaless,
                                because recursive validation is not possible.'
                              x-kubernetes-preserve-unknown-fields: true
                            required:
                              description: 'Required specifies which fields of an
                                object are required. NOTE: Can only be set if type
                                is object.'
                              items:
                                type: string
                              type: array
                            type:
                              description: 'Type is the type of the variable. Valid
                                values are: object, array, string, integer, number
                                or boolean.'
                              type: string
                            uniqueItems:
                              description: 'UniqueItems specifies if items in an array
                                must be unique. NOTE: Can only be set if type is array.'
                              type: boolean
                            x-kubernetes-preserve-unknown-fields:
                              description: XPreserveUnknownFields allows setting fields
                                in a variable object which are not defined in the
                                variable schema. This affects fields recursively,
                                except if nested properties or additionalProperties
                                are specified in the schema.
                              type: boolean
                          required:
                          - type
                          type: object
                      required:
                      - openAPIV3Schema
                      type: object
                  required:
                  - name
                  - required
                  - schema
                  type: object
                type: array
              workers:
                description: Workers describes the worker nodes for the cluster. It
                  is a collection of node types which can be used to create the worker
                  nodes of the cluster.
                properties:
                  machineDeployments:
                    description: MachineDeployments is a list of machine deployment
                      classes that can be used to create a set of worker nodes.
                    items:
                      description: MachineDeploymentClass serves as a template to
                        define a set of worker nodes of the cluster provisioned using
                        the `ClusterClass`.
                      properties:
                        class:
                          description: Class denotes a type of worker node present
                            in the cluster, this name MUST be unique within a ClusterClass
                            and can be referenced in the Cluster to create a managed
                            MachineDeployment.
                          type: string
                        failureDomain:
                          description: 'FailureDomain is the failure domain the machines
                            will be created in. Must match a key in the FailureDomains
                            map stored on the cluster object. NOTE: This value can
                            be overridden while defining a Cluster.Topology using
                            this MachineDeploymentClass.'
                          type: string
                        machineHealthCheck:
                          description: MachineHealthCheck defines a MachineHealthCheck
                            for this MachineDeploymentClass.
                          properties:
                            maxUnhealthy:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Any further remediation is only allowed
                                if at most "MaxUnhealthy" machines selected by "selector"
                                are not healthy.
                              x-kubernetes-int-or-string: true
                            nodeStartupTimeout:
                              description: Machines older than this duration without
                                a node will be considered to have failed and will
                                be remediated. If you wish to disable this feature,
                                set the value explicitly to 0.
                              type: string
                            remediationTemplate:
                              description: "RemediationTemplate is a reference to
                                a remediation template provided by an infrastructure
                                provider. \n This field is completely optional, when
                                filled, the MachineHealthCheck controller creates
                                a new object from the template referenced and hands
                                off remediation of the machine to a controller that
                                lives outside of Cluster API."
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object
                                    instead of an entire object, this string should
                                    contain a valid JSON/Go field access statement,
                                    such as desiredState.manifest.containers[2]. For
                                    example, if the object reference is to a container
                                    within a pod, this would take on a value like:
                                    "spec.containers{name}" (where "name" refers to
                                    the name of the container that triggered the event)
                                    or if no container name is specified "spec.containers[2]"
                                    (container with index 2 in this pod). This syntax
                                    is chosen only to have some well-defined way of
                                    referencing a part of an object. TODO: this design
                                    is not final and this field is subject to change
                                    in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which
                                    this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                            unhealthyConditions:
                              description: UnhealthyConditions contains a list of
                                the conditions that determine whether a node is considered
                                unhealthy. The conditions are combined in a logical
                                OR, i.e. if any of the conditions is met, the node
                                is unhealthy.
                              items:
                                description: UnhealthyCondition represents a Node
                                  condition type and value with a timeout specified
                                  as a duration.  When the named condition has been
                                  in the given status for at least the timeout value,
                                  a node is considered unhealthy.
                                properties:
                                  status:
                                    minLength: 1
                                    type: string
                                  timeout:
                                    type: string
                                  type:
                                    minLength: 1
                                    type: string
                                required:
                                - status
                                - timeout
                                - type
                                type: object
                              type: array
                            unhealthyRange:
                              description: 'Any further remediation is only allowed
                                if the number of machines selected by "selector" as
                                not healthy is within the range of "UnhealthyRange".
                                Takes precedence over MaxUnhealthy. Eg. "[3-5]" -
                                This means that remediation will be allowed only when:
                                (a) there are at least 3 unhealthy machines (and)
                                (b) there are at most 5 unhealthy machines'
                              pattern: ^\[[0-9]+-[0-9]+\]$
                              type: string
                          type: object
                        minReadySeconds:
                          description: 'Minimum number of seconds for which a newly
                            created machine should be ready. Defaults to 0 (machine
                            will be considered available as soon as it is ready) NOTE:
                            This value can be overridden while defining a Cluster.Topology
                            using this MachineDeploymentClass.'
                          format: int32
                          type: integer
                        nodeDeletionTimeout:
                          description: 'NodeDeletionTimeout defines how long the controller
                            will attempt to delete the Node that the Machine hosts
                            after the Machine is marked for deletion. A duration of
                            0 will retry deletion indefinitely. Defaults to 10 seconds.
                            NOTE: This value can be overridden while defining a Cluster.Topology
                            using this MachineDeploymentClass.'
                          type: string
                        nodeDrainTimeout:
                          description: 'NodeDrainTimeout is the total amount of time
                            that the controller will spend on draining a node. The
                            default value is 0, meaning that the node can be drained
                            without any time limitations. NOTE: NodeDrainTimeout is
                            different from `kubectl drain --timeout` NOTE: This value
                            can be overridden while defining a Cluster.Topology using
                            this MachineDeploymentClass.'
                          type: string
                        nodeVolumeDetachTimeout:
                          description: 'NodeVolumeDetachTimeout is the total amount
                            of time that the controller will spend on waiting for
                            all volumes to be detached. The default value is 0, meaning
                            that the volumes can be detached without any time limitations.
                            NOTE: This value can be overridden while defining a Cluster.Topology
                            using this MachineDeploymentClass.'
                          type: string
                        strategy:
                          description: 'The deployment strategy to use to replace
                            existing machines with new ones. NOTE: This value can
                            be overridden while defining a Cluster.Topology using
                            this MachineDeploymentClass.'
                          properties:
                            rollingUpdate:
                              description: Rolling update config params. Present only
                                if MachineDeploymentStrategyType = RollingUpdate.
                              properties:
                                deletePolicy:
                                  description: DeletePolicy defines the policy used
                                    by the MachineDeployment to identify nodes to
                                    delete when downscaling. Valid values are "Random,
                                    "Newest", "Oldest" When no value is supplied,
                                    the default DeletePolicy of MachineSet is used
                                  enum:
                                  - Random
                                  - Newest
                                  - Oldest
                                  type: string
                                maxSurge:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: 'The maximum number of machines that
                                    can be scheduled above the desired number of machines.
                                    Value can be an absolute number (ex: 5) or a percentage
                                    of desired machines (ex: 10%). This can not be
                                    0 if MaxUnavailable is 0. Absolute number is calculated
                                    from percentage by rounding up. Defaults to 1.
                                    Example: when this is set to 30%, the new MachineSet
                                    can be scaled up immediately when the rolling
                                    update starts, such that the total number of old
                                    and new machines do not exceed 130% of desired
                                    machines. Once old machines have been killed,
                                    new MachineSet can be scaled up further, ensuring
                                    that total number of machines running at any time
                                    during the update is at most 130% of desired machines.'
                                  x-kubernetes-int-or-string: true
                                maxUnavailable:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: 'The maximum number of machines that
                                    can be unavailable during the update. Value can
                                    be an absolute number (ex: 5) or a percentage
                                    of desired machines (ex: 10%). Absolute number
                                    is calculated from percentage by rounding down.
                                    This can not be 0 if MaxSurge is 0. Defaults to
                                    0. Example: when this is set to 30%, the old MachineSet
                                    can be scaled down to 70% of desired machines
                                    immediately when the rolling update starts. Once
                                    new machines are ready, old MachineSet can be
                                    scaled down further, followed by scaling up the
                                    new MachineSet, ensuring that the total number
                                    of machines available at all times during the
                                    update is at least 70% of desired machines.'
                                  x-kubernetes-int-or-string: true
                              type: object
                            type:
                              description: Type of deployment. Default is RollingUpdate.
                              enum:
                              - RollingUpdate
                              - OnDelete
                              type: string
                          type: object
                        template:
                          description: Template is a local struct containing a collection
                            of templates for creation of MachineDeployment objects
                            representing a set of worker nodes.
                          properties:
                            bootstrap:
                              description: Bootstrap contains the bootstrap template
                                reference to be used for the creation of worker Machines.
                              properties:
                                ref:
                                  description: Ref is a required reference to a custom
                                    resource offered by a provider.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an
                                        object instead of an entire object, this string
                                        should contain a valid JSON/Go field access
                                        statement, such as desiredState.manifest.containers[2].
                                        For example, if the object reference is to
                                        a container within a pod, this would take
                                        on a value like: "spec.containers{name}" (where
                                        "name" refers to the name of the container
                                        that triggered the event) or if no container
                                        name is specified "spec.containers[2]" (container
                                        with index 2 in this pod). This syntax is
                                        chosen only to have some well-defined way
                                        of referencing a part of an object. TODO:
                                        this design is not final and this field is
                                        subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More
                                        info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which
                                        this reference is made, if any. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                              - ref
                              type: object
                            infrastructure:
                              description: Infrastructure contains the infrastructure
                                template reference to be used for the creation of
                                worker Machines.
                              properties:
                                ref:
                                  description: Ref is a required reference to a custom
                                    resource offered by a provider.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an
                                        object instead of an entire object, this string
                                        should contain a valid JSON/Go field access
                                        statement, such as desiredState.manifest.containers[2].
                                        For example, if the object reference is to
                                        a container within a pod, this would take
                                        on a value like: "spec.containers{name}" (where
                                        "name" refers to the name of the container
                                        that triggered the event) or if no container
                                        name is specified "spec.containers[2]" (container
                                        with index 2 in this pod). This syntax is
                                        chosen only to have some well-defined way
                                        of referencing a part of an object. TODO:
                                        this design is not final and this field is
                                        subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More
                                        info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which
                                        this reference is made, if any. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                              - ref
                              type: object
                            metadata:
                              description: Metadata is the metadata applied to the
                                MachineDeployment and the machines of the MachineDeployment.
                                At runtime this metadata is merged with the corresponding
                                metadata from the topology.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                          required:
                          - bootstrap
                          - infrastructure
                          type: object
                      required:
                      - class
                      - template
                      type: object
                    type: array
                type: object
            type: object
          status:
            description: ClusterClassStatus defines the observed state of the ClusterClass.
            properties:
              conditions:
                description: Conditions defines current observed state of the ClusterClass.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              variables:
                description: Variables is a list of ClusterClassStatusVariable that
                  are defined for the ClusterClass.
                items:
                  description: ClusterClassStatusVariable defines a variable which
                    appears in the status of a ClusterClass.
                  properties:
                    definitions:
                      description: Definitions is a list of definitions for a variable.
                      items:
                        description: ClusterClassStatusVariableDefinition defines
                          a variable which appears in the status of a ClusterClass.
                        properties:
                          from:
                            description: From specifies the origin of the variable
                              definition. This will be `inline` for variables defined
                              in the ClusterClass or the name of a patch defined in
                              the ClusterClass for variables discovered from a DiscoverVariables
                              runtime extensions.
                            type: string
                          required:
                            description: 'Required specifies if the variable is required.
                              Note: this applies to the variable as a whole and thus
                              the top-level object defined in the schema. If nested
                              fields are required, this will be specified inside the
                              schema.'
                            type: boolean
                          schema:
                            description: Schema defines the schema of the variable.
                            properties:
                              openAPIV3Schema:
                                description: OpenAPIV3Schema defines the schema of
                                  a variable via OpenAPI v3 schema. The schema is
                                  a subset of the schema used in Kubernetes CRDs.
                                properties:
                                  additionalProperties:
                                    description: 'AdditionalProperties specifies the
                                      schema of values in a map (keys are always strings).
                                      NOTE: Can only be set if type is object. NOTE:
                                      AdditionalProperties is mutually exclusive with
                                      Properties. NOTE: This field uses PreserveUnknownFields
                                      and Schemaless, because recursive validation
                                      is not possible.'
                                    x-kubernetes-preserve-unknown-fields: true
                                  default:
                                    description: 'Default is the default value of
                                      the variable. NOTE: Can be set for all types.'
                                    x-kubernetes-preserve-unknown-fields: true
                                  description:
                                    description: Description is a human-readable description
                                      of this variable.
                                    type: string
                                  enum:
                                    description: 'Enum is the list of valid values
                                      of the variable. NOTE: Can be set for all types.'
                                    items:
                                      x-kubernetes-preserve-unknown-fields: true
                                    type: array
                                  example:
                                    description: Example is an example for this variable.
                                    x-kubernetes-preserve-unknown-fields: true
                                  exclusiveMaximum:
                                    description: 'ExclusiveMaximum specifies if the
                                      Maximum is exclusive. NOTE: Can only be set
                                      if type is integer or number.'
                                    type: boolean
                                  exclusiveMinimum:
                                    description: 'ExclusiveMinimum specifies if the
                                      Minimum is exclusive. NOTE: Can only be set
                                      if type is integer or number.'
                                    type: boolean
                                  format:
                                    description: 'Format is an OpenAPI v3 format string.
                                      Unknown formats are ignored. For a list of supported
                                      formats please see: (of the k8s.io/apiextensions-apiserver
                                      version we''re currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go
                                      NOTE: Can only be set if type is string.'
                                    type: string
                                  items:
                                    description: 'Items specifies fields of an array.
                                      NOTE: Can only be set if type is array. NOTE:
                                      This field uses PreserveUnknownFields and Schemaless,
                                      because recursive validation is not possible.'
                                    x-kubernetes-preserve-unknown-fields: true
                                  maxItems:
                                    description: 'MaxItems is the max length of an
                                      array variable. NOTE: Can only be set if type
                                      is array.'
                                    format: int64
                                    type: integer
                                  maxLength:
                                    description: 'MaxLength is the max length of a
                                      string variable. NOTE: Can only be set if type
                                      is string.'
                                    format: int64
                                    type: integer
                                  maximum:
                                    description: 'Maximum is the maximum of an integer
                                      or number variable. If ExclusiveMaximum is false,
                                      the variable is valid if it is lower than, or
                                      equal to, the value of Maximum. If ExclusiveMaximum
                                      is true, the variable is valid if it is strictly
                                      lower than the value of Maximum. NOTE: Can only
                                      be set if type is integer or number.'
                                    format: int64
                                    type: integer
                                  minItems:
                                    description: 'MinItems is the min length of an
                                      array variable. NOTE: Can only be set if type
                                      is array.'
                                    format: int64
                                    type: integer
                                  minLength:
                                    description: 'MinLength is the min length of a
                                      string variable. NOTE: Can only be set if type
                                      is string.'
                                    format: int64
                                    type: integer
                                  minimum:
                                    description: 'Minimum is the minimum of an integer
                                      or number variable. If ExclusiveMinimum is false,
                                      the variable is valid if it is greater than,
                                      or equal to, the value of Minimum. If ExclusiveMinimum
                                      is true, the variable is valid if it is strictly
                                      greater than the value of Minimum. NOTE: Can
                                      only be set if type is integer or number.'
                                    format: int64
                                    type: integer
                                  pattern:
                                    description: 'Pattern is the regex which a string
                                      variable must match. NOTE: Can only be set if
                                      type is string.'
                                    type: string
                                  properties:
                                    description: 'Properties specifies fields of an
                                      object. NOTE: Can only be set if type is object.
                                      NOTE: Properties is mutually exclusive with
                                      AdditionalProperties. NOTE: This field uses
                                      PreserveUnknownFields and Schemaless, because
                                      recursive validation is not possible.'
                                    x-kubernetes-preserve-unknown-fields: true
                                  required:
                                    description: 'Required specifies which fields
                                      of an object are required. NOTE: Can only be
                                      set if type is object.'
                                    items:
                                      type: string
                                    type: array
                                  type:
                                    description: 'Type is the type of the variable.
                                      Valid values are: object, array, string, integer,
                                      number or boolean.'
                                    type: string
                                  uniqueItems:
                                    description: 'UniqueItems specifies if items in
                                      an array must be unique. NOTE: Can only be set
                                      if type is array.'
                                    type: boolean
                                  x-kubernetes-preserve-unknown-fields:
                                    description: XPreserveUnknownFields allows setting
                                      fields in a variable object which are not defined
                                      in the variable schema. This affects fields
                                      recursively, except if nested properties or
                                      additionalProperties are specified in the schema.
                                    type: boolean
                                required:
                                - type
                                type: object
                            required:
                            - openAPIV3Schema
                            type: object
                        required:
                        - from
                        - required
                        - schema
                        type: object
                      type: array
                    definitionsConflict:
                      description: DefinitionsConflict specifies whether or not there
                        are conflicting definitions for a single variable name.
                      type: boolean
                    name:
                      description: Name is the name of the variable.
                      type: string
                  required:
                  - definitions
                  - name
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: clusterresourcesetbindings.addons.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: addons.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: ClusterResourceSetBinding
    listKind: ClusterResourceSetBindingList
    plural: clusterresourcesetbindings
    singular: clusterresourcesetbinding
  scope: Namespaced
  versions:
  - deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "ClusterResourceSetBinding lists all matching ClusterResourceSets
          with the cluster it belongs to. \n Deprecated: This type will be removed
          in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetBindingSpec defines the desired state of
              ClusterResourceSetBinding.
            properties:
              bindings:
                description: Bindings is a list of ClusterResourceSets and their resources.
                items:
                  description: ResourceSetBinding keeps info on all of the resources
                    in a ClusterResourceSet.
                  properties:
                    clusterResourceSetName:
                      description: ClusterResourceSetName is the name of the ClusterResourceSet
                        that is applied to the owner cluster of the binding.
                      type: string
                    resources:
                      description: Resources is a list of resources that the ClusterResourceSet
                        has.
                      items:
                        description: ResourceBinding shows the status of a resource
                          that belongs to a ClusterResourceSet matched by the owner
                          cluster of the ClusterResourceSetBinding object.
                        properties:
                          applied:
                            description: Applied is to track if a resource is applied
                              to the cluster or not.
                            type: boolean
                          hash:
                            description: Hash is the hash of a resource's data. This
                              can be used to decide if a resource is changed. For
                              "ApplyOnce" ClusterResourceSet.spec.strategy, this is
                              no-op as that strategy does not act on change.
                            type: string
                          kind:
                            description: 'Kind of the resource. Supported kinds are:
                              Secrets and ConfigMaps.'
                            enum:
                            - Secret
                            - ConfigMap
                            type: string
                          lastAppliedTime:
                            description: LastAppliedTime identifies when this resource
                              was last applied to the cluster.
                            format: date-time
                            type: string
                          name:
                            description: Name of the resource that is in the same
                              namespace with ClusterResourceSet object.
                            minLength: 1
                            type: string
                        required:
                        - applied
                        - kind
                        - name
                        type: object
                      type: array
                  required:
                  - clusterResourceSetName
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of ClusterResourceSetBinding
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "ClusterResourceSetBinding lists all matching ClusterResourceSets
          with the cluster it belongs to. \n Deprecated: This type will be removed
          in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetBindingSpec defines the desired state of
              ClusterResourceSetBinding.
            properties:
              bindings:
                description: Bindings is a list of ClusterResourceSets and their resources.
                items:
                  description: ResourceSetBinding keeps info on all of the resources
                    in a ClusterResourceSet.
                  properties:
                    clusterResourceSetName:
                      description: ClusterResourceSetName is the name of the ClusterResourceSet
                        that is applied to the owner cluster of the binding.
                      type: string
                    resources:
                      description: Resources is a list of resources that the ClusterResourceSet
                        has.
                      items:
                        description: ResourceBinding shows the status of a resource
                          that belongs to a ClusterResourceSet matched by the owner
                          cluster of the ClusterResourceSetBinding object.
                        properties:
                          applied:
                            description: Applied is to track if a resource is applied
                              to the cluster or not.
                            type: boolean
                          hash:
                            description: Hash is the hash of a resource's data. This
                              can be used to decide if a resource is changed. For
                              "ApplyOnce" ClusterResourceSet.spec.strategy, this is
                              no-op as that strategy does not act on change.
                            type: string
                          kind:
                            description: 'Kind of the resource. Supported kinds are:
                              Secrets and ConfigMaps.'
                            enum:
                            - Secret
                            - ConfigMap
                            type: string
                          lastAppliedTime:
                            description: LastAppliedTime identifies when this resource
                              was last applied to the cluster.
                            format: date-time
                            type: string
                          name:
                            description: Name of the resource that is in the same
                              namespace with ClusterResourceSet object.
                            minLength: 1
                            type: string
                        required:
                        - applied
                        - kind
                        - name
                        type: object
                      type: array
                  required:
                  - clusterResourceSetName
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of ClusterResourceSetBinding
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ClusterResourceSetBinding lists all matching ClusterResourceSets
          with the cluster it belongs to.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetBindingSpec defines the desired state of
              ClusterResourceSetBinding.
            properties:
              bindings:
                description: Bindings is a list of ClusterResourceSets and their resources.
                items:
                  description: ResourceSetBinding keeps info on all of the resources
                    in a ClusterResourceSet.
                  properties:
                    clusterResourceSetName:
                      description: ClusterResourceSetName is the name of the ClusterResourceSet
                        that is applied to the owner cluster of the binding.
                      type: string
                    resources:
                      description: Resources is a list of resources that the ClusterResourceSet
                        has.
                      items:
                        description: ResourceBinding shows the status of a resource
                          that belongs to a ClusterResourceSet matched by the owner
                          cluster of the ClusterResourceSetBinding object.
                        properties:
                          applied:
                            description: Applied is to track if a resource is applied
                              to the cluster or not.
                            type: boolean
                          hash:
                            description: Hash is the hash of a resource's data. This
                              can be used to decide if a resource is changed. For
                              "ApplyOnce" ClusterResourceSet.spec.strategy, this is
                              no-op as that strategy does not act on change.
                            type: string
                          kind:
                            description: 'Kind of the resource. Supported kinds are:
                              Secrets and ConfigMaps.'
                            enum:
                            - Secret
                            - ConfigMap
                            type: string
                          lastAppliedTime:
                            description: LastAppliedTime identifies when this resource
                              was last applied to the cluster.
                            format: date-time
                            type: string
                          name:
                            description: Name of the resource that is in the same
                              namespace with ClusterResourceSet object.
                            minLength: 1
                            type: string
                        required:
                        - applied
                        - kind
                        - name
                        type: object
                      type: array
                  required:
                  - clusterResourceSetName
                  type: object
                type: array
              clusterName:
                description: 'ClusterName is the name of the Cluster this binding
                  applies to. Note: this field mandatory in v1beta2.'
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: clusterresourcesets.addons.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: addons.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: ClusterResourceSet
    listKind: ClusterResourceSetList
    plural: clusterresourcesets
    singular: clusterresourceset
  scope: Namespaced
  versions:
  - deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "ClusterResourceSet is the Schema for the clusterresourcesets
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
            properties:
              clusterSelector:
                description: Label selector for Clusters. The Clusters that are selected
                  by this will be the ones affected by this ClusterResourceSet. It
                  must match the Cluster labels. This field is immutable.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              resources:
                description: Resources is a list of Secrets/ConfigMaps where each
                  contains 1 or more resources to be applied to remote clusters.
                items:
                  description: ResourceRef specifies a resource.
                  properties:
                    kind:
                      description: 'Kind of the resource. Supported kinds are: Secrets
                        and ConfigMaps.'
                      enum:
                      - Secret
                      - ConfigMap
                      type: string
                    name:
                      description: Name of the resource that is in the same namespace
                        with ClusterResourceSet object.
                      minLength: 1
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              strategy:
                description: Strategy is the strategy to be used during applying resources.
                  Defaults to ApplyOnce. This field is immutable.
                enum:
                - ApplyOnce
                type: string
            required:
            - clusterSelector
            type: object
          status:
            description: ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
            properties:
              conditions:
                description: Conditions defines current state of the ClusterResourceSet.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed ClusterResourceSet.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of ClusterResourceSet
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "ClusterResourceSet is the Schema for the clusterresourcesets
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
            properties:
              clusterSelector:
                description: Label selector for Clusters. The Clusters that are selected
                  by this will be the ones affected by this ClusterResourceSet. It
                  must match the Cluster labels. This field is immutable. Label selector
                  cannot be empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              resources:
                description: Resources is a list of Secrets/ConfigMaps where each
                  contains 1 or more resources to be applied to remote clusters.
                items:
                  description: ResourceRef specifies a resource.
                  properties:
                    kind:
                      description: 'Kind of the resource. Supported kinds are: Secrets
                        and ConfigMaps.'
                      enum:
                      - Secret
                      - ConfigMap
                      type: string
                    name:
                      description: Name of the resource that is in the same namespace
                        with ClusterResourceSet object.
                      minLength: 1
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              strategy:
                description: Strategy is the strategy to be used during applying resources.
                  Defaults to ApplyOnce. This field is immutable.
                enum:
                - ApplyOnce
                type: string
            required:
            - clusterSelector
            type: object
          status:
            description: ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
            properties:
              conditions:
                description: Conditions defines current state of the ClusterResourceSet.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed ClusterResourceSet.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of ClusterResourceSet
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ClusterResourceSet is the Schema for the clusterresourcesets
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
            properties:
              clusterSelector:
                description: Label selector for Clusters. The Clusters that are selected
                  by this will be the ones affected by this ClusterResourceSet. It
                  must match the Cluster labels. This field is immutable. Label selector
                  cannot be empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              resources:
                description: Resources is a list of Secrets/ConfigMaps where each
                  contains 1 or more resources to be applied to remote clusters.
                items:
                  description: ResourceRef specifies a resource.
                  properties:
                    kind:
                      description: 'Kind of the resource. Supported kinds are: Secrets
                        and ConfigMaps.'
                      enum:
                      - Secret
                      - ConfigMap
                      type: string
                    name:
                      description: Name of the resource that is in the same namespace
                        with ClusterResourceSet object.
                      minLength: 1
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              strategy:
                description: Strategy is the strategy to be used during applying resources.
                  Defaults to ApplyOnce. This field is immutable.
                enum:
                - ApplyOnce
                - Reconcile
                type: string
            required:
            - clusterSelector
            type: object
          status:
            description: ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
            properties:
              conditions:
                description: Conditions defines current state of the ClusterResourceSet.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed ClusterResourceSet.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: clusters.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    shortNames:
    - cl
    singular: cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster.
            properties:
              clusterNetwork:
                description: Cluster network configuration.
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              controlPlaneRef:
                description: ControlPlaneRef is an optional reference to a provider-specific
                  resource that holds the details for provisioning the Control Plane
                  for a Cluster.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Cluster and all its associated objects.
                type: boolean
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              conditions:
                description: Conditions defines current service state of the cluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              controlPlaneInitialized:
                description: ControlPlaneInitialized defines if the control plane
                  has been initialized.
                type: boolean
              controlPlaneReady:
                description: ControlPlaneReady defines if the control plane is ready.
                type: boolean
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a slice of failure domain objects synced
                  from the infrastructure provider.
                type: object
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of Cluster
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "Cluster is the Schema for the clusters API. \n Deprecated: This
          type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster.
            properties:
              clusterNetwork:
                description: Cluster network configuration.
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              controlPlaneRef:
                description: ControlPlaneRef is an optional reference to a provider-specific
                  resource that holds the details for provisioning the Control Plane
                  for a Cluster.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Cluster and all its associated objects.
                type: boolean
              topology:
                description: 'This encapsulates the topology for the cluster. NOTE:
                  It is required to enable the ClusterTopology feature gate flag to
                  activate managed topologies support; this feature is highly experimental,
                  and parts of it might still be not implemented.'
                properties:
                  class:
                    description: The name of the ClusterClass object to create the
                      topology.
                    type: string
                  controlPlane:
                    description: ControlPlane describes the cluster control plane.
                    properties:
                      metadata:
                        description: "Metadata is the metadata applied to the machines
                          of the ControlPlane. At runtime this metadata is merged
                          with the corresponding metadata from the ClusterClass. \n
                          This field is supported if and only if the control plane
                          provider template referenced in the ClusterClass is Machine
                          based."
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      replicas:
                        description: Replicas is the number of control plane nodes.
                          If the value is nil, the ControlPlane object is created
                          without the number of Replicas and it's assumed that the
                          control plane controller does not implement support for
                          this field. When specified against a control plane provider
                          that lacks support for this field, this value will be ignored.
                        format: int32
                        type: integer
                    type: object
                  rolloutAfter:
                    description: RolloutAfter performs a rollout of the entire cluster
                      one component at a time, control plane first and then machine
                      deployments.
                    format: date-time
                    type: string
                  version:
                    description: The Kubernetes version of the cluster.
                    type: string
                  workers:
                    description: Workers encapsulates the different constructs that
                      form the worker nodes for the cluster.
                    properties:
                      machineDeployments:
                        description: MachineDeployments is a list of machine deployments
                          in the cluster.
                        items:
                          description: MachineDeploymentTopology specifies the different
                            parameters for a set of worker nodes in the topology.
                            This set of nodes is managed by a MachineDeployment object
                            whose lifecycle is managed by the Cluster controller.
                          properties:
                            class:
                              description: Class is the name of the MachineDeploymentClass
                                used to create the set of worker nodes. This should
                                match one of the deployment classes defined in the
                                ClusterClass object mentioned in the `Cluster.Spec.Class`
                                field.
                              type: string
                            metadata:
                              description: Metadata is the metadata applied to the
                                machines of the MachineDeployment. At runtime this
                                metadata is merged with the corresponding metadata
                                from the ClusterClass.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                            name:
                              description: Name is the unique identifier for this
                                MachineDeploymentTopology. The value is used with
                                other unique identifiers to create a MachineDeployment's
                                Name (e.g. cluster's name, etc). In case the name
                                is greater than the allowed maximum length, the values
                                are hashed together.
                              type: string
                            replicas:
                              description: Replicas is the number of worker nodes
                                belonging to this set. If the value is nil, the MachineDeployment
                                is created without the number of Replicas (defaulting
                                to zero) and it's assumed that an external entity
                                (like cluster autoscaler) is responsible for the management
                                of this value.
                              format: int32
                              type: integer
                          required:
                          - class
                          - name
                          type: object
                        type: array
                    type: object
                required:
                - class
                - version
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              conditions:
                description: Conditions defines current service state of the cluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              controlPlaneReady:
                description: ControlPlaneReady defines if the control plane is ready.
                type: boolean
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a slice of failure domain objects synced
                  from the infrastructure provider.
                type: object
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Time duration since creation of Cluster
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this Cluster
      jsonPath: .spec.topology.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster.
            properties:
              clusterNetwork:
                description: Cluster network configuration.
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              controlPlaneRef:
                description: ControlPlaneRef is an optional reference to a provider-specific
                  resource that holds the details for provisioning the Control Plane
                  for a Cluster.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Cluster and all its associated objects.
                type: boolean
              topology:
                description: 'This encapsulates the topology for the cluster. NOTE:
                  It is required to enable the ClusterTopology feature gate flag to
                  activate managed topologies support; this feature is highly experimental,
                  and parts of it might still be not implemented.'
                properties:
                  class:
                    description: The name of the ClusterClass object to create the
                      topology.
                    type: string
                  controlPlane:
                    description: ControlPlane describes the cluster control plane.
                    properties:
                      machineHealthCheck:
                        description: MachineHealthCheck allows to enable, disable
                          and override the MachineHealthCheck configuration in the
                          ClusterClass for this control plane.
                        properties:
                          enable:
                            description: "Enable controls if a MachineHealthCheck
                              should be created for the target machines. \n If false:
                              No MachineHealthCheck will be created. \n If not set(default):
                              A MachineHealthCheck will be created if it is defined
                              here or in the associated ClusterClass. If no MachineHealthCheck
                              is defined then none will be created. \n If true: A
                              MachineHealthCheck is guaranteed to be created. Cluster
                              validation will block if `enable` is true and no MachineHealthCheck
                              definition is available."
                            type: boolean
                          maxUnhealthy:
                            anyOf:
                            - type: integer
                            - type: string
                            description: Any further remediation is only allowed if
                              at most "MaxUnhealthy" machines selected by "selector"
                              are not healthy.
                            x-kubernetes-int-or-string: true
                          nodeStartupTimeout:
                            description: Machines older than this duration without
                              a node will be considered to have failed and will be
                              remediated. If you wish to disable this feature, set
                              the value explicitly to 0.
                            type: string
                          remediationTemplate:
                            description: "RemediationTemplate is a reference to a
                              remediation template provided by an infrastructure provider.
                              \n This field is completely optional, when filled, the
                              MachineHealthCheck controller creates a new object from
                              the template referenced and hands off remediation of
                              the machine to a controller that lives outside of Cluster
                              API."
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          unhealthyConditions:
                            description: UnhealthyConditions contains a list of the
                              conditions that determine whether a node is considered
                              unhealthy. The conditions are combined in a logical
                              OR, i.e. if any of the conditions is met, the node is
                              unhealthy.
                            items:
                              description: UnhealthyCondition represents a Node condition
                                type and value with a timeout specified as a duration.  When
                                the named condition has been in the given status for
                                at least the timeout value, a node is considered unhealthy.
                              properties:
                                status:
                                  minLength: 1
                                  type: string
                                timeout:
                                  type: string
                                type:
                                  minLength: 1
                                  type: string
                              required:
                              - status
                              - timeout
                              - type
                              type: object
                            type: array
                          unhealthyRange:
                            description: 'Any further remediation is only allowed
                              if the number of machines selected by "selector" as
                              not healthy is within the range of "UnhealthyRange".
                              Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This
                              means that remediation will be allowed only when: (a)
                              there are at least 3 unhealthy machines (and) (b) there
                              are at most 5 unhealthy machines'
                            pattern: ^\[[0-9]+-[0-9]+\]$
                            type: string
                        type: object
                      metadata:
                        description: Metadata is the metadata applied to the ControlPlane
                          and the Machines of the ControlPlane if the ControlPlaneTemplate
                          referenced by the ClusterClass is machine based. If not,
                          it is applied only to the ControlPlane. At runtime this
                          metadata is merged with the corresponding metadata from
                          the ClusterClass.
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      nodeDeletionTimeout:
                        description: NodeDeletionTimeout defines how long the controller
                          will attempt to delete the Node that the Machine hosts after
                          the Machine is marked for deletion. A duration of 0 will
                          retry deletion indefinitely. Defaults to 10 seconds.
                        type: string
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      nodeVolumeDetachTimeout:
                        description: NodeVolumeDetachTimeout is the total amount of
                          time that the controller will spend on waiting for all volumes
                          to be detached. The default value is 0, meaning that the
                          volumes can be detached without any time limitations.
                        type: string
                      replicas:
                        description: Replicas is the number of control plane nodes.
                          If the value is nil, the ControlPlane object is created
                          without the number of Replicas and it's assumed that the
                          control plane controller does not implement support for
                          this field. When specified against a control plane provider
                          that lacks support for this field, this value will be ignored.
                        format: int32
                        type: integer
                    type: object
                  rolloutAfter:
                    description: "RolloutAfter performs a rollout of the entire cluster
                      one component at a time, control plane first and then machine
                      deployments. \n Deprecated: This field has no function and is
                      going to be removed in the next apiVersion."
                    format: date-time
                    type: string
                  variables:
                    description: Variables can be used to customize the Cluster through
                      patches. They must comply to the corresponding VariableClasses
                      defined in the ClusterClass.
                    items:
                      description: ClusterVariable can be used to customize the Cluster
                        through patches. Each ClusterVariable is associated with a
                        Variable definition in the ClusterClass `status` variables.
                      properties:
                        definitionFrom:
                          description: 'DefinitionFrom specifies where the definition
                            of this Variable is from. DefinitionFrom is `inline` when
                            the definition is from the ClusterClass `.spec.variables`
                            or the name of a patch defined in the ClusterClass `.spec.patches`
                            where the patch is external and provides external variables.
                            This field is mandatory if the variable has `DefinitionsConflict:
                            true` in ClusterClass `status.variables[]`'
                          type: string
                        name:
                          description: Name of the variable.
                          type: string
                        value:
                          description: 'Value of the variable. Note: the value will
                            be validated against the schema of the corresponding ClusterClassVariable
                            from the ClusterClass. Note: We have to use apiextensionsv1.JSON
                            instead of a custom JSON type, because controller-tools
                            has a hard-coded schema for apiextensionsv1.JSON which
                            cannot be produced by another type via controller-tools,
                            i.e. it is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
                          x-kubernetes-preserve-unknown-fields: true
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  version:
                    description: The Kubernetes version of the cluster.
                    type: string
                  workers:
                    description: Workers encapsulates the different constructs that
                      form the worker nodes for the cluster.
                    properties:
                      machineDeployments:
                        description: MachineDeployments is a list of machine deployments
                          in the cluster.
                        items:
                          description: MachineDeploymentTopology specifies the different
                            parameters for a set of worker nodes in the topology.
                            This set of nodes is managed by a MachineDeployment object
                            whose lifecycle is managed by the Cluster controller.
                          properties:
                            class:
                              description: Class is the name of the MachineDeploymentClass
                                used to create the set of worker nodes. This should
                                match one of the deployment classes defined in the
                                ClusterClass object mentioned in the `Cluster.Spec.Class`
                                field.
                              type: string
                            failureDomain:
                              description: FailureDomain is the failure domain the
                                machines will be created in. Must match a key in the
                                FailureDomains map stored on the cluster object.
                              type: string
                            machineHealthCheck:
                              description: MachineHealthCheck allows to enable, disable
                                and override the MachineHealthCheck configuration
                                in the ClusterClass for this MachineDeployment.
                              properties:
                                enable:
                                  description: "Enable controls if a MachineHealthCheck
                                    should be created for the target machines. \n
                                    If false: No MachineHealthCheck will be created.
                                    \n If not set(default): A MachineHealthCheck will
                                    be created if it is defined here or in the associated
                                    ClusterClass. If no MachineHealthCheck is defined
                                    then none will be created. \n If true: A MachineHealthCheck
                                    is guaranteed to be created. Cluster validation
                                    will block if `enable` is true and no MachineHealthCheck
                                    definition is available."
                                  type: boolean
                                maxUnhealthy:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Any further remediation is only allowed
                                    if at most "MaxUnhealthy" machines selected by
                                    "selector" are not healthy.
                                  x-kubernetes-int-or-string: true
                                nodeStartupTimeout:
                                  description: Machines older than this duration without
                                    a node will be considered to have failed and will
                                    be remediated. If you wish to disable this feature,
                                    set the value explicitly to 0.
                                  type: string
                                remediationTemplate:
                                  description: "RemediationTemplate is a reference
                                    to a remediation template provided by an infrastructure
                                    provider. \n This field is completely optional,
                                    when filled, the MachineHealthCheck controller
                                    creates a new object from the template referenced
                                    and hands off remediation of the machine to a
                                    controller that lives outside of Cluster API."
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an
                                        object instead of an entire object, this string
                                        should contain a valid JSON/Go field access
                                        statement, such as desiredState.manifest.containers[2].
                                        For example, if the object reference is to
                                        a container within a pod, this would take
                                        on a value like: "spec.containers{name}" (where
                                        "name" refers to the name of the container
                                        that triggered the event) or if no container
                                        name is specified "spec.containers[2]" (container
                                        with index 2 in this pod). This syntax is
                                        chosen only to have some well-defined way
                                        of referencing a part of an object. TODO:
                                        this design is not final and this field is
                                        subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More
                                        info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which
                                        this reference is made, if any. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                                unhealthyConditions:
                                  description: UnhealthyConditions contains a list
                                    of the conditions that determine whether a node
                                    is considered unhealthy. The conditions are combined
                                    in a logical OR, i.e. if any of the conditions
                                    is met, the node is unhealthy.
                                  items:
                                    description: UnhealthyCondition represents a Node
                                      condition type and value with a timeout specified
                                      as a duration.  When the named condition has
                                      been in the given status for at least the timeout
                                      value, a node is considered unhealthy.
                                    properties:
                                      status:
                                        minLength: 1
                                        type: string
                                      timeout:
                                        type: string
                                      type:
                                        minLength: 1
                                        type: string
                                    required:
                                    - status
                                    - timeout
                                    - type
                                    type: object
                                  type: array
                                unhealthyRange:
                                  description: 'Any further remediation is only allowed
                                    if the number of machines selected by "selector"
                                    as not healthy is within the range of "UnhealthyRange".
                                    Takes precedence over MaxUnhealthy. Eg. "[3-5]"
                                    - This means that remediation will be allowed
                                    only when: (a) there are at least 3 unhealthy
                                    machines (and) (b) there are at most 5 unhealthy
                                    machines'
                                  pattern: ^\[[0-9]+-[0-9]+\]$
                                  type: string
                              type: object
                            metadata:
                              description: Metadata is the metadata applied to the
                                MachineDeployment and the machines of the MachineDeployment.
                                At runtime this metadata is merged with the corresponding
                                metadata from the ClusterClass.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                            minReadySeconds:
                              description: Minimum number of seconds for which a newly
                                created machine should be ready. Defaults to 0 (machine
                                will be considered available as soon as it is ready)
                              format: int32
                              type: integer
                            name:
                              description: Name is the unique identifier for this
                                MachineDeploymentTopology. The value is used with
                                other unique identifiers to create a MachineDeployment's
                                Name (e.g. cluster's name, etc). In case the name
                                is greater than the allowed maximum length, the values
                                are hashed together.
                              type: string
                            nodeDeletionTimeout:
                              description: NodeDeletionTimeout defines how long the
                                controller will attempt to delete the Node that the
                                Machine hosts after the Machine is marked for deletion.
                                A duration of 0 will retry deletion indefinitely.
                                Defaults to 10 seconds.
                              type: string
                            nodeDrainTimeout:
                              description: 'NodeDrainTimeout is the total amount of
                                time that the controller will spend on draining a
                                node. The default value is 0, meaning that the node
                                can be drained without any time limitations. NOTE:
                                NodeDrainTimeout is different from `kubectl drain
                                --timeout`'
                              type: string
                            nodeVolumeDetachTimeout:
                              description: NodeVolumeDetachTimeout is the total amount
                                of time that the controller will spend on waiting
                                for all volumes to be detached. The default value
                                is 0, meaning that the volumes can be detached without
                                any time limitations.
                              type: string
                            replicas:
                              description: Replicas is the number of worker nodes
                                belonging to this set. If the value is nil, the MachineDeployment
                                is created without the number of Replicas (defaulting
                                to 1) and it's assumed that an external entity (like
                                cluster autoscaler) is responsible for the management
                                of this value.
                              format: int32
                              type: integer
                            strategy:
                              description: The deployment strategy to use to replace
                                existing machines with new ones.
                              properties:
                                rollingUpdate:
                                  description: Rolling update config params. Present
                                    only if MachineDeploymentStrategyType = RollingUpdate.
                                  properties:
                                    deletePolicy:
                                      description: DeletePolicy defines the policy
                                        used by the MachineDeployment to identify
                                        nodes to delete when downscaling. Valid values
                                        are "Random, "Newest", "Oldest" When no value
                                        is supplied, the default DeletePolicy of MachineSet
                                        is used
                                      enum:
                                      - Random
                                      - Newest
                                      - Oldest
                                      type: string
                                    maxSurge:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: 'The maximum number of machines
                                        that can be scheduled above the desired number
                                        of machines. Value can be an absolute number
                                        (ex: 5) or a percentage of desired machines
                                        (ex: 10%). This can not be 0 if MaxUnavailable
                                        is 0. Absolute number is calculated from percentage
                                        by rounding up. Defaults to 1. Example: when
                                        this is set to 30%, the new MachineSet can
                                        be scaled up immediately when the rolling
                                        update starts, such that the total number
                                        of old and new machines do not exceed 130%
                                        of desired machines. Once old machines have
                                        been killed, new MachineSet can be scaled
                                        up further, ensuring that total number of
                                        machines running at any time during the update
                                        is at most 130% of desired machines.'
                                      x-kubernetes-int-or-string: true
                                    maxUnavailable:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: 'The maximum number of machines
                                        that can be unavailable during the update.
                                        Value can be an absolute number (ex: 5) or
                                        a percentage of desired machines (ex: 10%).
                                        Absolute number is calculated from percentage
                                        by rounding down. This can not be 0 if MaxSurge
                                        is 0. Defaults to 0. Example: when this is
                                        set to 30%, the old MachineSet can be scaled
                                        down to 70% of desired machines immediately
                                        when the rolling update starts. Once new machines
                                        are ready, old MachineSet can be scaled down
                                        further, followed by scaling up the new MachineSet,
                                        ensuring that the total number of machines
                                        available at all times during the update is
                                        at least 70% of desired machines.'
                                      x-kubernetes-int-or-string: true
                                  type: object
                                type:
                                  description: Type of deployment. Default is RollingUpdate.
                                  enum:
                                  - RollingUpdate
                                  - OnDelete
                                  type: string
                              type: object
                            variables:
                              description: Variables can be used to customize the
                                MachineDeployment through patches.
                              properties:
                                overrides:
                                  description: Overrides can be used to override Cluster
                                    level variables.
                                  items:
                                    description: ClusterVariable can be used to customize
                                      the Cluster through patches. Each ClusterVariable
                                      is associated with a Variable definition in
                                      the ClusterClass `status` variables.
                                    properties:
                                      definitionFrom:
                                        description: 'DefinitionFrom specifies where
                                          the definition of this Variable is from.
                                          DefinitionFrom is `inline` when the definition
                                          is from the ClusterClass `.spec.variables`
                                          or the name of a patch defined in the ClusterClass
                                          `.spec.patches` where the patch is external
                                          and provides external variables. This field
                                          is mandatory if the variable has `DefinitionsConflict:
                                          true` in ClusterClass `status.variables[]`'
                                        type: string
                                      name:
                                        description: Name of the variable.
                                        type: string
                                      value:
                                        description: 'Value of the variable. Note:
                                          the value will be validated against the
                                          schema of the corresponding ClusterClassVariable
                                          from the ClusterClass. Note: We have to
                                          use apiextensionsv1.JSON instead of a custom
                                          JSON type, because controller-tools has
                                          a hard-coded schema for apiextensionsv1.JSON
                                          which cannot be produced by another type
                                          via controller-tools, i.e. it is not possible
                                          to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                              type: object
                          required:
                          - class
                          - name
                          type: object
                        type: array
                    type: object
                required:
                - class
                - version
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              conditions:
                description: Conditions defines current service state of the cluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              controlPlaneReady:
                description: ControlPlaneReady defines if the control plane is ready.
                type: boolean
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a slice of failure domain objects synced
                  from the infrastructure provider.
                type: object
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  name: clusters.k0smotron.io
spec:
  group: k0smotron.io
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    shortNames:
    - kmc
    singular: cluster
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the k0smotronclusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            default:
              service:
                type: NodePort
            description: ClusterSpec defines the desired state of K0smotronCluster
            properties:
              certificateRefs:
                description: CertificateRefs defines the certificate references.
                items:
                  properties:
                    name:
                      type: string
                    type:
                      enum:
                      - ca
                      - sa
                      - proxy
                      type: string
                  required:
                  - type
                  type: object
                type: array
              controllerPlaneFlags:
                description: ControlPlaneFlags allows to configure additional flags
                  for k0s control plane and to override existing ones. The default
                  flags are kept unless they are overriden explicitly. Flags with
                  arguments must be specified as a single string, e.g. --some-flag=argument
                items:
                  type: string
                type: array
              enableMonitoring:
                description: EnableMonitoring enables prometheus sidecar that scrapes
                  metrics from the child cluster system components and expose them
                  as usual kubernetes pod metrics.
                type: boolean
              externalAddress:
                description: ExternalAddress defines k0s external address. See https://docs.k0sproject.io/stable/configuration/#specapi
                  Will be detected automatically for service type LoadBalancer.
                type: string
              k0sConfig:
                description: k0sConfig defines the k0s configuration. Note, that some
                  fields will be overwritten by k0smotron. If empty, will be used
                  default configuration. @see https://docs.k0sproject.io/stable/configuration/
                type: object
                x-kubernetes-preserve-unknown-fields: true
              k0sImage:
                default: k0sproject/k0s
                description: K0sImage defines the k0s image to be deployed. If empty
                  k0smotron will pick it automatically. Must not include the image
                  tag.
                type: string
              k0sVersion:
                description: K0sVersion defines the k0s version to be deployed. If
                  empty k0smotron will pick it automatically.
                type: string
              kineDataSourceSecretName:
                description: KineDataSourceSecretName defines the name of kine datasource
                  URL secret. KineDataSourceURL or KineDataSourceSecretName are required
                  for HA controlplane setup and one of them must be set if replicas
                  > 1.
                type: string
              kineDataSourceURL:
                description: KineDataSourceURL defines the kine datasource URL. KineDataSourceURL
                  or KineDataSourceSecretName are required for HA controlplane setup
                  and one of them must be set if replicas > 1.
                type: string
              manifests:
                description: 'Manifests allows to specify list of volumes with manifests
                  to be deployed in the cluster. The volumes will be mounted in /var/lib/k0s/manifests/<manifests.name>,
                  for this reason each manifest is a stack. K0smotron allows any kind
                  of volume, but the recommendation is to use secrets and configmaps.
                  For more information check: https://docs.k0sproject.io/stable/manifests/
                  and https://kubernetes.io/docs/concepts/storage/volumes'
                items:
                  description: Volume represents a named volume in a pod that may
                    be accessed by any container in the pod.
                  properties:
                    awsElasticBlockStore:
                      description: 'awsElasticBlockStore represents an AWS Disk resource
                        that is attached to a kubelet''s host machine and then exposed
                        to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        partition:
                          description: 'partition is the partition in the volume that
                            you want to mount. If omitted, the default is to mount
                            by volume name. Examples: For volume /dev/sda1, you specify
                            the partition as "1". Similarly, the volume partition
                            for /dev/sda is "0" (or you can leave the property empty).'
                          format: int32
                          type: integer
                        readOnly:
                          description: 'readOnly value true will force the readOnly
                            setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                          type: boolean
                        volumeID:
                          description: 'volumeID is unique ID of the persistent disk
                            resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                          type: string
                      required:
                      - volumeID
                      type: object
                    azureDisk:
                      description: azureDisk represents an Azure Data Disk mount on
                        the host and bind mount to the pod.
                      properties:
                        cachingMode:
                          description: 'cachingMode is the Host Caching mode: None,
                            Read Only, Read Write.'
                          type: string
                        diskName:
                          description: diskName is the Name of the data disk in the
                            blob storage
                          type: string
                        diskURI:
                          description: diskURI is the URI of data disk in the blob
                            storage
                          type: string
                        fsType:
                          description: fsType is Filesystem type to mount. Must be
                            a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        kind:
                          description: 'kind expected values are Shared: multiple
                            blob disks per storage account  Dedicated: single blob
                            disk per storage account  Managed: azure managed data
                            disk (only in managed availability set). defaults to shared'
                          type: string
                        readOnly:
                          description: readOnly Defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                      required:
                      - diskName
                      - diskURI
                      type: object
                    azureFile:
                      description: azureFile represents an Azure File Service mount
                        on the host and bind mount to the pod.
                      properties:
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretName:
                          description: secretName is the  name of secret that contains
                            Azure Storage Account Name and Key
                          type: string
                        shareName:
                          description: shareName is the azure share Name
                          type: string
                      required:
                      - secretName
                      - shareName
                      type: object
                    cephfs:
                      description: cephFS represents a Ceph FS mount on the host that
                        shares a pod's lifetime
                      properties:
                        monitors:
                          description: 'monitors is Required: Monitors is a collection
                            of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          items:
                            type: string
                          type: array
                        path:
                          description: 'path is Optional: Used as the mounted root,
                            rather than the full Ceph tree, default is /'
                          type: string
                        readOnly:
                          description: 'readOnly is Optional: Defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: boolean
                        secretFile:
                          description: 'secretFile is Optional: SecretFile is the
                            path to key ring for User, default is /etc/ceph/user.secret
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: string
                        secretRef:
                          description: 'secretRef is Optional: SecretRef is reference
                            to the authentication secret for User, default is empty.
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        user:
                          description: 'user is optional: User is the rados user name,
                            default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: string
                      required:
                      - monitors
                      type: object
                    cinder:
                      description: 'cinder represents a cinder volume attached and
                        mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
                            be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: string
                        readOnly:
                          description: 'readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                            More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: boolean
                        secretRef:
                          description: 'secretRef is optional: points to a secret
                            object containing parameters used to connect to OpenStack.'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        volumeID:
                          description: 'volumeID used to identify the volume in cinder.
                            More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: string
                      required:
                      - volumeID
                      type: object
                    configMap:
                      description: configMap represents a configMap that should populate
                        this volume
                      properties:
                        defaultMode:
                          description: 'defaultMode is optional: mode bits used to
                            set permissions on created files by default. Must be an
                            octal value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items if unspecified, each key-value pair in
                            the Data field of the referenced ConfigMap will be projected
                            into the volume as a file whose name is the key and content
                            is the value. If specified, the listed keys will be projected
                            into the specified paths, and unlisted keys will not be
                            present. If a key is specified which is not present in
                            the ConfigMap, the volume setup will error unless it is
                            marked optional. Paths must be relative and may not contain
                            the '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to
                                  set permissions on this file. Must be an octal value
                                  between 0000 and 0777 or a decimal value between
                                  0 and 511. YAML accepts both octal and decimal values,
                                  JSON requires decimal values for mode bits. If not
                                  specified, the volume defaultMode will be used.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file
                                  to map the key to. May not be an absolute path.
                                  May not contain the path element '..'. May not start
                                  with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                        optional:
                          description: optional specify whether the ConfigMap or its
                            keys must be defined
                          type: boolean
                      type: object
                      x-kubernetes-map-type: atomic
                    csi:
                      description: csi (Container Storage Interface) represents ephemeral
                        storage that is handled by certain external CSI drivers (Beta
                        feature).
                      properties:
                        driver:
                          description: driver is the name of the CSI driver that handles
                            this volume. Consult with your admin for the correct name
                            as registered in the cluster.
                          type: string
                        fsType:
                          description: fsType to mount. Ex. "ext4", "xfs", "ntfs".
                            If not provided, the empty value is passed to the associated
                            CSI driver which will determine the default filesystem
                            to apply.
                          type: string
                        nodePublishSecretRef:
                          description: nodePublishSecretRef is a reference to the
                            secret object containing sensitive information to pass
                            to the CSI driver to complete the CSI NodePublishVolume
                            and NodeUnpublishVolume calls. This field is optional,
                            and  may be empty if no secret is required. If the secret
                            object contains more than one secret, all secret references
                            are passed.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        readOnly:
                          description: readOnly specifies a read-only configuration
                            for the volume. Defaults to false (read/write).
                          type: boolean
                        volumeAttributes:
                          additionalProperties:
                            type: string
                          description: volumeAttributes stores driver-specific properties
                            that are passed to the CSI driver. Consult your driver's
                            documentation for supported values.
                          type: object
                      required:
                      - driver
                      type: object
                    downwardAPI:
                      description: downwardAPI represents downward API about the pod
                        that should populate this volume
                      properties:
                        defaultMode:
                          description: 'Optional: mode bits to use on created files
                            by default. Must be a Optional: mode bits used to set
                            permissions on created files by default. Must be an octal
                            value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: Items is a list of downward API volume file
                          items:
                            description: DownwardAPIVolumeFile represents information
                              to create the file containing the pod field
                            properties:
                              fieldRef:
                                description: 'Required: Selects a field of the pod:
                                  only annotations, labels, name and namespace are
                                  supported.'
                                properties:
                                  apiVersion:
                                    description: Version of the schema the FieldPath
                                      is written in terms of, defaults to "v1".
                                    type: string
                                  fieldPath:
                                    description: Path of the field to select in the
                                      specified API version.
                                    type: string
                                required:
                                - fieldPath
                                type: object
                                x-kubernetes-map-type: atomic
                              mode:
                                description: 'Optional: mode bits used to set permissions
                                  on this file, must be an octal value between 0000
                                  and 0777 or a decimal value between 0 and 511. YAML
                                  accepts both octal and decimal values, JSON requires
                                  decimal values for mode bits. If not specified,
                                  the volume defaultMode will be used. This might
                                  be in conflict with other options that affect the
                                  file mode, like fsGroup, and the result can be other
                                  mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: 'Required: Path is  the relative path
                                  name of the file to be created. Must not be absolute
                                  or contain the ''..'' path. Must be utf-8 encoded.
                                  The first item of the relative path must not start
                                  with ''..'''
                                type: string
                              resourceFieldRef:
                                description: 'Selects a resource of the container:
                                  only resources limits and requests (limits.cpu,
                                  limits.memory, requests.cpu and requests.memory)
                                  are currently supported.'
                                properties:
                                  containerName:
                                    description: 'Container name: required for volumes,
                                      optional for env vars'
                                    type: string
                                  divisor:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: Specifies the output format of the
                                      exposed resources, defaults to "1"
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  resource:
                                    description: 'Required: resource to select'
                                    type: string
                                required:
                                - resource
                                type: object
                                x-kubernetes-map-type: atomic
                            required:
                            - path
                            type: object
                          type: array
                      type: object
                    emptyDir:
                      description: 'emptyDir represents a temporary directory that
                        shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                      properties:
                        medium:
                          description: 'medium represents what type of storage medium
                            should back this directory. The default is "" which means
                            to use the node''s default medium. Must be an empty string
                            (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                          type: string
                        sizeLimit:
                          anyOf:
                          - type: integer
                          - type: string
                          description: 'sizeLimit is the total amount of local storage
                            required for this EmptyDir volume. The size limit is also
                            applicable for memory medium. The maximum usage on memory
                            medium EmptyDir would be the minimum value between the
                            SizeLimit specified here and the sum of memory limits
                            of all containers in a pod. The default is nil which means
                            that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                      type: object
                    ephemeral:
                      description: "ephemeral represents a volume that is handled
                        by a cluster storage driver. The volume's lifecycle is tied
                        to the pod that defines it - it will be created before the
                        pod starts, and deleted when the pod is removed. \n Use this
                        if: a) the volume is only needed while the pod runs, b) features
                        of normal volumes like restoring from snapshot or capacity
                        tracking are needed, c) the storage driver is specified through
                        a storage class, and d) the storage driver supports dynamic
                        volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource
                        for more information on the connection between this volume
                        type and PersistentVolumeClaim). \n Use PersistentVolumeClaim
                        or one of the vendor-specific APIs for volumes that persist
                        for longer than the lifecycle of an individual pod. \n Use
                        CSI for light-weight local ephemeral volumes if the CSI driver
                        is meant to be used that way - see the documentation of the
                        driver for more information. \n A pod can use both types of
                        ephemeral volumes and persistent volumes at the same time."
                      properties:
                        volumeClaimTemplate:
                          description: "Will be used to create a stand-alone PVC to
                            provision the volume. The pod in which this EphemeralVolumeSource
                            is embedded will be the owner of the PVC, i.e. the PVC
                            will be deleted together with the pod.  The name of the
                            PVC will be `<pod name>-<volume name>` where `<volume
                            name>` is the name from the `PodSpec.Volumes` array entry.
                            Pod validation will reject the pod if the concatenated
                            name is not valid for a PVC (for example, too long). \n
                            An existing PVC with that name that is not owned by the
                            pod will *not* be used for the pod to avoid using an unrelated
                            volume by mistake. Starting the pod is then blocked until
                            the unrelated PVC is removed. If such a pre-created PVC
                            is meant to be used by the pod, the PVC has to updated
                            with an owner reference to the pod once the pod exists.
                            Normally this should not be necessary, but it may be useful
                            when manually reconstructing a broken cluster. \n This
                            field is read-only and no changes will be made by Kubernetes
                            to the PVC after it has been created. \n Required, must
                            not be nil."
                          properties:
                            metadata:
                              description: May contain labels and annotations that
                                will be copied into the PVC when creating it. No other
                                fields are allowed and will be rejected during validation.
                              type: object
                            spec:
                              description: The specification for the PersistentVolumeClaim.
                                The entire content is copied unchanged into the PVC
                                that gets created from this template. The same fields
                                as in a PersistentVolumeClaim are also valid here.
                              properties:
                                accessModes:
                                  description: 'accessModes contains the desired access
                                    modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                dataSource:
                                  description: 'dataSource field can be used to specify
                                    either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                    * An existing PVC (PersistentVolumeClaim) If the
                                    provisioner or an external controller can support
                                    the specified data source, it will create a new
                                    volume based on the contents of the specified
                                    data source. When the AnyVolumeDataSource feature
                                    gate is enabled, dataSource contents will be copied
                                    to dataSourceRef, and dataSourceRef contents will
                                    be copied to dataSource when dataSourceRef.namespace
                                    is not specified. If the namespace is specified,
                                    then dataSourceRef will not be copied to dataSource.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                  x-kubernetes-map-type: atomic
                                dataSourceRef:
                                  description: 'dataSourceRef specifies the object
                                    from which to populate the volume with data, if
                                    a non-empty volume is desired. This may be any
                                    object from a non-empty API group (non core object)
                                    or a PersistentVolumeClaim object. When this field
                                    is specified, volume binding will only succeed
                                    if the type of the specified object matches some
                                    installed volume populator or dynamic provisioner.
                                    This field will replace the functionality of the
                                    dataSource field and as such if both fields are
                                    non-empty, they must have the same value. For
                                    backwards compatibility, when namespace isn''t
                                    specified in dataSourceRef, both fields (dataSource
                                    and dataSourceRef) will be set to the same value
                                    automatically if one of them is empty and the
                                    other is non-empty. When namespace is specified
                                    in dataSourceRef, dataSource isn''t set to the
                                    same value and must be empty. There are three
                                    important differences between dataSource and dataSourceRef:
                                    * While dataSource only allows two specific types
                                    of objects, dataSourceRef allows any non-core
                                    object, as well as PersistentVolumeClaim objects.
                                    * While dataSource ignores disallowed values (dropping
                                    them), dataSourceRef preserves all values, and
                                    generates an error if a disallowed value is specified.
                                    * While dataSource only allows local objects,
                                    dataSourceRef allows objects in any namespaces.
                                    (Beta) Using this field requires the AnyVolumeDataSource
                                    feature gate to be enabled. (Alpha) Using the
                                    namespace field of dataSourceRef requires the
                                    CrossNamespaceVolumeDataSource feature gate to
                                    be enabled.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                    namespace:
                                      description: Namespace is the namespace of resource
                                        being referenced Note that when a namespace
                                        is specified, a gateway.networking.k8s.io/ReferenceGrant
                                        object is required in the referent namespace
                                        to allow that namespace's owner to accept
                                        the reference. See the ReferenceGrant documentation
                                        for details. (Alpha) This field requires the
                                        CrossNamespaceVolumeDataSource feature gate
                                        to be enabled.
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                resources:
                                  description: 'resources represents the minimum resources
                                    the volume should have. If RecoverVolumeExpansionFailure
                                    feature is enabled users are allowed to specify
                                    resource requirements that are lower than previous
                                    value but must still be higher than capacity recorded
                                    in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                  properties:
                                    claims:
                                      description: "Claims lists the names of resources,
                                        defined in spec.resourceClaims, that are used
                                        by this container. \n This is an alpha field
                                        and requires enabling the DynamicResourceAllocation
                                        feature gate. \n This field is immutable.
                                        It can only be set for containers."
                                      items:
                                        description: ResourceClaim references one
                                          entry in PodSpec.ResourceClaims.
                                        properties:
                                          name:
                                            description: Name must match the name
                                              of one entry in pod.spec.resourceClaims
                                              of the Pod where this field is used.
                                              It makes that resource available inside
                                              a container.
                                            type: string
                                        required:
                                        - name
                                        type: object
                                      type: array
                                      x-kubernetes-list-map-keys:
                                      - name
                                      x-kubernetes-list-type: map
                                    limits:
                                      additionalProperties:
                                        anyOf:
                                        - type: integer
                                        - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Limits describes the maximum amount
                                        of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                    requests:
                                      additionalProperties:
                                        anyOf:
                                        - type: integer
                                        - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Requests describes the minimum
                                        amount of compute resources required. If Requests
                                        is omitted for a container, it defaults to
                                        Limits if that is explicitly specified, otherwise
                                        to an implementation-defined value. Requests
                                        cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                  type: object
                                selector:
                                  description: selector is a label query over volumes
                                    to consider for binding.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                storageClassName:
                                  description: 'storageClassName is the name of the
                                    StorageClass required by the claim. More info:
                                    https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                  type: string
                                volumeMode:
                                  description: volumeMode defines what type of volume
                                    is required by the claim. Value of Filesystem
                                    is implied when not included in claim spec.
                                  type: string
                                volumeName:
                                  description: volumeName is the binding reference
                                    to the PersistentVolume backing this claim.
                                  type: string
                              type: object
                          required:
                          - spec
                          type: object
                      type: object
                    fc:
                      description: fc represents a Fibre Channel resource that is
                        attached to a kubelet's host machine and then exposed to the
                        pod.
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. TODO: how do we prevent errors in the
                            filesystem from compromising the machine'
                          type: string
                        lun:
                          description: 'lun is Optional: FC target lun number'
                          format: int32
                          type: integer
                        readOnly:
                          description: 'readOnly is Optional: Defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                          type: boolean
                        targetWWNs:
                          description: 'targetWWNs is Optional: FC target worldwide
                            names (WWNs)'
                          items:
                            type: string
                          type: array
                        wwids:
                          description: 'wwids Optional: FC volume world wide identifiers
                            (wwids) Either wwids or combination of targetWWNs and
                            lun must be set, but not both simultaneously.'
                          items:
                            type: string
                          type: array
                      type: object
                    flexVolume:
                      description: flexVolume represents a generic volume resource
                        that is provisioned/attached using an exec based plugin.
                      properties:
                        driver:
                          description: driver is the name of the driver to use for
                            this volume.
                          type: string
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". The default filesystem depends
                            on FlexVolume script.
                          type: string
                        options:
                          additionalProperties:
                            type: string
                          description: 'options is Optional: this field holds extra
                            command options if any.'
                          type: object
                        readOnly:
                          description: 'readOnly is Optional: defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                          type: boolean
                        secretRef:
                          description: 'secretRef is Optional: secretRef is reference
                            to the secret object containing sensitive information
                            to pass to the plugin scripts. This may be empty if no
                            secret object is specified. If the secret object contains
                            more than one secret, all secrets are passed to the plugin
                            scripts.'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                      - driver
                      type: object
                    flocker:
                      description: flocker represents a Flocker volume attached to
                        a kubelet's host machine. This depends on the Flocker control
                        service being running
                      properties:
                        datasetName:
                          description: datasetName is Name of the dataset stored as
                            metadata -> name on the dataset for Flocker should be
                            considered as deprecated
                          type: string
                        datasetUUID:
                          description: datasetUUID is the UUID of the dataset. This
                            is unique identifier of a Flocker dataset
                          type: string
                      type: object
                    gcePersistentDisk:
                      description: 'gcePersistentDisk represents a GCE Disk resource
                        that is attached to a kubelet''s host machine and then exposed
                        to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                      properties:
                        fsType:
                          description: 'fsType is filesystem type of the volume that
                            you want to mount. Tip: Ensure that the filesystem type
                            is supported by the host operating system. Examples: "ext4",
                            "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        partition:
                          description: 'partition is the partition in the volume that
                            you want to mount. If omitted, the default is to mount
                            by volume name. Examples: For volume /dev/sda1, you specify
                            the partition as "1". Similarly, the volume partition
                            for /dev/sda is "0" (or you can leave the property empty).
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          format: int32
                          type: integer
                        pdName:
                          description: 'pdName is unique name of the PD resource in
                            GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          type: boolean
                      required:
                      - pdName
                      type: object
                    gitRepo:
                      description: 'gitRepo represents a git repository at a particular
                        revision. DEPRECATED: GitRepo is deprecated. To provision
                        a container with a git repo, mount an EmptyDir into an InitContainer
                        that clones the repo using git, then mount the EmptyDir into
                        the Pod''s container.'
                      properties:
                        directory:
                          description: directory is the target directory name. Must
                            not contain or start with '..'.  If '.' is supplied, the
                            volume directory will be the git repository.  Otherwise,
                            if specified, the volume will contain the git repository
                            in the subdirectory with the given name.
                          type: string
                        repository:
                          description: repository is the URL
                          type: string
                        revision:
                          description: revision is the commit hash for the specified
                            revision.
                          type: string
                      required:
                      - repository
                      type: object
                    glusterfs:
                      description: 'glusterfs represents a Glusterfs mount on the
                        host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
                      properties:
                        endpoints:
                          description: 'endpoints is the endpoint name that details
                            Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: string
                        path:
                          description: 'path is the Glusterfs volume path. More info:
                            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the Glusterfs volume
                            to be mounted with read-only permissions. Defaults to
                            false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: boolean
                      required:
                      - endpoints
                      - path
                      type: object
                    hostPath:
                      description: 'hostPath represents a pre-existing file or directory
                        on the host machine that is directly exposed to the container.
                        This is generally used for system agents or other privileged
                        things that are allowed to see the host machine. Most containers
                        will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                        --- TODO(jonesdl) We need to restrict who can use host directory
                        mounts and who can/can not mount host directories as read/write.'
                      properties:
                        path:
                          description: 'path of the directory on the host. If the
                            path is a symlink, it will follow the link to the real
                            path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                          type: string
                        type:
                          description: 'type for HostPath Volume Defaults to "" More
                            info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                          type: string
                      required:
                      - path
                      type: object
                    iscsi:
                      description: 'iscsi represents an ISCSI Disk resource that is
                        attached to a kubelet''s host machine and then exposed to
                        the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
                      properties:
                        chapAuthDiscovery:
                          description: chapAuthDiscovery defines whether support iSCSI
                            Discovery CHAP authentication
                          type: boolean
                        chapAuthSession:
                          description: chapAuthSession defines whether support iSCSI
                            Session CHAP authentication
                          type: boolean
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        initiatorName:
                          description: initiatorName is the custom iSCSI Initiator
                            Name. If initiatorName is specified with iscsiInterface
                            simultaneously, new iSCSI interface <target portal>:<volume
                            name> will be created for the connection.
                          type: string
                        iqn:
                          description: iqn is the target iSCSI Qualified Name.
                          type: string
                        iscsiInterface:
                          description: iscsiInterface is the interface Name that uses
                            an iSCSI transport. Defaults to 'default' (tcp).
                          type: string
                        lun:
                          description: lun represents iSCSI Target Lun number.
                          format: int32
                          type: integer
                        portals:
                          description: portals is the iSCSI Target Portal List. The
                            portal is either an IP or ip_addr:port if the port is
                            other than default (typically TCP ports 860 and 3260).
                          items:
                            type: string
                          type: array
                        readOnly:
                          description: readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false.
                          type: boolean
                        secretRef:
                          description: secretRef is the CHAP Secret for iSCSI target
                            and initiator authentication
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        targetPortal:
                          description: targetPortal is iSCSI Target Portal. The Portal
                            is either an IP or ip_addr:port if the port is other than
                            default (typically TCP ports 860 and 3260).
                          type: string
                      required:
                      - iqn
                      - lun
                      - targetPortal
                      type: object
                    name:
                      description: 'name of the volume. Must be a DNS_LABEL and unique
                        within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    nfs:
                      description: 'nfs represents an NFS mount on the host that shares
                        a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                      properties:
                        path:
                          description: 'path that is exported by the NFS server. More
                            info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the NFS export to
                            be mounted with read-only permissions. Defaults to false.
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: boolean
                        server:
                          description: 'server is the hostname or IP address of the
                            NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: string
                      required:
                      - path
                      - server
                      type: object
                    persistentVolumeClaim:
                      description: 'persistentVolumeClaimVolumeSource represents a
                        reference to a PersistentVolumeClaim in the same namespace.
                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                      properties:
                        claimName:
                          description: 'claimName is the name of a PersistentVolumeClaim
                            in the same namespace as the pod using this volume. More
                            info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                          type: string
                        readOnly:
                          description: readOnly Will force the ReadOnly setting in
                            VolumeMounts. Default false.
                          type: boolean
                      required:
                      - claimName
                      type: object
                    photonPersistentDisk:
                      description: photonPersistentDisk represents a PhotonController
                        persistent disk attached and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        pdID:
                          description: pdID is the ID that identifies Photon Controller
                            persistent disk
                          type: string
                      required:
                      - pdID
                      type: object
                    portworxVolume:
                      description: portworxVolume represents a portworx volume attached
                        and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fSType represents the filesystem type to mount
                            Must be a filesystem type supported by the host operating
                            system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        volumeID:
                          description: volumeID uniquely identifies a Portworx volume
                          type: string
                      required:
                      - volumeID
                      type: object
                    projected:
                      description: projected items for all in one resources secrets,
                        configmaps, and downward API
                      properties:
                        defaultMode:
                          description: defaultMode are the mode bits used to set permissions
                            on created files by default. Must be an octal value between
                            0000 and 0777 or a decimal value between 0 and 511. YAML
                            accepts both octal and decimal values, JSON requires decimal
                            values for mode bits. Directories within the path are
                            not affected by this setting. This might be in conflict
                            with other options that affect the file mode, like fsGroup,
                            and the result can be other mode bits set.
                          format: int32
                          type: integer
                        sources:
                          description: sources is the list of volume projections
                          items:
                            description: Projection that may be projected along with
                              other supported volume types
                            properties:
                              configMap:
                                description: configMap information about the configMap
                                  data to project
                                properties:
                                  items:
                                    description: items if unspecified, each key-value
                                      pair in the Data field of the referenced ConfigMap
                                      will be projected into the volume as a file
                                      whose name is the key and content is the value.
                                      If specified, the listed keys will be projected
                                      into the specified paths, and unlisted keys
                                      will not be present. If a key is specified which
                                      is not present in the ConfigMap, the volume
                                      setup will error unless it is marked optional.
                                      Paths must be relative and may not contain the
                                      '..' path or start with '..'.
                                    items:
                                      description: Maps a string key to a path within
                                        a volume.
                                      properties:
                                        key:
                                          description: key is the key to project.
                                          type: string
                                        mode:
                                          description: 'mode is Optional: mode bits
                                            used to set permissions on this file.
                                            Must be an octal value between 0000 and
                                            0777 or a decimal value between 0 and
                                            511. YAML accepts both octal and decimal
                                            values, JSON requires decimal values for
                                            mode bits. If not specified, the volume
                                            defaultMode will be used. This might be
                                            in conflict with other options that affect
                                            the file mode, like fsGroup, and the result
                                            can be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: path is the relative path of
                                            the file to map the key to. May not be
                                            an absolute path. May not contain the
                                            path element '..'. May not start with
                                            the string '..'.
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: optional specify whether the ConfigMap
                                      or its keys must be defined
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              downwardAPI:
                                description: downwardAPI information about the downwardAPI
                                  data to project
                                properties:
                                  items:
                                    description: Items is a list of DownwardAPIVolume
                                      file
                                    items:
                                      description: DownwardAPIVolumeFile represents
                                        information to create the file containing
                                        the pod field
                                      properties:
                                        fieldRef:
                                          description: 'Required: Selects a field
                                            of the pod: only annotations, labels,
                                            name and namespace are supported.'
                                          properties:
                                            apiVersion:
                                              description: Version of the schema the
                                                FieldPath is written in terms of,
                                                defaults to "v1".
                                              type: string
                                            fieldPath:
                                              description: Path of the field to select
                                                in the specified API version.
                                              type: string
                                          required:
                                          - fieldPath
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        mode:
                                          description: 'Optional: mode bits used to
                                            set permissions on this file, must be
                                            an octal value between 0000 and 0777 or
                                            a decimal value between 0 and 511. YAML
                                            accepts both octal and decimal values,
                                            JSON requires decimal values for mode
                                            bits. If not specified, the volume defaultMode
                                            will be used. This might be in conflict
                                            with other options that affect the file
                                            mode, like fsGroup, and the result can
                                            be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: 'Required: Path is  the relative
                                            path name of the file to be created. Must
                                            not be absolute or contain the ''..''
                                            path. Must be utf-8 encoded. The first
                                            item of the relative path must not start
                                            with ''..'''
                                          type: string
                                        resourceFieldRef:
                                          description: 'Selects a resource of the
                                            container: only resources limits and requests
                                            (limits.cpu, limits.memory, requests.cpu
                                            and requests.memory) are currently supported.'
                                          properties:
                                            containerName:
                                              description: 'Container name: required
                                                for volumes, optional for env vars'
                                              type: string
                                            divisor:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              description: Specifies the output format
                                                of the exposed resources, defaults
                                                to "1"
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            resource:
                                              description: 'Required: resource to
                                                select'
                                              type: string
                                          required:
                                          - resource
                                          type: object
                                          x-kubernetes-map-type: atomic
                                      required:
                                      - path
                                      type: object
                                    type: array
                                type: object
                              secret:
                                description: secret information about the secret data
                                  to project
                                properties:
                                  items:
                                    description: items if unspecified, each key-value
                                      pair in the Data field of the referenced Secret
                                      will be projected into the volume as a file
                                      whose name is the key and content is the value.
                                      If specified, the listed keys will be projected
                                      into the specified paths, and unlisted keys
                                      will not be present. If a key is specified which
                                      is not present in the Secret, the volume setup
                                      will error unless it is marked optional. Paths
                                      must be relative and may not contain the '..'
                                      path or start with '..'.
                                    items:
                                      description: Maps a string key to a path within
                                        a volume.
                                      properties:
                                        key:
                                          description: key is the key to project.
                                          type: string
                                        mode:
                                          description: 'mode is Optional: mode bits
                                            used to set permissions on this file.
                                            Must be an octal value between 0000 and
                                            0777 or a decimal value between 0 and
                                            511. YAML accepts both octal and decimal
                                            values, JSON requires decimal values for
                                            mode bits. If not specified, the volume
                                            defaultMode will be used. This might be
                                            in conflict with other options that affect
                                            the file mode, like fsGroup, and the result
                                            can be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: path is the relative path of
                                            the file to map the key to. May not be
                                            an absolute path. May not contain the
                                            path element '..'. May not start with
                                            the string '..'.
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: optional field specify whether the
                                      Secret or its key must be defined
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              serviceAccountToken:
                                description: serviceAccountToken is information about
                                  the serviceAccountToken data to project
                                properties:
                                  audience:
                                    description: audience is the intended audience
                                      of the token. A recipient of a token must identify
                                      itself with an identifier specified in the audience
                                      of the token, and otherwise should reject the
                                      token. The audience defaults to the identifier
                                      of the apiserver.
                                    type: string
                                  expirationSeconds:
                                    description: expirationSeconds is the requested
                                      duration of validity of the service account
                                      token. As the token approaches expiration, the
                                      kubelet volume plugin will proactively rotate
                                      the service account token. The kubelet will
                                      start trying to rotate the token if the token
                                      is older than 80 percent of its time to live
                                      or if the token is older than 24 hours.Defaults
                                      to 1 hour and must be at least 10 minutes.
                                    format: int64
                                    type: integer
                                  path:
                                    description: path is the path relative to the
                                      mount point of the file to project the token
                                      into.
                                    type: string
                                required:
                                - path
                                type: object
                            type: object
                          type: array
                      type: object
                    quobyte:
                      description: quobyte represents a Quobyte mount on the host
                        that shares a pod's lifetime
                      properties:
                        group:
                          description: group to map volume access to Default is no
                            group
                          type: string
                        readOnly:
                          description: readOnly here will force the Quobyte volume
                            to be mounted with read-only permissions. Defaults to
                            false.
                          type: boolean
                        registry:
                          description: registry represents a single or multiple Quobyte
                            Registry services specified as a string as host:port pair
                            (multiple entries are separated with commas) which acts
                            as the central registry for volumes
                          type: string
                        tenant:
                          description: tenant owning the given Quobyte volume in the
                            Backend Used with dynamically provisioned Quobyte volumes,
                            value is set by the plugin
                          type: string
                        user:
                          description: user to map volume access to Defaults to serivceaccount
                            user
                          type: string
                        volume:
                          description: volume is a string that references an already
                            created Quobyte volume by name.
                          type: string
                      required:
                      - registry
                      - volume
                      type: object
                    rbd:
                      description: 'rbd represents a Rados Block Device mount on the
                        host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        image:
                          description: 'image is the rados image name. More info:
                            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        keyring:
                          description: 'keyring is the path to key ring for RBDUser.
                            Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        monitors:
                          description: 'monitors is a collection of Ceph monitors.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          items:
                            type: string
                          type: array
                        pool:
                          description: 'pool is the rados pool name. Default is rbd.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: boolean
                        secretRef:
                          description: 'secretRef is name of the authentication secret
                            for RBDUser. If provided overrides keyring. Default is
                            nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        user:
                          description: 'user is the rados user name. Default is admin.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                      required:
                      - image
                      - monitors
                      type: object
                    scaleIO:
                      description: scaleIO represents a ScaleIO persistent volume
                        attached and mounted on Kubernetes nodes.
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                          type: string
                        gateway:
                          description: gateway is the host address of the ScaleIO
                            API Gateway.
                          type: string
                        protectionDomain:
                          description: protectionDomain is the name of the ScaleIO
                            Protection Domain for the configured storage.
                          type: string
                        readOnly:
                          description: readOnly Defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretRef:
                          description: secretRef references to the secret for ScaleIO
                            user and other sensitive information. If this is not provided,
                            Login operation will fail.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        sslEnabled:
                          description: sslEnabled Flag enable/disable SSL communication
                            with Gateway, default false
                          type: boolean
                        storageMode:
                          description: storageMode indicates whether the storage for
                            a volume should be ThickProvisioned or ThinProvisioned.
                            Default is ThinProvisioned.
                          type: string
                        storagePool:
                          description: storagePool is the ScaleIO Storage Pool associated
                            with the protection domain.
                          type: string
                        system:
                          description: system is the name of the storage system as
                            configured in ScaleIO.
                          type: string
                        volumeName:
                          description: volumeName is the name of a volume already
                            created in the ScaleIO system that is associated with
                            this volume source.
                          type: string
                      required:
                      - gateway
                      - secretRef
                      - system
                      type: object
                    secret:
                      description: 'secret represents a secret that should populate
                        this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                      properties:
                        defaultMode:
                          description: 'defaultMode is Optional: mode bits used to
                            set permissions on created files by default. Must be an
                            octal value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items If unspecified, each key-value pair in
                            the Data field of the referenced Secret will be projected
                            into the volume as a file whose name is the key and content
                            is the value. If specified, the listed keys will be projected
                            into the specified paths, and unlisted keys will not be
                            present. If a key is specified which is not present in
                            the Secret, the volume setup will error unless it is marked
                            optional. Paths must be relative and may not contain the
                            '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to
                                  set permissions on this file. Must be an octal value
                                  between 0000 and 0777 or a decimal value between
                                  0 and 511. YAML accepts both octal and decimal values,
                                  JSON requires decimal values for mode bits. If not
                                  specified, the volume defaultMode will be used.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file
                                  to map the key to. May not be an absolute path.
                                  May not contain the path element '..'. May not start
                                  with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        optional:
                          description: optional field specify whether the Secret or
                            its keys must be defined
                          type: boolean
                        secretName:
                          description: 'secretName is the name of the secret in the
                            pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                          type: string
                      type: object
                    storageos:
                      description: storageOS represents a StorageOS volume attached
                        and mounted on Kubernetes nodes.
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretRef:
                          description: secretRef specifies the secret to use for obtaining
                            the StorageOS API credentials.  If not specified, default
                            values will be attempted.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        volumeName:
                          description: volumeName is the human-readable name of the
                            StorageOS volume.  Volume names are only unique within
                            a namespace.
                          type: string
                        volumeNamespace:
                          description: volumeNamespace specifies the scope of the
                            volume within StorageOS.  If no namespace is specified
                            then the Pod's namespace will be used.  This allows the
                            Kubernetes name scoping to be mirrored within StorageOS
                            for tighter integration. Set VolumeName to any name to
                            override the default behaviour. Set to "default" if you
                            are not using namespaces within StorageOS. Namespaces
                            that do not pre-exist within StorageOS will be created.
                          type: string
                      type: object
                    vsphereVolume:
                      description: vsphereVolume represents a vSphere volume attached
                        and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fsType is filesystem type to mount. Must be
                            a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        storagePolicyID:
                          description: storagePolicyID is the storage Policy Based
                            Management (SPBM) profile ID associated with the StoragePolicyName.
                          type: string
                        storagePolicyName:
                          description: storagePolicyName is the storage Policy Based
                            Management (SPBM) profile name.
                          type: string
                        volumePath:
                          description: volumePath is the path that identifies vSphere
                            volume vmdk
                          type: string
                      required:
                      - volumePath
                      type: object
                  required:
                  - name
                  type: object
                type: array
              persistence:
                description: Persistence defines the persistence configuration. If
                  empty k0smotron will use emptyDir as a volume.
                properties:
                  hostPath:
                    description: HostPath defines the host path configuration. Will
                      be used as is in case of .spec.persistence.type is hostPath.
                    type: string
                  persistentVolumeClaim:
                    description: PersistentVolumeClaim defines the PVC configuration.
                      Will be used as is in case of .spec.persistence.type is pvc.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        type: object
                      spec:
                        description: 'spec defines the desired characteristics of
                          a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. When the AnyVolumeDataSource
                              feature gate is enabled, dataSource contents will be
                              copied to dataSourceRef, and dataSourceRef contents
                              will be copied to dataSource when dataSourceRef.namespace
                              is not specified. If the namespace is specified, then
                              dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any object from a non-empty
                              API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the dataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              when namespace isn''t specified in dataSourceRef, both
                              fields (dataSource and dataSourceRef) will be set to
                              the same value automatically if one of them is empty
                              and the other is non-empty. When namespace is specified
                              in dataSourceRef, dataSource isn''t set to the same
                              value and must be empty. There are three important differences
                              between dataSource and dataSourceRef: * While dataSource
                              only allows two specific types of objects, dataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim
                              objects. * While dataSource ignores disallowed values
                              (dropping them), dataSourceRef preserves all values,
                              and generates an error if a disallowed value is specified.
                              * While dataSource only allows local objects, dataSourceRef
                              allows objects in any namespaces. (Beta) Using this
                              field requires the AnyVolumeDataSource feature gate
                              to be enabled. (Alpha) Using the namespace field of
                              dataSourceRef requires the CrossNamespaceVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource
                                  being referenced Note that when a namespace is specified,
                                  a gateway.networking.k8s.io/ReferenceGrant object
                                  is required in the referent namespace to allow that
                                  namespace's owner to accept the reference. See the
                                  ReferenceGrant documentation for details. (Alpha)
                                  This field requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              claims:
                                description: "Claims lists the names of resources,
                                  defined in spec.resourceClaims, that are used by
                                  this container. \n This is an alpha field and requires
                                  enabling the DynamicResourceAllocation feature gate.
                                  \n This field is immutable. It can only be set for
                                  containers."
                                items:
                                  description: ResourceClaim references one entry
                                    in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: Name must match the name of one
                                        entry in pod.spec.resourceClaims of the Pod
                                        where this field is used. It makes that resource
                                        available inside a container.
                                      type: string
                                  required:
                                  - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. Requests cannot exceed Limits. More info:
                                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      status:
                        description: 'status represents the current information/status
                          of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          accessModes:
                            description: 'accessModes contains the actual access modes
                              the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          allocatedResources:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: allocatedResources is the storage resource
                              within AllocatedResources tracks the capacity allocated
                              to a PVC. It may be larger than the actual capacity
                              when a volume expansion operation is requested. For
                              storage quota, the larger value from allocatedResources
                              and PVC.spec.resources is used. If allocatedResources
                              is not set, PVC.spec.resources alone is used for quota
                              calculation. If a volume expansion capacity request
                              is lowered, allocatedResources is only lowered if there
                              are no expansion operations in progress and if the actual
                              volume capacity is equal or lower than the requested
                              capacity. This is an alpha field and requires enabling
                              RecoverVolumeExpansionFailure feature.
                            type: object
                          capacity:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: capacity represents the actual resources
                              of the underlying volume.
                            type: object
                          conditions:
                            description: conditions is the current Condition of persistent
                              volume claim. If underlying persistent volume is being
                              resized then the Condition will be set to 'ResizeStarted'.
                            items:
                              description: PersistentVolumeClaimCondition contains
                                details about state of pvc
                              properties:
                                lastProbeTime:
                                  description: lastProbeTime is the time we probed
                                    the condition.
                                  format: date-time
                                  type: string
                                lastTransitionTime:
                                  description: lastTransitionTime is the time the
                                    condition transitioned from one status to another.
                                  format: date-time
                                  type: string
                                message:
                                  description: message is the human-readable message
                                    indicating details about last transition.
                                  type: string
                                reason:
                                  description: reason is a unique, this should be
                                    a short, machine understandable string that gives
                                    the reason for condition's last transition. If
                                    it reports "ResizeStarted" that means the underlying
                                    persistent volume is being resized.
                                  type: string
                                status:
                                  type: string
                                type:
                                  description: PersistentVolumeClaimConditionType
                                    is a valid value of PersistentVolumeClaimCondition.Type
                                  type: string
                              required:
                              - status
                              - type
                              type: object
                            type: array
                          phase:
                            description: phase represents the current phase of PersistentVolumeClaim.
                            type: string
                          resizeStatus:
                            description: resizeStatus stores status of resize operation.
                              ResizeStatus is not set by default but when expansion
                              is complete resizeStatus is set to empty string by resize
                              controller or kubelet. This is an alpha field and requires
                              enabling RecoverVolumeExpansionFailure feature.
                            type: string
                        type: object
                    type: object
                  type:
                    default: emptyDir
                    type: string
                required:
                - type
                type: object
              replicas:
                default: 1
                description: Replicas is the desired number of replicas of the k0s
                  control planes. If unspecified, defaults to 1. If the value is above
                  1, k0smotron requires kine datasource URL to be set. Recommended
                  value is 3.
                format: int32
                type: integer
              resources:
                description: Resources describes the compute resource requirements
                  for the control plane pods.
                properties:
                  claims:
                    description: "Claims lists the names of resources, defined in
                      spec.resourceClaims, that are used by this container. \n This
                      is an alpha field and requires enabling the DynamicResourceAllocation
                      feature gate. \n This field is immutable. It can only be set
                      for containers."
                    items:
                      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                      properties:
                        name:
                          description: Name must match the name of one entry in pod.spec.resourceClaims
                            of the Pod where this field is used. It makes that resource
                            available inside a container.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - name
                    x-kubernetes-list-type: map
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources
                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute
                      resources required. If Requests is omitted for a container,
                      it defaults to Limits if that is explicitly specified, otherwise
                      to an implementation-defined value. Requests cannot exceed Limits.
                      More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              service:
                description: Service defines the service configuration.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations defines extra annotations to be added
                      to the service.
                    type: object
                  apiPort:
                    default: 30443
                    description: APIPort defines the kubernetes API port. If empty
                      k0smotron will pick it automatically.
                    type: integer
                  konnectivityPort:
                    default: 30132
                    description: KonnectivityPort defines the konnectivity port. If
                      empty k0smotron will pick it automatically.
                    type: integer
                  type:
                    default: NodePort
                    description: Service Type string describes ingress methods for
                      a service
                    enum:
                    - NodePort
                    - LoadBalancer
                    type: string
                required:
                - type
                type: object
            type: object
          status:
            description: K0smotronClusterStatus defines the observed state of K0smotronCluster
            properties:
              ready:
                type: boolean
              reconciliationStatus:
                type: string
            required:
            - reconciliationStatus
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: extensionconfigs.runtime.cluster.x-k8s.io
spec:
  group: runtime.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: ExtensionConfig
    listKind: ExtensionConfigList
    plural: extensionconfigs
    shortNames:
    - ext
    singular: extensionconfig
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Time duration since creation of ExtensionConfig
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExtensionConfig is the Schema for the ExtensionConfig API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExtensionConfigSpec is the desired state of the ExtensionConfig
            properties:
              clientConfig:
                description: ClientConfig defines how to communicate with the Extension
                  server.
                properties:
                  caBundle:
                    description: CABundle is a PEM encoded CA bundle which will be
                      used to validate the Extension server's server certificate.
                    format: byte
                    type: string
                  service:
                    description: "Service is a reference to the Kubernetes service
                      for the Extension server. Note: Exactly one of `url` or `service`
                      must be specified. \n If the Extension server is running within
                      a cluster, then you should use `service`."
                    properties:
                      name:
                        description: Name is the name of the service.
                        type: string
                      namespace:
                        description: Namespace is the namespace of the service.
                        type: string
                      path:
                        description: Path is an optional URL path and if present may
                          be any string permissible in a URL. If a path is set it
                          will be used as prefix to the hook-specific path.
                        type: string
                      port:
                        description: Port is the port on the service that's hosting
                          the Extension server. Defaults to 443. Port should be a
                          valid port number (1-65535, inclusive).
                        format: int32
                        type: integer
                    required:
                    - name
                    - namespace
                    type: object
                  url:
                    description: "URL gives the location of the Extension server,
                      in standard URL form (`scheme://host:port/path`). Note: Exactly
                      one of `url` or `service` must be specified. \n The scheme must
                      be \"https\". \n The `host` should not refer to a service running
                      in the cluster; use the `service` field instead. \n A path is
                      optional, and if present may be any string permissible in a
                      URL. If a path is set it will be used as prefix to the hook-specific
                      path. \n Attempting to use a user or basic auth e.g. \"user:password@\"
                      is not allowed. Fragments (\"#...\") and query parameters (\"?...\")
                      are not allowed either."
                    type: string
                type: object
              namespaceSelector:
                description: NamespaceSelector decides whether to call the hook for
                  an object based on whether the namespace for that object matches
                  the selector. Defaults to the empty LabelSelector, which matches
                  all objects.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              settings:
                additionalProperties:
                  type: string
                description: 'Settings defines key value pairs to be passed to all
                  calls to all supported RuntimeExtensions. Note: Settings can be
                  overridden on the ClusterClass.'
                type: object
            required:
            - clientConfig
            type: object
          status:
            description: ExtensionConfigStatus is the current state of the ExtensionConfig
            properties:
              conditions:
                description: Conditions define the current service state of the ExtensionConfig.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              handlers:
                description: Handlers defines the current ExtensionHandlers supported
                  by an Extension.
                items:
                  description: ExtensionHandler specifies the details of a handler
                    for a particular runtime hook registered by an Extension server.
                  properties:
                    failurePolicy:
                      description: FailurePolicy defines how failures in calls to
                        the ExtensionHandler should be handled by a client. Defaults
                        to Fail if not set.
                      type: string
                    name:
                      description: Name is the unique name of the ExtensionHandler.
                      type: string
                    requestHook:
                      description: RequestHook defines the versioned runtime hook
                        which this ExtensionHandler serves.
                      properties:
                        apiVersion:
                          description: APIVersion is the group and version of the
                            Hook.
                          type: string
                        hook:
                          description: Hook is the name of the hook.
                          type: string
                      required:
                      - apiVersion
                      - hook
                      type: object
                    timeoutSeconds:
                      description: TimeoutSeconds defines the timeout duration for
                        client calls to the ExtensionHandler. Defaults to 10 is not
                        set.
                      format: int32
                      type: integer
                  required:
                  - name
                  - requestHook
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - name
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: ipaddressclaims.ipam.cluster.x-k8s.io
spec:
  group: ipam.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: IPAddressClaim
    listKind: IPAddressClaimList
    plural: ipaddressclaims
    singular: ipaddressclaim
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Name of the pool to allocate an address from
      jsonPath: .spec.poolRef.name
      name: Pool Name
      type: string
    - description: Kind of the pool to allocate an address from
      jsonPath: .spec.poolRef.kind
      name: Pool Kind
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IPAddressClaim is the Schema for the ipaddressclaim API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IPAddressClaimSpec is the desired state of an IPAddressClaim.
            properties:
              poolRef:
                description: PoolRef is a reference to the pool from which an IP address
                  should be created.
                properties:
                  apiGroup:
                    description: APIGroup is the group for the resource being referenced.
                      If APIGroup is not specified, the specified Kind must be in
                      the core API group. For any other third-party types, APIGroup
                      is required.
                    type: string
                  kind:
                    description: Kind is the type of resource being referenced
                    type: string
                  name:
                    description: Name is the name of resource being referenced
                    type: string
                required:
                - apiGroup
                - kind
                - name
                type: object
            required:
            - poolRef
            type: object
          status:
            description: IPAddressClaimStatus is the observed status of a IPAddressClaim.
            properties:
              addressRef:
                description: AddressRef is a reference to the address that was created
                  for this claim.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              conditions:
                description: Conditions summarises the current state of the IPAddressClaim
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: ipaddresses.ipam.cluster.x-k8s.io
spec:
  group: ipam.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: IPAddress
    listKind: IPAddressList
    plural: ipaddresses
    singular: ipaddress
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Address
      jsonPath: .spec.address
      name: Address
      type: string
    - description: Name of the pool the address is from
      jsonPath: .spec.poolRef.name
      name: Pool Name
      type: string
    - description: Kind of the pool the address is from
      jsonPath: .spec.poolRef.kind
      name: Pool Kind
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IPAddress is the Schema for the ipaddress API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IPAddressSpec is the desired state of an IPAddress.
            properties:
              address:
                description: Address is the IP address.
                type: string
              claimRef:
                description: ClaimRef is a reference to the claim this IPAddress was
                  created for.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              gateway:
                description: Gateway is the network gateway of the network the address
                  is from.
                type: string
              poolRef:
                description: PoolRef is a reference to the pool that this IPAddress
                  was created from.
                properties:
                  apiGroup:
                    description: APIGroup is the group for the resource being referenced.
                      If APIGroup is not specified, the specified Kind must be in
                      the core API group. For any other third-party types, APIGroup
                      is required.
                    type: string
                  kind:
                    description: Kind is the type of resource being referenced
                    type: string
                  name:
                    description: Name is the name of resource being referenced
                    type: string
                required:
                - apiGroup
                - kind
                - name
                type: object
              prefix:
                description: Prefix is the prefix of the address.
                type: integer
            required:
            - address
            - claimRef
            - poolRef
            - prefix
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  name: jointokenrequests.k0smotron.io
spec:
  group: k0smotron.io
  names:
    kind: JoinTokenRequest
    listKind: JoinTokenRequestList
    plural: jointokenrequests
    shortNames:
    - jtr
    singular: jointokenrequest
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: JoinTokenRequest is the Schema for the join token request API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: JoinTokenRequestSpec defines the desired state of K0smotronJoinTokenRequest
            properties:
              clusterRef:
                description: ClusterRef is the reference to the cluster for which
                  the join token is requested.
                properties:
                  name:
                    description: Name of the cluster.
                    type: string
                  namespace:
                    description: Namespace of the cluster.
                    type: string
                required:
                - name
                - namespace
                type: object
              expiry:
                default: 0s
                description: Expiration time of the token. Format 1.5h, 2h45m or 300ms.
                type: string
              role:
                default: worker
                description: Role of the node for which the token is requested (worker
                  or controller).
                enum:
                - worker
                - controller
                type: string
            required:
            - clusterRef
            type: object
          status:
            description: JoinTokenRequestStatus defines the observed state of K0smotronJoinTokenRequest
            properties:
              reconciliationStatus:
                type: string
              tokenID:
                type: string
            required:
            - reconciliationStatus
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: k0scontrollerconfigs.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    kind: K0sControllerConfig
    listKind: K0sControllerConfigList
    plural: k0scontrollerconfigs
    singular: k0scontrollerconfig
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              args:
                description: 'Args specifies extra arguments to be passed to k0s worker.
                  See: https://docs.k0sproject.io/stable/advanced/worker-configuration/'
                items:
                  type: string
                type: array
              downloadURL:
                description: DownloadURL specifies the URL from which to download
                  the k0s binary. If the version field is specified, it is ignored,
                  and whatever version is downloaded from the URL is used.
                type: string
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  properties:
                    content:
                      type: string
                    path:
                      type: string
                    permissions:
                      type: string
                  type: object
                type: array
              k0s:
                description: K0s defines the k0s configuration. Note, that some fields
                  will be overwritten by k0smotron. If empty, will be used default
                  configuration. @see https://docs.k0sproject.io/stable/configuration/
                type: object
                x-kubernetes-preserve-unknown-fields: true
              postStartCommands:
                description: PostStartCommands specifies commands to be run after
                  starting k0s worker.
                items:
                  type: string
                type: array
              preInstalledK0s:
                description: PreInstallK0s specifies whether k0s binary is pre-installed
                  on the node.
                type: boolean
              preStartCommands:
                description: PreStartCommands specifies commands to be run before
                  starting k0s worker.
                items:
                  type: string
                type: array
              tunneling:
                description: Tunneling defines the tunneling configuration for the
                  cluster.
                properties:
                  enabled:
                    default: false
                    description: Enabled specifies whether tunneling is enabled.
                    type: boolean
                  mode:
                    default: tunnel
                    description: Mode describes tunneling mode. If empty, k0smotron
                      will use the default one.
                    enum:
                    - tunnel
                    - proxy
                    type: string
                  serverAddress:
                    description: Server address of the tunneling server. If empty,
                      k0smotron will try to detect worker node address for.
                    type: string
                  serverNodePort:
                    default: 31700
                    description: NodePort to publish for server port of the tunneling
                      server. If empty, k0smotron will use the default one.
                    format: int32
                    type: integer
                  tunnelingNodePort:
                    default: 31443
                    description: NodePort to publish for tunneling port. If empty,
                      k0smotron will use the default one.
                    format: int32
                    type: integer
                type: object
              version:
                description: 'Version is the version of k0s to use. In case this is
                  not set, the latest version is used. Make sure the version is compatible
                  with the k0s version running on the control plane. For reference
                  see the Kubernetes version skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/'
                type: string
            type: object
          status:
            properties:
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              ready:
                description: Ready indicates the Bootstrapdata field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: k0scontrollerconfigs.controlplane.cluster.x-k8s.io
spec:
  group: controlplane.cluster.x-k8s.io
  names:
    kind: K0sControllerConfig
    listKind: K0sControllerConfigList
    plural: k0scontrollerconfigs
    singular: k0scontrollerconfig
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              args:
                description: 'Args specifies extra arguments to be passed to k0s worker.
                  See: https://docs.k0sproject.io/stable/advanced/worker-configuration/'
                items:
                  type: string
                type: array
              downloadURL:
                description: DownloadURL specifies the URL to download k0s binary
                  from. If specified the version field is ignored and what ever version
                  is downloaded from the URL is used.
                type: string
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  properties:
                    content:
                      type: string
                    path:
                      type: string
                    permissions:
                      type: string
                  type: object
                type: array
              k0s:
                description: K0s defines the k0s configuration. Note, that some fields
                  will be overwritten by k0smotron. If empty, will be used default
                  configuration. @see https://docs.k0sproject.io/stable/configuration/
                type: object
                x-kubernetes-preserve-unknown-fields: true
              postStartCommands:
                description: PostStartCommands specifies commands to be run after
                  starting k0s worker.
                items:
                  type: string
                type: array
              preInstalledK0s:
                description: PreInstallK0s specifies whether k0s binary is pre-installed
                  on the node.
                type: boolean
              preStartCommands:
                description: PreStartCommands specifies commands to be run before
                  starting k0s worker.
                items:
                  type: string
                type: array
            type: object
          status:
            properties:
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              ready:
                description: Ready indicates the Bootstrapdata field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: k0scontrolplanes.controlplane.cluster.x-k8s.io
spec:
  group: controlplane.cluster.x-k8s.io
  names:
    kind: K0sControlPlane
    listKind: K0sControlPlaneList
    plural: k0scontrolplanes
    singular: k0scontrolplane
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              k0sConfigSpec:
                properties:
                  args:
                    description: 'Args specifies extra arguments to be passed to k0s
                      worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/'
                    items:
                      type: string
                    type: array
                  downloadURL:
                    description: DownloadURL specifies the URL from which to download
                      the k0s binary. If the version field is specified, it is ignored,
                      and whatever version is downloaded from the URL is used.
                    type: string
                  files:
                    description: Files specifies extra files to be passed to user_data
                      upon creation.
                    items:
                      properties:
                        content:
                          type: string
                        path:
                          type: string
                        permissions:
                          type: string
                      type: object
                    type: array
                  k0s:
                    description: K0s defines the k0s configuration. Note, that some
                      fields will be overwritten by k0smotron. If empty, will be used
                      default configuration. @see https://docs.k0sproject.io/stable/configuration/
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  postStartCommands:
                    description: PostStartCommands specifies commands to be run after
                      starting k0s worker.
                    items:
                      type: string
                    type: array
                  preInstalledK0s:
                    description: PreInstallK0s specifies whether k0s binary is pre-installed
                      on the node.
                    type: boolean
                  preStartCommands:
                    description: PreStartCommands specifies commands to be run before
                      starting k0s worker.
                    items:
                      type: string
                    type: array
                  tunneling:
                    description: Tunneling defines the tunneling configuration for
                      the cluster.
                    properties:
                      enabled:
                        default: false
                        description: Enabled specifies whether tunneling is enabled.
                        type: boolean
                      mode:
                        default: tunnel
                        description: Mode describes tunneling mode. If empty, k0smotron
                          will use the default one.
                        enum:
                        - tunnel
                        - proxy
                        type: string
                      serverAddress:
                        description: Server address of the tunneling server. If empty,
                          k0smotron will try to detect worker node address for.
                        type: string
                      serverNodePort:
                        default: 31700
                        description: NodePort to publish for server port of the tunneling
                          server. If empty, k0smotron will use the default one.
                        format: int32
                        type: integer
                      tunnelingNodePort:
                        default: 31443
                        description: NodePort to publish for tunneling port. If empty,
                          k0smotron will use the default one.
                        format: int32
                        type: integer
                    type: object
                  version:
                    description: 'Version is the version of k0s to use. In case this
                      is not set, the latest version is used. Make sure the version
                      is compatible with the k0s version running on the control plane.
                      For reference see the Kubernetes version skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/'
                    type: string
                type: object
              k0sVersion:
                description: K0sVersion defines the k0s version to be deployed. If
                  empty k0smotron will pick it automatically.
                type: string
              machineTemplate:
                properties:
                  infrastructureRef:
                    description: InfrastructureRef is a required reference to a custom
                      resource offered by an infrastructure provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                required:
                - infrastructureRef
                type: object
              replicas:
                default: 1
                format: int32
                type: integer
            required:
            - k0sConfigSpec
            - machineTemplate
            type: object
          status:
            properties:
              controlPlaneReady:
                type: boolean
              externalManagedControlPlane:
                type: boolean
              initialized:
                type: boolean
              ready:
                description: Ready denotes that the control plane is ready
                type: boolean
              replicas:
                format: int32
                type: integer
            required:
            - controlPlaneReady
            - externalManagedControlPlane
            - initialized
            - ready
            - replicas
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: k0smotroncontrolplanes.controlplane.cluster.x-k8s.io
spec:
  group: controlplane.cluster.x-k8s.io
  names:
    kind: K0smotronControlPlane
    listKind: K0smotronControlPlaneList
    plural: k0smotroncontrolplanes
    singular: k0smotroncontrolplane
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of K0smotronCluster
            properties:
              certificateRefs:
                description: CertificateRefs defines the certificate references.
                items:
                  properties:
                    name:
                      type: string
                    type:
                      enum:
                      - ca
                      - sa
                      - proxy
                      type: string
                  required:
                  - type
                  type: object
                type: array
              controllerPlaneFlags:
                description: ControlPlaneFlags allows to configure additional flags
                  for k0s control plane and to override existing ones. The default
                  flags are kept unless they are overriden explicitly. Flags with
                  arguments must be specified as a single string, e.g. --some-flag=argument
                items:
                  type: string
                type: array
              enableMonitoring:
                description: EnableMonitoring enables prometheus sidecar that scrapes
                  metrics from the child cluster system components and expose them
                  as usual kubernetes pod metrics.
                type: boolean
              externalAddress:
                description: ExternalAddress defines k0s external address. See https://docs.k0sproject.io/stable/configuration/#specapi
                  Will be detected automatically for service type LoadBalancer.
                type: string
              k0sConfig:
                description: k0sConfig defines the k0s configuration. Note, that some
                  fields will be overwritten by k0smotron. If empty, will be used
                  default configuration. @see https://docs.k0sproject.io/stable/configuration/
                type: object
                x-kubernetes-preserve-unknown-fields: true
              k0sImage:
                default: k0sproject/k0s
                description: K0sImage defines the k0s image to be deployed. If empty
                  k0smotron will pick it automatically. Must not include the image
                  tag.
                type: string
              k0sVersion:
                description: K0sVersion defines the k0s version to be deployed. If
                  empty k0smotron will pick it automatically.
                type: string
              kineDataSourceSecretName:
                description: KineDataSourceSecretName defines the name of kine datasource
                  URL secret. KineDataSourceURL or KineDataSourceSecretName are required
                  for HA controlplane setup and one of them must be set if replicas
                  > 1.
                type: string
              kineDataSourceURL:
                description: KineDataSourceURL defines the kine datasource URL. KineDataSourceURL
                  or KineDataSourceSecretName are required for HA controlplane setup
                  and one of them must be set if replicas > 1.
                type: string
              manifests:
                description: 'Manifests allows to specify list of volumes with manifests
                  to be deployed in the cluster. The volumes will be mounted in /var/lib/k0s/manifests/<manifests.name>,
                  for this reason each manifest is a stack. K0smotron allows any kind
                  of volume, but the recommendation is to use secrets and configmaps.
                  For more information check: https://docs.k0sproject.io/stable/manifests/
                  and https://kubernetes.io/docs/concepts/storage/volumes'
                items:
                  description: Volume represents a named volume in a pod that may
                    be accessed by any container in the pod.
                  properties:
                    awsElasticBlockStore:
                      description: 'awsElasticBlockStore represents an AWS Disk resource
                        that is attached to a kubelet''s host machine and then exposed
                        to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        partition:
                          description: 'partition is the partition in the volume that
                            you want to mount. If omitted, the default is to mount
                            by volume name. Examples: For volume /dev/sda1, you specify
                            the partition as "1". Similarly, the volume partition
                            for /dev/sda is "0" (or you can leave the property empty).'
                          format: int32
                          type: integer
                        readOnly:
                          description: 'readOnly value true will force the readOnly
                            setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                          type: boolean
                        volumeID:
                          description: 'volumeID is unique ID of the persistent disk
                            resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                          type: string
                      required:
                      - volumeID
                      type: object
                    azureDisk:
                      description: azureDisk represents an Azure Data Disk mount on
                        the host and bind mount to the pod.
                      properties:
                        cachingMode:
                          description: 'cachingMode is the Host Caching mode: None,
                            Read Only, Read Write.'
                          type: string
                        diskName:
                          description: diskName is the Name of the data disk in the
                            blob storage
                          type: string
                        diskURI:
                          description: diskURI is the URI of data disk in the blob
                            storage
                          type: string
                        fsType:
                          description: fsType is Filesystem type to mount. Must be
                            a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        kind:
                          description: 'kind expected values are Shared: multiple
                            blob disks per storage account  Dedicated: single blob
                            disk per storage account  Managed: azure managed data
                            disk (only in managed availability set). defaults to shared'
                          type: string
                        readOnly:
                          description: readOnly Defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                      required:
                      - diskName
                      - diskURI
                      type: object
                    azureFile:
                      description: azureFile represents an Azure File Service mount
                        on the host and bind mount to the pod.
                      properties:
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretName:
                          description: secretName is the  name of secret that contains
                            Azure Storage Account Name and Key
                          type: string
                        shareName:
                          description: shareName is the azure share Name
                          type: string
                      required:
                      - secretName
                      - shareName
                      type: object
                    cephfs:
                      description: cephFS represents a Ceph FS mount on the host that
                        shares a pod's lifetime
                      properties:
                        monitors:
                          description: 'monitors is Required: Monitors is a collection
                            of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          items:
                            type: string
                          type: array
                        path:
                          description: 'path is Optional: Used as the mounted root,
                            rather than the full Ceph tree, default is /'
                          type: string
                        readOnly:
                          description: 'readOnly is Optional: Defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: boolean
                        secretFile:
                          description: 'secretFile is Optional: SecretFile is the
                            path to key ring for User, default is /etc/ceph/user.secret
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: string
                        secretRef:
                          description: 'secretRef is Optional: SecretRef is reference
                            to the authentication secret for User, default is empty.
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        user:
                          description: 'user is optional: User is the rados user name,
                            default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: string
                      required:
                      - monitors
                      type: object
                    cinder:
                      description: 'cinder represents a cinder volume attached and
                        mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
                            be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: string
                        readOnly:
                          description: 'readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                            More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: boolean
                        secretRef:
                          description: 'secretRef is optional: points to a secret
                            object containing parameters used to connect to OpenStack.'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        volumeID:
                          description: 'volumeID used to identify the volume in cinder.
                            More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: string
                      required:
                      - volumeID
                      type: object
                    configMap:
                      description: configMap represents a configMap that should populate
                        this volume
                      properties:
                        defaultMode:
                          description: 'defaultMode is optional: mode bits used to
                            set permissions on created files by default. Must be an
                            octal value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items if unspecified, each key-value pair in
                            the Data field of the referenced ConfigMap will be projected
                            into the volume as a file whose name is the key and content
                            is the value. If specified, the listed keys will be projected
                            into the specified paths, and unlisted keys will not be
                            present. If a key is specified which is not present in
                            the ConfigMap, the volume setup will error unless it is
                            marked optional. Paths must be relative and may not contain
                            the '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to
                                  set permissions on this file. Must be an octal value
                                  between 0000 and 0777 or a decimal value between
                                  0 and 511. YAML accepts both octal and decimal values,
                                  JSON requires decimal values for mode bits. If not
                                  specified, the volume defaultMode will be used.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file
                                  to map the key to. May not be an absolute path.
                                  May not contain the path element '..'. May not start
                                  with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                        optional:
                          description: optional specify whether the ConfigMap or its
                            keys must be defined
                          type: boolean
                      type: object
                      x-kubernetes-map-type: atomic
                    csi:
                      description: csi (Container Storage Interface) represents ephemeral
                        storage that is handled by certain external CSI drivers (Beta
                        feature).
                      properties:
                        driver:
                          description: driver is the name of the CSI driver that handles
                            this volume. Consult with your admin for the correct name
                            as registered in the cluster.
                          type: string
                        fsType:
                          description: fsType to mount. Ex. "ext4", "xfs", "ntfs".
                            If not provided, the empty value is passed to the associated
                            CSI driver which will determine the default filesystem
                            to apply.
                          type: string
                        nodePublishSecretRef:
                          description: nodePublishSecretRef is a reference to the
                            secret object containing sensitive information to pass
                            to the CSI driver to complete the CSI NodePublishVolume
                            and NodeUnpublishVolume calls. This field is optional,
                            and  may be empty if no secret is required. If the secret
                            object contains more than one secret, all secret references
                            are passed.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        readOnly:
                          description: readOnly specifies a read-only configuration
                            for the volume. Defaults to false (read/write).
                          type: boolean
                        volumeAttributes:
                          additionalProperties:
                            type: string
                          description: volumeAttributes stores driver-specific properties
                            that are passed to the CSI driver. Consult your driver's
                            documentation for supported values.
                          type: object
                      required:
                      - driver
                      type: object
                    downwardAPI:
                      description: downwardAPI represents downward API about the pod
                        that should populate this volume
                      properties:
                        defaultMode:
                          description: 'Optional: mode bits to use on created files
                            by default. Must be a Optional: mode bits used to set
                            permissions on created files by default. Must be an octal
                            value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: Items is a list of downward API volume file
                          items:
                            description: DownwardAPIVolumeFile represents information
                              to create the file containing the pod field
                            properties:
                              fieldRef:
                                description: 'Required: Selects a field of the pod:
                                  only annotations, labels, name and namespace are
                                  supported.'
                                properties:
                                  apiVersion:
                                    description: Version of the schema the FieldPath
                                      is written in terms of, defaults to "v1".
                                    type: string
                                  fieldPath:
                                    description: Path of the field to select in the
                                      specified API version.
                                    type: string
                                required:
                                - fieldPath
                                type: object
                                x-kubernetes-map-type: atomic
                              mode:
                                description: 'Optional: mode bits used to set permissions
                                  on this file, must be an octal value between 0000
                                  and 0777 or a decimal value between 0 and 511. YAML
                                  accepts both octal and decimal values, JSON requires
                                  decimal values for mode bits. If not specified,
                                  the volume defaultMode will be used. This might
                                  be in conflict with other options that affect the
                                  file mode, like fsGroup, and the result can be other
                                  mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: 'Required: Path is  the relative path
                                  name of the file to be created. Must not be absolute
                                  or contain the ''..'' path. Must be utf-8 encoded.
                                  The first item of the relative path must not start
                                  with ''..'''
                                type: string
                              resourceFieldRef:
                                description: 'Selects a resource of the container:
                                  only resources limits and requests (limits.cpu,
                                  limits.memory, requests.cpu and requests.memory)
                                  are currently supported.'
                                properties:
                                  containerName:
                                    description: 'Container name: required for volumes,
                                      optional for env vars'
                                    type: string
                                  divisor:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: Specifies the output format of the
                                      exposed resources, defaults to "1"
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  resource:
                                    description: 'Required: resource to select'
                                    type: string
                                required:
                                - resource
                                type: object
                                x-kubernetes-map-type: atomic
                            required:
                            - path
                            type: object
                          type: array
                      type: object
                    emptyDir:
                      description: 'emptyDir represents a temporary directory that
                        shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                      properties:
                        medium:
                          description: 'medium represents what type of storage medium
                            should back this directory. The default is "" which means
                            to use the node''s default medium. Must be an empty string
                            (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                          type: string
                        sizeLimit:
                          anyOf:
                          - type: integer
                          - type: string
                          description: 'sizeLimit is the total amount of local storage
                            required for this EmptyDir volume. The size limit is also
                            applicable for memory medium. The maximum usage on memory
                            medium EmptyDir would be the minimum value between the
                            SizeLimit specified here and the sum of memory limits
                            of all containers in a pod. The default is nil which means
                            that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                      type: object
                    ephemeral:
                      description: "ephemeral represents a volume that is handled
                        by a cluster storage driver. The volume's lifecycle is tied
                        to the pod that defines it - it will be created before the
                        pod starts, and deleted when the pod is removed. \n Use this
                        if: a) the volume is only needed while the pod runs, b) features
                        of normal volumes like restoring from snapshot or capacity
                        tracking are needed, c) the storage driver is specified through
                        a storage class, and d) the storage driver supports dynamic
                        volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource
                        for more information on the connection between this volume
                        type and PersistentVolumeClaim). \n Use PersistentVolumeClaim
                        or one of the vendor-specific APIs for volumes that persist
                        for longer than the lifecycle of an individual pod. \n Use
                        CSI for light-weight local ephemeral volumes if the CSI driver
                        is meant to be used that way - see the documentation of the
                        driver for more information. \n A pod can use both types of
                        ephemeral volumes and persistent volumes at the same time."
                      properties:
                        volumeClaimTemplate:
                          description: "Will be used to create a stand-alone PVC to
                            provision the volume. The pod in which this EphemeralVolumeSource
                            is embedded will be the owner of the PVC, i.e. the PVC
                            will be deleted together with the pod.  The name of the
                            PVC will be `<pod name>-<volume name>` where `<volume
                            name>` is the name from the `PodSpec.Volumes` array entry.
                            Pod validation will reject the pod if the concatenated
                            name is not valid for a PVC (for example, too long). \n
                            An existing PVC with that name that is not owned by the
                            pod will *not* be used for the pod to avoid using an unrelated
                            volume by mistake. Starting the pod is then blocked until
                            the unrelated PVC is removed. If such a pre-created PVC
                            is meant to be used by the pod, the PVC has to updated
                            with an owner reference to the pod once the pod exists.
                            Normally this should not be necessary, but it may be useful
                            when manually reconstructing a broken cluster. \n This
                            field is read-only and no changes will be made by Kubernetes
                            to the PVC after it has been created. \n Required, must
                            not be nil."
                          properties:
                            metadata:
                              description: May contain labels and annotations that
                                will be copied into the PVC when creating it. No other
                                fields are allowed and will be rejected during validation.
                              type: object
                            spec:
                              description: The specification for the PersistentVolumeClaim.
                                The entire content is copied unchanged into the PVC
                                that gets created from this template. The same fields
                                as in a PersistentVolumeClaim are also valid here.
                              properties:
                                accessModes:
                                  description: 'accessModes contains the desired access
                                    modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                dataSource:
                                  description: 'dataSource field can be used to specify
                                    either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                    * An existing PVC (PersistentVolumeClaim) If the
                                    provisioner or an external controller can support
                                    the specified data source, it will create a new
                                    volume based on the contents of the specified
                                    data source. When the AnyVolumeDataSource feature
                                    gate is enabled, dataSource contents will be copied
                                    to dataSourceRef, and dataSourceRef contents will
                                    be copied to dataSource when dataSourceRef.namespace
                                    is not specified. If the namespace is specified,
                                    then dataSourceRef will not be copied to dataSource.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                  x-kubernetes-map-type: atomic
                                dataSourceRef:
                                  description: 'dataSourceRef specifies the object
                                    from which to populate the volume with data, if
                                    a non-empty volume is desired. This may be any
                                    object from a non-empty API group (non core object)
                                    or a PersistentVolumeClaim object. When this field
                                    is specified, volume binding will only succeed
                                    if the type of the specified object matches some
                                    installed volume populator or dynamic provisioner.
                                    This field will replace the functionality of the
                                    dataSource field and as such if both fields are
                                    non-empty, they must have the same value. For
                                    backwards compatibility, when namespace isn''t
                                    specified in dataSourceRef, both fields (dataSource
                                    and dataSourceRef) will be set to the same value
                                    automatically if one of them is empty and the
                                    other is non-empty. When namespace is specified
                                    in dataSourceRef, dataSource isn''t set to the
                                    same value and must be empty. There are three
                                    important differences between dataSource and dataSourceRef:
                                    * While dataSource only allows two specific types
                                    of objects, dataSourceRef allows any non-core
                                    object, as well as PersistentVolumeClaim objects.
                                    * While dataSource ignores disallowed values (dropping
                                    them), dataSourceRef preserves all values, and
                                    generates an error if a disallowed value is specified.
                                    * While dataSource only allows local objects,
                                    dataSourceRef allows objects in any namespaces.
                                    (Beta) Using this field requires the AnyVolumeDataSource
                                    feature gate to be enabled. (Alpha) Using the
                                    namespace field of dataSourceRef requires the
                                    CrossNamespaceVolumeDataSource feature gate to
                                    be enabled.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                    namespace:
                                      description: Namespace is the namespace of resource
                                        being referenced Note that when a namespace
                                        is specified, a gateway.networking.k8s.io/ReferenceGrant
                                        object is required in the referent namespace
                                        to allow that namespace's owner to accept
                                        the reference. See the ReferenceGrant documentation
                                        for details. (Alpha) This field requires the
                                        CrossNamespaceVolumeDataSource feature gate
                                        to be enabled.
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                resources:
                                  description: 'resources represents the minimum resources
                                    the volume should have. If RecoverVolumeExpansionFailure
                                    feature is enabled users are allowed to specify
                                    resource requirements that are lower than previous
                                    value but must still be higher than capacity recorded
                                    in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                  properties:
                                    claims:
                                      description: "Claims lists the names of resources,
                                        defined in spec.resourceClaims, that are used
                                        by this container. \n This is an alpha field
                                        and requires enabling the DynamicResourceAllocation
                                        feature gate. \n This field is immutable.
                                        It can only be set for containers."
                                      items:
                                        description: ResourceClaim references one
                                          entry in PodSpec.ResourceClaims.
                                        properties:
                                          name:
                                            description: Name must match the name
                                              of one entry in pod.spec.resourceClaims
                                              of the Pod where this field is used.
                                              It makes that resource available inside
                                              a container.
                                            type: string
                                        required:
                                        - name
                                        type: object
                                      type: array
                                      x-kubernetes-list-map-keys:
                                      - name
                                      x-kubernetes-list-type: map
                                    limits:
                                      additionalProperties:
                                        anyOf:
                                        - type: integer
                                        - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Limits describes the maximum amount
                                        of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                    requests:
                                      additionalProperties:
                                        anyOf:
                                        - type: integer
                                        - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Requests describes the minimum
                                        amount of compute resources required. If Requests
                                        is omitted for a container, it defaults to
                                        Limits if that is explicitly specified, otherwise
                                        to an implementation-defined value. Requests
                                        cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                  type: object
                                selector:
                                  description: selector is a label query over volumes
                                    to consider for binding.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                storageClassName:
                                  description: 'storageClassName is the name of the
                                    StorageClass required by the claim. More info:
                                    https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                  type: string
                                volumeMode:
                                  description: volumeMode defines what type of volume
                                    is required by the claim. Value of Filesystem
                                    is implied when not included in claim spec.
                                  type: string
                                volumeName:
                                  description: volumeName is the binding reference
                                    to the PersistentVolume backing this claim.
                                  type: string
                              type: object
                          required:
                          - spec
                          type: object
                      type: object
                    fc:
                      description: fc represents a Fibre Channel resource that is
                        attached to a kubelet's host machine and then exposed to the
                        pod.
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. TODO: how do we prevent errors in the
                            filesystem from compromising the machine'
                          type: string
                        lun:
                          description: 'lun is Optional: FC target lun number'
                          format: int32
                          type: integer
                        readOnly:
                          description: 'readOnly is Optional: Defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                          type: boolean
                        targetWWNs:
                          description: 'targetWWNs is Optional: FC target worldwide
                            names (WWNs)'
                          items:
                            type: string
                          type: array
                        wwids:
                          description: 'wwids Optional: FC volume world wide identifiers
                            (wwids) Either wwids or combination of targetWWNs and
                            lun must be set, but not both simultaneously.'
                          items:
                            type: string
                          type: array
                      type: object
                    flexVolume:
                      description: flexVolume represents a generic volume resource
                        that is provisioned/attached using an exec based plugin.
                      properties:
                        driver:
                          description: driver is the name of the driver to use for
                            this volume.
                          type: string
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". The default filesystem depends
                            on FlexVolume script.
                          type: string
                        options:
                          additionalProperties:
                            type: string
                          description: 'options is Optional: this field holds extra
                            command options if any.'
                          type: object
                        readOnly:
                          description: 'readOnly is Optional: defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                          type: boolean
                        secretRef:
                          description: 'secretRef is Optional: secretRef is reference
                            to the secret object containing sensitive information
                            to pass to the plugin scripts. This may be empty if no
                            secret object is specified. If the secret object contains
                            more than one secret, all secrets are passed to the plugin
                            scripts.'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                      - driver
                      type: object
                    flocker:
                      description: flocker represents a Flocker volume attached to
                        a kubelet's host machine. This depends on the Flocker control
                        service being running
                      properties:
                        datasetName:
                          description: datasetName is Name of the dataset stored as
                            metadata -> name on the dataset for Flocker should be
                            considered as deprecated
                          type: string
                        datasetUUID:
                          description: datasetUUID is the UUID of the dataset. This
                            is unique identifier of a Flocker dataset
                          type: string
                      type: object
                    gcePersistentDisk:
                      description: 'gcePersistentDisk represents a GCE Disk resource
                        that is attached to a kubelet''s host machine and then exposed
                        to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                      properties:
                        fsType:
                          description: 'fsType is filesystem type of the volume that
                            you want to mount. Tip: Ensure that the filesystem type
                            is supported by the host operating system. Examples: "ext4",
                            "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        partition:
                          description: 'partition is the partition in the volume that
                            you want to mount. If omitted, the default is to mount
                            by volume name. Examples: For volume /dev/sda1, you specify
                            the partition as "1". Similarly, the volume partition
                            for /dev/sda is "0" (or you can leave the property empty).
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          format: int32
                          type: integer
                        pdName:
                          description: 'pdName is unique name of the PD resource in
                            GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          type: boolean
                      required:
                      - pdName
                      type: object
                    gitRepo:
                      description: 'gitRepo represents a git repository at a particular
                        revision. DEPRECATED: GitRepo is deprecated. To provision
                        a container with a git repo, mount an EmptyDir into an InitContainer
                        that clones the repo using git, then mount the EmptyDir into
                        the Pod''s container.'
                      properties:
                        directory:
                          description: directory is the target directory name. Must
                            not contain or start with '..'.  If '.' is supplied, the
                            volume directory will be the git repository.  Otherwise,
                            if specified, the volume will contain the git repository
                            in the subdirectory with the given name.
                          type: string
                        repository:
                          description: repository is the URL
                          type: string
                        revision:
                          description: revision is the commit hash for the specified
                            revision.
                          type: string
                      required:
                      - repository
                      type: object
                    glusterfs:
                      description: 'glusterfs represents a Glusterfs mount on the
                        host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
                      properties:
                        endpoints:
                          description: 'endpoints is the endpoint name that details
                            Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: string
                        path:
                          description: 'path is the Glusterfs volume path. More info:
                            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the Glusterfs volume
                            to be mounted with read-only permissions. Defaults to
                            false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: boolean
                      required:
                      - endpoints
                      - path
                      type: object
                    hostPath:
                      description: 'hostPath represents a pre-existing file or directory
                        on the host machine that is directly exposed to the container.
                        This is generally used for system agents or other privileged
                        things that are allowed to see the host machine. Most containers
                        will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                        --- TODO(jonesdl) We need to restrict who can use host directory
                        mounts and who can/can not mount host directories as read/write.'
                      properties:
                        path:
                          description: 'path of the directory on the host. If the
                            path is a symlink, it will follow the link to the real
                            path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                          type: string
                        type:
                          description: 'type for HostPath Volume Defaults to "" More
                            info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                          type: string
                      required:
                      - path
                      type: object
                    iscsi:
                      description: 'iscsi represents an ISCSI Disk resource that is
                        attached to a kubelet''s host machine and then exposed to
                        the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
                      properties:
                        chapAuthDiscovery:
                          description: chapAuthDiscovery defines whether support iSCSI
                            Discovery CHAP authentication
                          type: boolean
                        chapAuthSession:
                          description: chapAuthSession defines whether support iSCSI
                            Session CHAP authentication
                          type: boolean
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        initiatorName:
                          description: initiatorName is the custom iSCSI Initiator
                            Name. If initiatorName is specified with iscsiInterface
                            simultaneously, new iSCSI interface <target portal>:<volume
                            name> will be created for the connection.
                          type: string
                        iqn:
                          description: iqn is the target iSCSI Qualified Name.
                          type: string
                        iscsiInterface:
                          description: iscsiInterface is the interface Name that uses
                            an iSCSI transport. Defaults to 'default' (tcp).
                          type: string
                        lun:
                          description: lun represents iSCSI Target Lun number.
                          format: int32
                          type: integer
                        portals:
                          description: portals is the iSCSI Target Portal List. The
                            portal is either an IP or ip_addr:port if the port is
                            other than default (typically TCP ports 860 and 3260).
                          items:
                            type: string
                          type: array
                        readOnly:
                          description: readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false.
                          type: boolean
                        secretRef:
                          description: secretRef is the CHAP Secret for iSCSI target
                            and initiator authentication
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        targetPortal:
                          description: targetPortal is iSCSI Target Portal. The Portal
                            is either an IP or ip_addr:port if the port is other than
                            default (typically TCP ports 860 and 3260).
                          type: string
                      required:
                      - iqn
                      - lun
                      - targetPortal
                      type: object
                    name:
                      description: 'name of the volume. Must be a DNS_LABEL and unique
                        within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    nfs:
                      description: 'nfs represents an NFS mount on the host that shares
                        a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                      properties:
                        path:
                          description: 'path that is exported by the NFS server. More
                            info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the NFS export to
                            be mounted with read-only permissions. Defaults to false.
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: boolean
                        server:
                          description: 'server is the hostname or IP address of the
                            NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: string
                      required:
                      - path
                      - server
                      type: object
                    persistentVolumeClaim:
                      description: 'persistentVolumeClaimVolumeSource represents a
                        reference to a PersistentVolumeClaim in the same namespace.
                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                      properties:
                        claimName:
                          description: 'claimName is the name of a PersistentVolumeClaim
                            in the same namespace as the pod using this volume. More
                            info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                          type: string
                        readOnly:
                          description: readOnly Will force the ReadOnly setting in
                            VolumeMounts. Default false.
                          type: boolean
                      required:
                      - claimName
                      type: object
                    photonPersistentDisk:
                      description: photonPersistentDisk represents a PhotonController
                        persistent disk attached and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        pdID:
                          description: pdID is the ID that identifies Photon Controller
                            persistent disk
                          type: string
                      required:
                      - pdID
                      type: object
                    portworxVolume:
                      description: portworxVolume represents a portworx volume attached
                        and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fSType represents the filesystem type to mount
                            Must be a filesystem type supported by the host operating
                            system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        volumeID:
                          description: volumeID uniquely identifies a Portworx volume
                          type: string
                      required:
                      - volumeID
                      type: object
                    projected:
                      description: projected items for all in one resources secrets,
                        configmaps, and downward API
                      properties:
                        defaultMode:
                          description: defaultMode are the mode bits used to set permissions
                            on created files by default. Must be an octal value between
                            0000 and 0777 or a decimal value between 0 and 511. YAML
                            accepts both octal and decimal values, JSON requires decimal
                            values for mode bits. Directories within the path are
                            not affected by this setting. This might be in conflict
                            with other options that affect the file mode, like fsGroup,
                            and the result can be other mode bits set.
                          format: int32
                          type: integer
                        sources:
                          description: sources is the list of volume projections
                          items:
                            description: Projection that may be projected along with
                              other supported volume types
                            properties:
                              configMap:
                                description: configMap information about the configMap
                                  data to project
                                properties:
                                  items:
                                    description: items if unspecified, each key-value
                                      pair in the Data field of the referenced ConfigMap
                                      will be projected into the volume as a file
                                      whose name is the key and content is the value.
                                      If specified, the listed keys will be projected
                                      into the specified paths, and unlisted keys
                                      will not be present. If a key is specified which
                                      is not present in the ConfigMap, the volume
                                      setup will error unless it is marked optional.
                                      Paths must be relative and may not contain the
                                      '..' path or start with '..'.
                                    items:
                                      description: Maps a string key to a path within
                                        a volume.
                                      properties:
                                        key:
                                          description: key is the key to project.
                                          type: string
                                        mode:
                                          description: 'mode is Optional: mode bits
                                            used to set permissions on this file.
                                            Must be an octal value between 0000 and
                                            0777 or a decimal value between 0 and
                                            511. YAML accepts both octal and decimal
                                            values, JSON requires decimal values for
                                            mode bits. If not specified, the volume
                                            defaultMode will be used. This might be
                                            in conflict with other options that affect
                                            the file mode, like fsGroup, and the result
                                            can be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: path is the relative path of
                                            the file to map the key to. May not be
                                            an absolute path. May not contain the
                                            path element '..'. May not start with
                                            the string '..'.
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: optional specify whether the ConfigMap
                                      or its keys must be defined
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              downwardAPI:
                                description: downwardAPI information about the downwardAPI
                                  data to project
                                properties:
                                  items:
                                    description: Items is a list of DownwardAPIVolume
                                      file
                                    items:
                                      description: DownwardAPIVolumeFile represents
                                        information to create the file containing
                                        the pod field
                                      properties:
                                        fieldRef:
                                          description: 'Required: Selects a field
                                            of the pod: only annotations, labels,
                                            name and namespace are supported.'
                                          properties:
                                            apiVersion:
                                              description: Version of the schema the
                                                FieldPath is written in terms of,
                                                defaults to "v1".
                                              type: string
                                            fieldPath:
                                              description: Path of the field to select
                                                in the specified API version.
                                              type: string
                                          required:
                                          - fieldPath
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        mode:
                                          description: 'Optional: mode bits used to
                                            set permissions on this file, must be
                                            an octal value between 0000 and 0777 or
                                            a decimal value between 0 and 511. YAML
                                            accepts both octal and decimal values,
                                            JSON requires decimal values for mode
                                            bits. If not specified, the volume defaultMode
                                            will be used. This might be in conflict
                                            with other options that affect the file
                                            mode, like fsGroup, and the result can
                                            be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: 'Required: Path is  the relative
                                            path name of the file to be created. Must
                                            not be absolute or contain the ''..''
                                            path. Must be utf-8 encoded. The first
                                            item of the relative path must not start
                                            with ''..'''
                                          type: string
                                        resourceFieldRef:
                                          description: 'Selects a resource of the
                                            container: only resources limits and requests
                                            (limits.cpu, limits.memory, requests.cpu
                                            and requests.memory) are currently supported.'
                                          properties:
                                            containerName:
                                              description: 'Container name: required
                                                for volumes, optional for env vars'
                                              type: string
                                            divisor:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              description: Specifies the output format
                                                of the exposed resources, defaults
                                                to "1"
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            resource:
                                              description: 'Required: resource to
                                                select'
                                              type: string
                                          required:
                                          - resource
                                          type: object
                                          x-kubernetes-map-type: atomic
                                      required:
                                      - path
                                      type: object
                                    type: array
                                type: object
                              secret:
                                description: secret information about the secret data
                                  to project
                                properties:
                                  items:
                                    description: items if unspecified, each key-value
                                      pair in the Data field of the referenced Secret
                                      will be projected into the volume as a file
                                      whose name is the key and content is the value.
                                      If specified, the listed keys will be projected
                                      into the specified paths, and unlisted keys
                                      will not be present. If a key is specified which
                                      is not present in the Secret, the volume setup
                                      will error unless it is marked optional. Paths
                                      must be relative and may not contain the '..'
                                      path or start with '..'.
                                    items:
                                      description: Maps a string key to a path within
                                        a volume.
                                      properties:
                                        key:
                                          description: key is the key to project.
                                          type: string
                                        mode:
                                          description: 'mode is Optional: mode bits
                                            used to set permissions on this file.
                                            Must be an octal value between 0000 and
                                            0777 or a decimal value between 0 and
                                            511. YAML accepts both octal and decimal
                                            values, JSON requires decimal values for
                                            mode bits. If not specified, the volume
                                            defaultMode will be used. This might be
                                            in conflict with other options that affect
                                            the file mode, like fsGroup, and the result
                                            can be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: path is the relative path of
                                            the file to map the key to. May not be
                                            an absolute path. May not contain the
                                            path element '..'. May not start with
                                            the string '..'.
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: optional field specify whether the
                                      Secret or its key must be defined
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              serviceAccountToken:
                                description: serviceAccountToken is information about
                                  the serviceAccountToken data to project
                                properties:
                                  audience:
                                    description: audience is the intended audience
                                      of the token. A recipient of a token must identify
                                      itself with an identifier specified in the audience
                                      of the token, and otherwise should reject the
                                      token. The audience defaults to the identifier
                                      of the apiserver.
                                    type: string
                                  expirationSeconds:
                                    description: expirationSeconds is the requested
                                      duration of validity of the service account
                                      token. As the token approaches expiration, the
                                      kubelet volume plugin will proactively rotate
                                      the service account token. The kubelet will
                                      start trying to rotate the token if the token
                                      is older than 80 percent of its time to live
                                      or if the token is older than 24 hours.Defaults
                                      to 1 hour and must be at least 10 minutes.
                                    format: int64
                                    type: integer
                                  path:
                                    description: path is the path relative to the
                                      mount point of the file to project the token
                                      into.
                                    type: string
                                required:
                                - path
                                type: object
                            type: object
                          type: array
                      type: object
                    quobyte:
                      description: quobyte represents a Quobyte mount on the host
                        that shares a pod's lifetime
                      properties:
                        group:
                          description: group to map volume access to Default is no
                            group
                          type: string
                        readOnly:
                          description: readOnly here will force the Quobyte volume
                            to be mounted with read-only permissions. Defaults to
                            false.
                          type: boolean
                        registry:
                          description: registry represents a single or multiple Quobyte
                            Registry services specified as a string as host:port pair
                            (multiple entries are separated with commas) which acts
                            as the central registry for volumes
                          type: string
                        tenant:
                          description: tenant owning the given Quobyte volume in the
                            Backend Used with dynamically provisioned Quobyte volumes,
                            value is set by the plugin
                          type: string
                        user:
                          description: user to map volume access to Defaults to serivceaccount
                            user
                          type: string
                        volume:
                          description: volume is a string that references an already
                            created Quobyte volume by name.
                          type: string
                      required:
                      - registry
                      - volume
                      type: object
                    rbd:
                      description: 'rbd represents a Rados Block Device mount on the
                        host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        image:
                          description: 'image is the rados image name. More info:
                            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        keyring:
                          description: 'keyring is the path to key ring for RBDUser.
                            Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        monitors:
                          description: 'monitors is a collection of Ceph monitors.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          items:
                            type: string
                          type: array
                        pool:
                          description: 'pool is the rados pool name. Default is rbd.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: boolean
                        secretRef:
                          description: 'secretRef is name of the authentication secret
                            for RBDUser. If provided overrides keyring. Default is
                            nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        user:
                          description: 'user is the rados user name. Default is admin.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                      required:
                      - image
                      - monitors
                      type: object
                    scaleIO:
                      description: scaleIO represents a ScaleIO persistent volume
                        attached and mounted on Kubernetes nodes.
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                          type: string
                        gateway:
                          description: gateway is the host address of the ScaleIO
                            API Gateway.
                          type: string
                        protectionDomain:
                          description: protectionDomain is the name of the ScaleIO
                            Protection Domain for the configured storage.
                          type: string
                        readOnly:
                          description: readOnly Defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretRef:
                          description: secretRef references to the secret for ScaleIO
                            user and other sensitive information. If this is not provided,
                            Login operation will fail.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        sslEnabled:
                          description: sslEnabled Flag enable/disable SSL communication
                            with Gateway, default false
                          type: boolean
                        storageMode:
                          description: storageMode indicates whether the storage for
                            a volume should be ThickProvisioned or ThinProvisioned.
                            Default is ThinProvisioned.
                          type: string
                        storagePool:
                          description: storagePool is the ScaleIO Storage Pool associated
                            with the protection domain.
                          type: string
                        system:
                          description: system is the name of the storage system as
                            configured in ScaleIO.
                          type: string
                        volumeName:
                          description: volumeName is the name of a volume already
                            created in the ScaleIO system that is associated with
                            this volume source.
                          type: string
                      required:
                      - gateway
                      - secretRef
                      - system
                      type: object
                    secret:
                      description: 'secret represents a secret that should populate
                        this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                      properties:
                        defaultMode:
                          description: 'defaultMode is Optional: mode bits used to
                            set permissions on created files by default. Must be an
                            octal value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items If unspecified, each key-value pair in
                            the Data field of the referenced Secret will be projected
                            into the volume as a file whose name is the key and content
                            is the value. If specified, the listed keys will be projected
                            into the specified paths, and unlisted keys will not be
                            present. If a key is specified which is not present in
                            the Secret, the volume setup will error unless it is marked
                            optional. Paths must be relative and may not contain the
                            '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to
                                  set permissions on this file. Must be an octal value
                                  between 0000 and 0777 or a decimal value between
                                  0 and 511. YAML accepts both octal and decimal values,
                                  JSON requires decimal values for mode bits. If not
                                  specified, the volume defaultMode will be used.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file
                                  to map the key to. May not be an absolute path.
                                  May not contain the path element '..'. May not start
                                  with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        optional:
                          description: optional field specify whether the Secret or
                            its keys must be defined
                          type: boolean
                        secretName:
                          description: 'secretName is the name of the secret in the
                            pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                          type: string
                      type: object
                    storageos:
                      description: storageOS represents a StorageOS volume attached
                        and mounted on Kubernetes nodes.
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretRef:
                          description: secretRef specifies the secret to use for obtaining
                            the StorageOS API credentials.  If not specified, default
                            values will be attempted.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        volumeName:
                          description: volumeName is the human-readable name of the
                            StorageOS volume.  Volume names are only unique within
                            a namespace.
                          type: string
                        volumeNamespace:
                          description: volumeNamespace specifies the scope of the
                            volume within StorageOS.  If no namespace is specified
                            then the Pod's namespace will be used.  This allows the
                            Kubernetes name scoping to be mirrored within StorageOS
                            for tighter integration. Set VolumeName to any name to
                            override the default behaviour. Set to "default" if you
                            are not using namespaces within StorageOS. Namespaces
                            that do not pre-exist within StorageOS will be created.
                          type: string
                      type: object
                    vsphereVolume:
                      description: vsphereVolume represents a vSphere volume attached
                        and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fsType is filesystem type to mount. Must be
                            a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        storagePolicyID:
                          description: storagePolicyID is the storage Policy Based
                            Management (SPBM) profile ID associated with the StoragePolicyName.
                          type: string
                        storagePolicyName:
                          description: storagePolicyName is the storage Policy Based
                            Management (SPBM) profile name.
                          type: string
                        volumePath:
                          description: volumePath is the path that identifies vSphere
                            volume vmdk
                          type: string
                      required:
                      - volumePath
                      type: object
                  required:
                  - name
                  type: object
                type: array
              persistence:
                description: Persistence defines the persistence configuration. If
                  empty k0smotron will use emptyDir as a volume.
                properties:
                  hostPath:
                    description: HostPath defines the host path configuration. Will
                      be used as is in case of .spec.persistence.type is hostPath.
                    type: string
                  persistentVolumeClaim:
                    description: PersistentVolumeClaim defines the PVC configuration.
                      Will be used as is in case of .spec.persistence.type is pvc.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        type: object
                      spec:
                        description: 'spec defines the desired characteristics of
                          a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. When the AnyVolumeDataSource
                              feature gate is enabled, dataSource contents will be
                              copied to dataSourceRef, and dataSourceRef contents
                              will be copied to dataSource when dataSourceRef.namespace
                              is not specified. If the namespace is specified, then
                              dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any object from a non-empty
                              API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the dataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              when namespace isn''t specified in dataSourceRef, both
                              fields (dataSource and dataSourceRef) will be set to
                              the same value automatically if one of them is empty
                              and the other is non-empty. When namespace is specified
                              in dataSourceRef, dataSource isn''t set to the same
                              value and must be empty. There are three important differences
                              between dataSource and dataSourceRef: * While dataSource
                              only allows two specific types of objects, dataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim
                              objects. * While dataSource ignores disallowed values
                              (dropping them), dataSourceRef preserves all values,
                              and generates an error if a disallowed value is specified.
                              * While dataSource only allows local objects, dataSourceRef
                              allows objects in any namespaces. (Beta) Using this
                              field requires the AnyVolumeDataSource feature gate
                              to be enabled. (Alpha) Using the namespace field of
                              dataSourceRef requires the CrossNamespaceVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource
                                  being referenced Note that when a namespace is specified,
                                  a gateway.networking.k8s.io/ReferenceGrant object
                                  is required in the referent namespace to allow that
                                  namespace's owner to accept the reference. See the
                                  ReferenceGrant documentation for details. (Alpha)
                                  This field requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              claims:
                                description: "Claims lists the names of resources,
                                  defined in spec.resourceClaims, that are used by
                                  this container. \n This is an alpha field and requires
                                  enabling the DynamicResourceAllocation feature gate.
                                  \n This field is immutable. It can only be set for
                                  containers."
                                items:
                                  description: ResourceClaim references one entry
                                    in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: Name must match the name of one
                                        entry in pod.spec.resourceClaims of the Pod
                                        where this field is used. It makes that resource
                                        available inside a container.
                                      type: string
                                  required:
                                  - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. Requests cannot exceed Limits. More info:
                                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      status:
                        description: 'status represents the current information/status
                          of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          accessModes:
                            description: 'accessModes contains the actual access modes
                              the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          allocatedResources:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: allocatedResources is the storage resource
                              within AllocatedResources tracks the capacity allocated
                              to a PVC. It may be larger than the actual capacity
                              when a volume expansion operation is requested. For
                              storage quota, the larger value from allocatedResources
                              and PVC.spec.resources is used. If allocatedResources
                              is not set, PVC.spec.resources alone is used for quota
                              calculation. If a volume expansion capacity request
                              is lowered, allocatedResources is only lowered if there
                              are no expansion operations in progress and if the actual
                              volume capacity is equal or lower than the requested
                              capacity. This is an alpha field and requires enabling
                              RecoverVolumeExpansionFailure feature.
                            type: object
                          capacity:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: capacity represents the actual resources
                              of the underlying volume.
                            type: object
                          conditions:
                            description: conditions is the current Condition of persistent
                              volume claim. If underlying persistent volume is being
                              resized then the Condition will be set to 'ResizeStarted'.
                            items:
                              description: PersistentVolumeClaimCondition contains
                                details about state of pvc
                              properties:
                                lastProbeTime:
                                  description: lastProbeTime is the time we probed
                                    the condition.
                                  format: date-time
                                  type: string
                                lastTransitionTime:
                                  description: lastTransitionTime is the time the
                                    condition transitioned from one status to another.
                                  format: date-time
                                  type: string
                                message:
                                  description: message is the human-readable message
                                    indicating details about last transition.
                                  type: string
                                reason:
                                  description: reason is a unique, this should be
                                    a short, machine understandable string that gives
                                    the reason for condition's last transition. If
                                    it reports "ResizeStarted" that means the underlying
                                    persistent volume is being resized.
                                  type: string
                                status:
                                  type: string
                                type:
                                  description: PersistentVolumeClaimConditionType
                                    is a valid value of PersistentVolumeClaimCondition.Type
                                  type: string
                              required:
                              - status
                              - type
                              type: object
                            type: array
                          phase:
                            description: phase represents the current phase of PersistentVolumeClaim.
                            type: string
                          resizeStatus:
                            description: resizeStatus stores status of resize operation.
                              ResizeStatus is not set by default but when expansion
                              is complete resizeStatus is set to empty string by resize
                              controller or kubelet. This is an alpha field and requires
                              enabling RecoverVolumeExpansionFailure feature.
                            type: string
                        type: object
                    type: object
                  type:
                    default: emptyDir
                    type: string
                required:
                - type
                type: object
              replicas:
                default: 1
                description: Replicas is the desired number of replicas of the k0s
                  control planes. If unspecified, defaults to 1. If the value is above
                  1, k0smotron requires kine datasource URL to be set. Recommended
                  value is 3.
                format: int32
                type: integer
              resources:
                description: Resources describes the compute resource requirements
                  for the control plane pods.
                properties:
                  claims:
                    description: "Claims lists the names of resources, defined in
                      spec.resourceClaims, that are used by this container. \n This
                      is an alpha field and requires enabling the DynamicResourceAllocation
                      feature gate. \n This field is immutable. It can only be set
                      for containers."
                    items:
                      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                      properties:
                        name:
                          description: Name must match the name of one entry in pod.spec.resourceClaims
                            of the Pod where this field is used. It makes that resource
                            available inside a container.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - name
                    x-kubernetes-list-type: map
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources
                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute
                      resources required. If Requests is omitted for a container,
                      it defaults to Limits if that is explicitly specified, otherwise
                      to an implementation-defined value. Requests cannot exceed Limits.
                      More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              service:
                description: Service defines the service configuration.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations defines extra annotations to be added
                      to the service.
                    type: object
                  apiPort:
                    default: 30443
                    description: APIPort defines the kubernetes API port. If empty
                      k0smotron will pick it automatically.
                    type: integer
                  konnectivityPort:
                    default: 30132
                    description: KonnectivityPort defines the konnectivity port. If
                      empty k0smotron will pick it automatically.
                    type: integer
                  type:
                    default: NodePort
                    description: Service Type string describes ingress methods for
                      a service
                    enum:
                    - NodePort
                    - LoadBalancer
                    type: string
                required:
                - type
                type: object
            type: object
          status:
            properties:
              controlPlaneReady:
                type: boolean
              externalManagedControlPlane:
                type: boolean
              initialized:
                type: boolean
              ready:
                description: Ready denotes that the control plane is ready
                type: boolean
            required:
            - controlPlaneReady
            - externalManagedControlPlane
            - initialized
            - ready
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: k0sworkerconfigs.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    kind: K0sWorkerConfig
    listKind: K0sWorkerConfigList
    plural: k0sworkerconfigs
    singular: k0sworkerconfig
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              args:
                description: 'Args specifies extra arguments to be passed to k0s worker.
                  See: https://docs.k0sproject.io/stable/advanced/worker-configuration/'
                items:
                  type: string
                type: array
              downloadURL:
                description: DownloadURL specifies the URL to download k0s binary
                  from. If specified the version field is ignored and what ever version
                  is downloaded from the URL is used.
                type: string
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  properties:
                    content:
                      type: string
                    path:
                      type: string
                    permissions:
                      type: string
                  type: object
                type: array
              joinTokenSecretRef:
                description: JoinTokenSecretRef is a reference to a secret that contains
                  the join token. This should be only set in the case you want to
                  use a pre-generated join token.
                properties:
                  key:
                    description: Key is the key in the secret that contains the join
                      token
                    type: string
                  name:
                    description: Name is the name of the secret
                    type: string
                required:
                - key
                - name
                type: object
              postStartCommands:
                description: PostStartCommands specifies commands to be run after
                  starting k0s worker.
                items:
                  type: string
                type: array
              preInstalledK0s:
                description: PreInstallK0s specifies whether k0s binary is pre-installed
                  on the node.
                type: boolean
              preStartCommands:
                description: PreStartCommands specifies commands to be run before
                  starting k0s worker.
                items:
                  type: string
                type: array
              version:
                description: 'Version is the version of k0s to use. In case this is
                  not set, the latest version is used. Make sure the version is compatible
                  with the k0s version running on the control plane. For reference
                  see the Kubernetes version skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/'
                type: string
            type: object
          status:
            properties:
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              ready:
                description: Ready indicates the Bootstrapdata field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: k0sworkerconfigtemplates.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    kind: K0sWorkerConfigTemplate
    listKind: K0sWorkerConfigTemplateList
    plural: k0sworkerconfigtemplates
    singular: k0sworkerconfigtemplate
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              template:
                properties:
                  metadata:
                    type: object
                  spec:
                    properties:
                      args:
                        description: 'Args specifies extra arguments to be passed
                          to k0s worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/'
                        items:
                          type: string
                        type: array
                      downloadURL:
                        description: DownloadURL specifies the URL to download k0s
                          binary from. If specified the version field is ignored and
                          what ever version is downloaded from the URL is used.
                        type: string
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          properties:
                            content:
                              type: string
                            path:
                              type: string
                            permissions:
                              type: string
                          type: object
                        type: array
                      joinTokenSecretRef:
                        description: JoinTokenSecretRef is a reference to a secret
                          that contains the join token. This should be only set in
                          the case you want to use a pre-generated join token.
                        properties:
                          key:
                            description: Key is the key in the secret that contains
                              the join token
                            type: string
                          name:
                            description: Name is the name of the secret
                            type: string
                        required:
                        - key
                        - name
                        type: object
                      postStartCommands:
                        description: PostStartCommands specifies commands to be run
                          after starting k0s worker.
                        items:
                          type: string
                        type: array
                      preInstalledK0s:
                        description: PreInstallK0s specifies whether k0s binary is
                          pre-installed on the node.
                        type: boolean
                      preStartCommands:
                        description: PreStartCommands specifies commands to be run
                          before starting k0s worker.
                        items:
                          type: string
                        type: array
                      version:
                        description: 'Version is the version of k0s to use. In case
                          this is not set, the latest version is used. Make sure the
                          version is compatible with the k0s version running on the
                          control plane. For reference see the Kubernetes version
                          skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/'
                        type: string
                    type: object
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    cluster.x-k8s.io/v1alpha3: v1alpha3
    cluster.x-k8s.io/v1alpha4: v1alpha4
    cluster.x-k8s.io/v1beta1: v1beta1
    clusterctl.cluster.x-k8s.io: ""
  name: kubeadmconfigs.bootstrap.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-bootstrap-webhook-service
          namespace: capi-kubeadm-bootstrap-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfig
    listKind: KubeadmConfigList
    plural: kubeadmconfigs
    singular: kubeadmconfig
  scope: Namespaced
  versions:
  - deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "KubeadmConfig is the Schema for the kubeadmconfigs API. \n Deprecated:
          This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                      type:
                        description: Type defines the DNS add-on to be used
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: ImageRepository sets the container registry to pull
                      images from. If empty, `k8s.gcr.io` will be used by default;
                      in case of kubernetes version is a CI build (kubernetes version
                      starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                      will be used as a default for control plane components and for
                      kube-proxy, while `k8s.gcr.io` will be used for all the other
                      images.
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.version'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.services.cidrBlocks if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.pods.cidrBlocks, or to "10.96.0.0/12"
                          if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  useHyperKubeImage:
                    description: UseHyperKubeImage controls if hyperkube should be
                      used for Kubernetes components instead of their respective separate
                      images
                    type: boolean
                type: object
              diskSetup:
                description: DiskSetup specifies options for the creation of partition
                  tables and file systems on devices.
                properties:
                  filesystems:
                    description: Filesystems specifies the list of file systems to
                      setup.
                    items:
                      description: Filesystem defines the file systems to be created.
                      properties:
                        device:
                          description: Device specifies the device name
                          type: string
                        extraOpts:
                          description: ExtraOpts defined extra options to add to the
                            command for creating the file system.
                          items:
                            type: string
                          type: array
                        filesystem:
                          description: Filesystem specifies the file system type.
                          type: string
                        label:
                          description: Label specifies the file system label to be
                            used. If set to None, no label is used.
                          type: string
                        overwrite:
                          description: Overwrite defines whether or not to overwrite
                            any existing filesystem. If true, any pre-existing file
                            system will be destroyed. Use with Caution.
                          type: boolean
                        partition:
                          description: 'Partition specifies the partition to use.
                            The valid options are: "auto|any", "auto", "any", "none",
                            and <NUM>, where NUM is the actual partition number.'
                          type: string
                        replaceFS:
                          description: 'ReplaceFS is a special directive, used for
                            Microsoft Azure that instructs cloud-init to replace a
                            file system of <FS_TYPE>. NOTE: unless you define a label,
                            this requires the use of the ''any'' partition directive.'
                          type: string
                      required:
                      - device
                      - filesystem
                      - label
                      type: object
                    type: array
                  partitions:
                    description: Partitions specifies the list of the partitions to
                      setup.
                    items:
                      description: Partition defines how to create and layout a partition.
                      properties:
                        device:
                          description: Device is the name of the device.
                          type: string
                        layout:
                          description: Layout specifies the device layout. If it is
                            true, a single partition will be created for the entire
                            device. When layout is false, it means don't partition
                            or ignore existing partitioning.
                          type: boolean
                        overwrite:
                          description: Overwrite describes whether to skip checks
                            and create the partition if a partition or filesystem
                            is found on the device. Use with caution. Default is 'false'.
                          type: boolean
                        tableType:
                          description: 'TableType specifies the tupe of partition
                            table. The following are supported: ''mbr'': default and
                            setups a MS-DOS partition table ''gpt'': setups a GPT
                            partition table'
                          type: string
                      required:
                      - device
                      - layout
                      type: object
                    type: array
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    contentFrom:
                      description: ContentFrom is a referenced source of content to
                        populate the file.
                      properties:
                        secret:
                          description: Secret represents a secret that should populate
                            this file.
                          properties:
                            key:
                              description: Key is the key in the secret's data map
                                for this value.
                              type: string
                            name:
                              description: Name of the secret in the KubeadmBootstrapConfig's
                                namespace to use.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                      required:
                      - secret
                      type: object
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                type: string
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster.
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: string
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    required:
                    - advertiseAddress
                    - bindPort
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        - unsafeSkipCAVerification
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: 'TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information TODO: revisit when there
                          is defaulting from k/k'
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              mounts:
                description: Mounts specifies a list of mount points to be setup.
                items:
                  description: MountPoints defines input for generated mounts in cloud-init.
                  items:
                    type: string
                  type: array
                type: array
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              useExperimentalRetryJoin:
                description: "UseExperimentalRetryJoin replaces a basic kubeadm command
                  with a shell script with retries for joins. \n This is meant to
                  be an experimental temporary workaround on some environments where
                  joins fail due to timing (and other issues). The long term goal
                  is to add retries to kubeadm proper and use that functionality.
                  \n This will add about 40KB to userdata \n For more information,
                  refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                type: boolean
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
              verbosity:
                description: Verbosity is the number for the kubeadm log level verbosity.
                  It overrides the `--v` flag in kubeadm commands.
                format: int32
                type: integer
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig.
            properties:
              bootstrapData:
                description: "BootstrapData will be a cloud-init script for now. \n
                  Deprecated: Switch to DataSecretName."
                format: byte
                type: string
              conditions:
                description: Conditions defines current service state of the KubeadmConfig.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              failureMessage:
                description: FailureMessage will be set on non-retryable errors
                type: string
              failureReason:
                description: FailureReason will be set on non-retryable errors
                type: string
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of KubeadmConfig
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "KubeadmConfig is the Schema for the kubeadmconfigs API. \n Deprecated:
          This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: ImageRepository sets the container registry to pull
                      images from. If empty, `registry.k8s.io` will be used by default;
                      in case of kubernetes version is a CI build (kubernetes version
                      starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                      will be used as a default for control plane components and for
                      kube-proxy, while `registry.k8s.io` will be used for all the
                      other images.
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.version'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.services.cidrBlocks if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.pods.cidrBlocks, or to "10.96.0.0/12"
                          if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                type: object
              diskSetup:
                description: DiskSetup specifies options for the creation of partition
                  tables and file systems on devices.
                properties:
                  filesystems:
                    description: Filesystems specifies the list of file systems to
                      setup.
                    items:
                      description: Filesystem defines the file systems to be created.
                      properties:
                        device:
                          description: Device specifies the device name
                          type: string
                        extraOpts:
                          description: ExtraOpts defined extra options to add to the
                            command for creating the file system.
                          items:
                            type: string
                          type: array
                        filesystem:
                          description: Filesystem specifies the file system type.
                          type: string
                        label:
                          description: Label specifies the file system label to be
                            used. If set to None, no label is used.
                          type: string
                        overwrite:
                          description: Overwrite defines whether or not to overwrite
                            any existing filesystem. If true, any pre-existing file
                            system will be destroyed. Use with Caution.
                          type: boolean
                        partition:
                          description: 'Partition specifies the partition to use.
                            The valid options are: "auto|any", "auto", "any", "none",
                            and <NUM>, where NUM is the actual partition number.'
                          type: string
                        replaceFS:
                          description: 'ReplaceFS is a special directive, used for
                            Microsoft Azure that instructs cloud-init to replace a
                            file system of <FS_TYPE>. NOTE: unless you define a label,
                            this requires the use of the ''any'' partition directive.'
                          type: string
                      required:
                      - device
                      - filesystem
                      - label
                      type: object
                    type: array
                  partitions:
                    description: Partitions specifies the list of the partitions to
                      setup.
                    items:
                      description: Partition defines how to create and layout a partition.
                      properties:
                        device:
                          description: Device is the name of the device.
                          type: string
                        layout:
                          description: Layout specifies the device layout. If it is
                            true, a single partition will be created for the entire
                            device. When layout is false, it means don't partition
                            or ignore existing partitioning.
                          type: boolean
                        overwrite:
                          description: Overwrite describes whether to skip checks
                            and create the partition if a partition or filesystem
                            is found on the device. Use with caution. Default is 'false'.
                          type: boolean
                        tableType:
                          description: 'TableType specifies the tupe of partition
                            table. The following are supported: ''mbr'': default and
                            setups a MS-DOS partition table ''gpt'': setups a GPT
                            partition table'
                          type: string
                      required:
                      - device
                      - layout
                      type: object
                    type: array
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    contentFrom:
                      description: ContentFrom is a referenced source of content to
                        populate the file.
                      properties:
                        secret:
                          description: Secret represents a secret that should populate
                            this file.
                          properties:
                            key:
                              description: Key is the key in the secret's data map
                                for this value.
                              type: string
                            name:
                              description: Name of the secret in the KubeadmBootstrapConfig's
                                namespace to use.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                      required:
                      - secret
                      type: object
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                type: string
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster.
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: string
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      ignorePreflightErrors:
                        description: IgnorePreflightErrors provides a slice of pre-flight
                          errors to be ignored when the current node is registered.
                        items:
                          type: string
                        type: array
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      ignorePreflightErrors:
                        description: IgnorePreflightErrors provides a slice of pre-flight
                          errors to be ignored when the current node is registered.
                        items:
                          type: string
                        type: array
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              mounts:
                description: Mounts specifies a list of mount points to be setup.
                items:
                  description: MountPoints defines input for generated mounts in cloud-init.
                  items:
                    type: string
                  type: array
                type: array
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              useExperimentalRetryJoin:
                description: "UseExperimentalRetryJoin replaces a basic kubeadm command
                  with a shell script with retries for joins. \n This is meant to
                  be an experimental temporary workaround on some environments where
                  joins fail due to timing (and other issues). The long term goal
                  is to add retries to kubeadm proper and use that functionality.
                  \n This will add about 40KB to userdata \n For more information,
                  refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                type: boolean
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
              verbosity:
                description: Verbosity is the number for the kubeadm log level verbosity.
                  It overrides the `--v` flag in kubeadm commands.
                format: int32
                type: integer
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig.
            properties:
              conditions:
                description: Conditions defines current service state of the KubeadmConfig.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              failureMessage:
                description: FailureMessage will be set on non-retryable errors
                type: string
              failureReason:
                description: FailureReason will be set on non-retryable errors
                type: string
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .metadata.labels['cluster\.x-k8s\.io/cluster-name']
      name: Cluster
      type: string
    - description: Time duration since creation of KubeadmConfig
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: KubeadmConfig is the Schema for the kubeadmconfigs API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: 'ImageRepository sets the container registry to pull
                      images from. * If not set, the default registry of kubeadm will
                      be used, i.e. * registry.k8s.io (new registry): >= v1.22.17,
                      >= v1.23.15, >= v1.24.9, >= v1.25.0 * k8s.gcr.io (old registry):
                      all older versions Please note that when imageRepository is
                      not set we don''t allow upgrades to versions >= v1.22.0 which
                      use the old registry (k8s.gcr.io). Please use a newer patch
                      version with the new registry instead (i.e. >= v1.22.17, >=
                      v1.23.15, >= v1.24.9, >= v1.25.0). * If the version is a CI
                      build (kubernetes version starts with `ci/` or `ci-cross/`)
                      `gcr.io/k8s-staging-ci-images` will be used as a default for
                      control plane components and for kube-proxy, while `registry.k8s.io`
                      will be used for all the other images.'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.version'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.services.cidrBlocks if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.pods.cidrBlocks, or to "10.96.0.0/12"
                          if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                type: object
              diskSetup:
                description: DiskSetup specifies options for the creation of partition
                  tables and file systems on devices.
                properties:
                  filesystems:
                    description: Filesystems specifies the list of file systems to
                      setup.
                    items:
                      description: Filesystem defines the file systems to be created.
                      properties:
                        device:
                          description: Device specifies the device name
                          type: string
                        extraOpts:
                          description: ExtraOpts defined extra options to add to the
                            command for creating the file system.
                          items:
                            type: string
                          type: array
                        filesystem:
                          description: Filesystem specifies the file system type.
                          type: string
                        label:
                          description: Label specifies the file system label to be
                            used. If set to None, no label is used.
                          type: string
                        overwrite:
                          description: Overwrite defines whether or not to overwrite
                            any existing filesystem. If true, any pre-existing file
                            system will be destroyed. Use with Caution.
                          type: boolean
                        partition:
                          description: 'Partition specifies the partition to use.
                            The valid options are: "auto|any", "auto", "any", "none",
                            and <NUM>, where NUM is the actual partition number.'
                          type: string
                        replaceFS:
                          description: 'ReplaceFS is a special directive, used for
                            Microsoft Azure that instructs cloud-init to replace a
                            file system of <FS_TYPE>. NOTE: unless you define a label,
                            this requires the use of the ''any'' partition directive.'
                          type: string
                      required:
                      - device
                      - filesystem
                      - label
                      type: object
                    type: array
                  partitions:
                    description: Partitions specifies the list of the partitions to
                      setup.
                    items:
                      description: Partition defines how to create and layout a partition.
                      properties:
                        device:
                          description: Device is the name of the device.
                          type: string
                        layout:
                          description: Layout specifies the device layout. If it is
                            true, a single partition will be created for the entire
                            device. When layout is false, it means don't partition
                            or ignore existing partitioning.
                          type: boolean
                        overwrite:
                          description: Overwrite describes whether to skip checks
                            and create the partition if a partition or filesystem
                            is found on the device. Use with caution. Default is 'false'.
                          type: boolean
                        tableType:
                          description: 'TableType specifies the tupe of partition
                            table. The following are supported: ''mbr'': default and
                            setups a MS-DOS partition table ''gpt'': setups a GPT
                            partition table'
                          type: string
                      required:
                      - device
                      - layout
                      type: object
                    type: array
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    append:
                      description: Append specifies whether to append Content to existing
                        file if Path exists.
                      type: boolean
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    contentFrom:
                      description: ContentFrom is a referenced source of content to
                        populate the file.
                      properties:
                        secret:
                          description: Secret represents a secret that should populate
                            this file.
                          properties:
                            key:
                              description: Key is the key in the secret's data map
                                for this value.
                              type: string
                            name:
                              description: Name of the secret in the KubeadmBootstrapConfig's
                                namespace to use.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                      required:
                      - secret
                      type: object
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                - ignition
                type: string
              ignition:
                description: Ignition contains Ignition specific configuration.
                properties:
                  containerLinuxConfig:
                    description: ContainerLinuxConfig contains CLC specific configuration.
                    properties:
                      additionalConfig:
                        description: "AdditionalConfig contains additional configuration
                          to be merged with the Ignition configuration generated by
                          the bootstrapper controller. More info: https://coreos.github.io/ignition/operator-notes/#config-merging
                          \n The data format is documented here: https://kinvolk.io/docs/flatcar-container-linux/latest/provisioning/cl-config/"
                        type: string
                      strict:
                        description: Strict controls if AdditionalConfig should be
                          strictly parsed. If so, warnings are treated as errors.
                        type: boolean
                    type: object
                type: object
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster.
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: string
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      ignorePreflightErrors:
                        description: IgnorePreflightErrors provides a slice of pre-flight
                          errors to be ignored when the current node is registered.
                        items:
                          type: string
                        type: array
                      imagePullPolicy:
                        description: ImagePullPolicy specifies the policy for image
                          pulling during kubeadm "init" and "join" operations. The
                          value of this field must be one of "Always", "IfNotPresent"
                          or "Never". Defaults to "IfNotPresent". This can be used
                          only with Kubernetes version equal to 1.22 and later.
                        enum:
                        - Always
                        - IfNotPresent
                        - Never
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: []` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                  patches:
                    description: Patches contains options related to applying patches
                      to components deployed by kubeadm during "kubeadm init". The
                      minimum kubernetes version needed to support Patches is v1.22
                    properties:
                      directory:
                        description: Directory is a path to a directory that contains
                          files named "target[suffix][+patchtype].extension". For
                          example, "kube-apiserver0+merge.yaml" or just "etcd.json".
                          "target" can be one of "kube-apiserver", "kube-controller-manager",
                          "kube-scheduler", "etcd". "patchtype" can be one of "strategic"
                          "merge" or "json" and they match the patch formats supported
                          by kubectl. The default "patchtype" is "strategic". "extension"
                          must be either "json" or "yaml". "suffix" is an optional
                          string that can be used to determine which patches are applied
                          first alpha-numerically. These files can be written into
                          the target directory via KubeadmConfig.Files which specifies
                          additional files to be created on the machine, either with
                          content inline or by referencing a secret.
                        type: string
                    type: object
                  skipPhases:
                    description: SkipPhases is a list of phases to skip during command
                      execution. The list of phases can be obtained with the "kubeadm
                      init --help" command. This option takes effect only on Kubernetes
                      >=1.22.0.
                    items:
                      type: string
                    type: array
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      ignorePreflightErrors:
                        description: IgnorePreflightErrors provides a slice of pre-flight
                          errors to be ignored when the current node is registered.
                        items:
                          type: string
                        type: array
                      imagePullPolicy:
                        description: ImagePullPolicy specifies the policy for image
                          pulling during kubeadm "init" and "join" operations. The
                          value of this field must be one of "Always", "IfNotPresent"
                          or "Never". Defaults to "IfNotPresent". This can be used
                          only with Kubernetes version equal to 1.22 and later.
                        enum:
                        - Always
                        - IfNotPresent
                        - Never
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: []` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                  patches:
                    description: Patches contains options related to applying patches
                      to components deployed by kubeadm during "kubeadm join". The
                      minimum kubernetes version needed to support Patches is v1.22
                    properties:
                      directory:
                        description: Directory is a path to a directory that contains
                          files named "target[suffix][+patchtype].extension". For
                          example, "kube-apiserver0+merge.yaml" or just "etcd.json".
                          "target" can be one of "kube-apiserver", "kube-controller-manager",
                          "kube-scheduler", "etcd". "patchtype" can be one of "strategic"
                          "merge" or "json" and they match the patch formats supported
                          by kubectl. The default "patchtype" is "strategic". "extension"
                          must be either "json" or "yaml". "suffix" is an optional
                          string that can be used to determine which patches are applied
                          first alpha-numerically. These files can be written into
                          the target directory via KubeadmConfig.Files which specifies
                          additional files to be created on the machine, either with
                          content inline or by referencing a secret.
                        type: string
                    type: object
                  skipPhases:
                    description: SkipPhases is a list of phases to skip during command
                      execution. The list of phases can be obtained with the "kubeadm
                      init --help" command. This option takes effect only on Kubernetes
                      >=1.22.0.
                    items:
                      type: string
                    type: array
                type: object
              mounts:
                description: Mounts specifies a list of mount points to be setup.
                items:
                  description: MountPoints defines input for generated mounts in cloud-init.
                  items:
                    type: string
                  type: array
                type: array
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              useExperimentalRetryJoin:
                description: "UseExperimentalRetryJoin replaces a basic kubeadm command
                  with a shell script with retries for joins. \n This is meant to
                  be an experimental temporary workaround on some environments where
                  joins fail due to timing (and other issues). The long term goal
                  is to add retries to kubeadm proper and use that functionality.
                  \n This will add about 40KB to userdata \n For more information,
                  refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055.
                  \n Deprecated: This experimental fix is no longer needed and this
                  field will be removed in a future release. When removing also remove
                  from staticcheck exclude-rules for SA1019 in golangci.yml"
                type: boolean
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    passwdFrom:
                      description: PasswdFrom is a referenced source of passwd to
                        populate the passwd.
                      properties:
                        secret:
                          description: Secret represents a secret that should populate
                            this password.
                          properties:
                            key:
                              description: Key is the key in the secret's data map
                                for this value.
                              type: string
                            name:
                              description: Name of the secret in the KubeadmBootstrapConfig's
                                namespace to use.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                      required:
                      - secret
                      type: object
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
              verbosity:
                description: Verbosity is the number for the kubeadm log level verbosity.
                  It overrides the `--v` flag in kubeadm commands.
                format: int32
                type: integer
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig.
            properties:
              conditions:
                description: Conditions defines current service state of the KubeadmConfig.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              failureMessage:
                description: FailureMessage will be set on non-retryable errors
                type: string
              failureReason:
                description: FailureReason will be set on non-retryable errors
                type: string
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    cluster.x-k8s.io/v1alpha3: v1alpha3
    cluster.x-k8s.io/v1alpha4: v1alpha4
    cluster.x-k8s.io/v1beta1: v1beta1
    clusterctl.cluster.x-k8s.io: ""
  name: kubeadmconfigtemplates.bootstrap.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-bootstrap-webhook-service
          namespace: capi-kubeadm-bootstrap-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfigTemplate
    listKind: KubeadmConfigTemplateList
    plural: kubeadmconfigtemplates
    singular: kubeadmconfigtemplate
  scope: Namespaced
  versions:
  - deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate.
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure.
                properties:
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              type:
                                description: Type defines the DNS add-on to be used
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. If empty, `k8s.gcr.io` will be
                              used by default; in case of kubernetes version is a
                              CI build (kubernetes version starts with `ci/` or `ci-cross/`)
                              `gcr.io/k8s-staging-ci-images` will be used as a default
                              for control plane components and for kube-proxy, while
                              `k8s.gcr.io` will be used for all the other images.
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.version'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to a comma-delimited
                                  string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to a comma-delimited string of
                                  the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          useHyperKubeImage:
                            description: UseHyperKubeImage controls if hyperkube should
                              be used for Kubernetes components instead of their respective
                              separate images
                            type: boolean
                        type: object
                      diskSetup:
                        description: DiskSetup specifies options for the creation
                          of partition tables and file systems on devices.
                        properties:
                          filesystems:
                            description: Filesystems specifies the list of file systems
                              to setup.
                            items:
                              description: Filesystem defines the file systems to
                                be created.
                              properties:
                                device:
                                  description: Device specifies the device name
                                  type: string
                                extraOpts:
                                  description: ExtraOpts defined extra options to
                                    add to the command for creating the file system.
                                  items:
                                    type: string
                                  type: array
                                filesystem:
                                  description: Filesystem specifies the file system
                                    type.
                                  type: string
                                label:
                                  description: Label specifies the file system label
                                    to be used. If set to None, no label is used.
                                  type: string
                                overwrite:
                                  description: Overwrite defines whether or not to
                                    overwrite any existing filesystem. If true, any
                                    pre-existing file system will be destroyed. Use
                                    with Caution.
                                  type: boolean
                                partition:
                                  description: 'Partition specifies the partition
                                    to use. The valid options are: "auto|any", "auto",
                                    "any", "none", and <NUM>, where NUM is the actual
                                    partition number.'
                                  type: string
                                replaceFS:
                                  description: 'ReplaceFS is a special directive,
                                    used for Microsoft Azure that instructs cloud-init
                                    to replace a file system of <FS_TYPE>. NOTE: unless
                                    you define a label, this requires the use of the
                                    ''any'' partition directive.'
                                  type: string
                              required:
                              - device
                              - filesystem
                              - label
                              type: object
                            type: array
                          partitions:
                            description: Partitions specifies the list of the partitions
                              to setup.
                            items:
                              description: Partition defines how to create and layout
                                a partition.
                              properties:
                                device:
                                  description: Device is the name of the device.
                                  type: string
                                layout:
                                  description: Layout specifies the device layout.
                                    If it is true, a single partition will be created
                                    for the entire device. When layout is false, it
                                    means don't partition or ignore existing partitioning.
                                  type: boolean
                                overwrite:
                                  description: Overwrite describes whether to skip
                                    checks and create the partition if a partition
                                    or filesystem is found on the device. Use with
                                    caution. Default is 'false'.
                                  type: boolean
                                tableType:
                                  description: 'TableType specifies the tupe of partition
                                    table. The following are supported: ''mbr'': default
                                    and setups a MS-DOS partition table ''gpt'': setups
                                    a GPT partition table'
                                  type: string
                              required:
                              - device
                              - layout
                              type: object
                            type: array
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            contentFrom:
                              description: ContentFrom is a referenced source of content
                                to populate the file.
                              properties:
                                secret:
                                  description: Secret represents a secret that should
                                    populate this file.
                                  properties:
                                    key:
                                      description: Key is the key in the secret's
                                        data map for this value.
                                      type: string
                                    name:
                                      description: Name of the secret in the KubeadmBootstrapConfig's
                                        namespace to use.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                              required:
                              - secret
                              type: object
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        type: string
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster.
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: string
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: The taint value corresponding to
                                        the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                required:
                                - advertiseAddress
                                - bindPort
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                - unsafeSkipCAVerification
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: 'TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information TODO: revisit
                                  when there is defaulting from k/k'
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: The taint value corresponding to
                                        the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      mounts:
                        description: Mounts specifies a list of mount points to be
                          setup.
                        items:
                          description: MountPoints defines input for generated mounts
                            in cloud-init.
                          items:
                            type: string
                          type: array
                        type: array
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      useExperimentalRetryJoin:
                        description: "UseExperimentalRetryJoin replaces a basic kubeadm
                          command with a shell script with retries for joins. \n This
                          is meant to be an experimental temporary workaround on some
                          environments where joins fail due to timing (and other issues).
                          The long term goal is to add retries to kubeadm proper and
                          use that functionality. \n This will add about 40KB to userdata
                          \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                        type: boolean
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      verbosity:
                        description: Verbosity is the number for the kubeadm log level
                          verbosity. It overrides the `--v` flag in kubeadm commands.
                        format: int32
                        type: integer
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: false
  - additionalPrinterColumns:
    - description: Time duration since creation of KubeadmConfigTemplate
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate.
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure.
                properties:
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. If empty, `registry.k8s.io` will
                              be used by default; in case of kubernetes version is
                              a CI build (kubernetes version starts with `ci/` or
                              `ci-cross/`) `gcr.io/k8s-staging-ci-images` will be
                              used as a default for control plane components and for
                              kube-proxy, while `registry.k8s.io` will be used for
                              all the other images.
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.version'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to a comma-delimited
                                  string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to a comma-delimited string of
                                  the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                        type: object
                      diskSetup:
                        description: DiskSetup specifies options for the creation
                          of partition tables and file systems on devices.
                        properties:
                          filesystems:
                            description: Filesystems specifies the list of file systems
                              to setup.
                            items:
                              description: Filesystem defines the file systems to
                                be created.
                              properties:
                                device:
                                  description: Device specifies the device name
                                  type: string
                                extraOpts:
                                  description: ExtraOpts defined extra options to
                                    add to the command for creating the file system.
                                  items:
                                    type: string
                                  type: array
                                filesystem:
                                  description: Filesystem specifies the file system
                                    type.
                                  type: string
                                label:
                                  description: Label specifies the file system label
                                    to be used. If set to None, no label is used.
                                  type: string
                                overwrite:
                                  description: Overwrite defines whether or not to
                                    overwrite any existing filesystem. If true, any
                                    pre-existing file system will be destroyed. Use
                                    with Caution.
                                  type: boolean
                                partition:
                                  description: 'Partition specifies the partition
                                    to use. The valid options are: "auto|any", "auto",
                                    "any", "none", and <NUM>, where NUM is the actual
                                    partition number.'
                                  type: string
                                replaceFS:
                                  description: 'ReplaceFS is a special directive,
                                    used for Microsoft Azure that instructs cloud-init
                                    to replace a file system of <FS_TYPE>. NOTE: unless
                                    you define a label, this requires the use of the
                                    ''any'' partition directive.'
                                  type: string
                              required:
                              - device
                              - filesystem
                              - label
                              type: object
                            type: array
                          partitions:
                            description: Partitions specifies the list of the partitions
                              to setup.
                            items:
                              description: Partition defines how to create and layout
                                a partition.
                              properties:
                                device:
                                  description: Device is the name of the device.
                                  type: string
                                layout:
                                  description: Layout specifies the device layout.
                                    If it is true, a single partition will be created
                                    for the entire device. When layout is false, it
                                    means don't partition or ignore existing partitioning.
                                  type: boolean
                                overwrite:
                                  description: Overwrite describes whether to skip
                                    checks and create the partition if a partition
                                    or filesystem is found on the device. Use with
                                    caution. Default is 'false'.
                                  type: boolean
                                tableType:
                                  description: 'TableType specifies the tupe of partition
                                    table. The following are supported: ''mbr'': default
                                    and setups a MS-DOS partition table ''gpt'': setups
                                    a GPT partition table'
                                  type: string
                              required:
                              - device
                              - layout
                              type: object
                            type: array
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            contentFrom:
                              description: ContentFrom is a referenced source of content
                                to populate the file.
                              properties:
                                secret:
                                  description: Secret represents a secret that should
                                    populate this file.
                                  properties:
                                    key:
                                      description: Key is the key in the secret's
                                        data map for this value.
                                      type: string
                                    name:
                                      description: Name of the secret in the KubeadmBootstrapConfig's
                                        namespace to use.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                              required:
                              - secret
                              type: object
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        type: string
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster.
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: string
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              ignorePreflightErrors:
                                description: IgnorePreflightErrors provides a slice
                                  of pre-flight errors to be ignored when the current
                                  node is registered.
                                items:
                                  type: string
                                type: array
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: The taint value corresponding to
                                        the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              ignorePreflightErrors:
                                description: IgnorePreflightErrors provides a slice
                                  of pre-flight errors to be ignored when the current
                                  node is registered.
                                items:
                                  type: string
                                type: array
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: The taint value corresponding to
                                        the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      mounts:
                        description: Mounts specifies a list of mount points to be
                          setup.
                        items:
                          description: MountPoints defines input for generated mounts
                            in cloud-init.
                          items:
                            type: string
                          type: array
                        type: array
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      useExperimentalRetryJoin:
                        description: "UseExperimentalRetryJoin replaces a basic kubeadm
                          command with a shell script with retries for joins. \n This
                          is meant to be an experimental temporary workaround on some
                          environments where joins fail due to timing (and other issues).
                          The long term goal is to add retries to kubeadm proper and
                          use that functionality. \n This will add about 40KB to userdata
                          \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                        type: boolean
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      verbosity:
                        description: Verbosity is the number for the kubeadm log level
                          verbosity. It overrides the `--v` flag in kubeadm commands.
                        format: int32
                        type: integer
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: false
    subresources: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of KubeadmConfigTemplate
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate.
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: 'ImageRepository sets the container registry
                              to pull images from. * If not set, the default registry
                              of kubeadm will be used, i.e. * registry.k8s.io (new
                              registry): >= v1.22.17, >= v1.23.15, >= v1.24.9, >=
                              v1.25.0 * k8s.gcr.io (old registry): all older versions
                              Please note that when imageRepository is not set we
                              don''t allow upgrades to versions >= v1.22.0 which use
                              the old registry (k8s.gcr.io). Please use a newer patch
                              version with the new registry instead (i.e. >= v1.22.17,
                              >= v1.23.15, >= v1.24.9, >= v1.25.0). * If the version
                              is a CI build (kubernetes version starts with `ci/`
                              or `ci-cross/`) `gcr.io/k8s-staging-ci-images` will
                              be used as a default for control plane components and
                              for kube-proxy, while `registry.k8s.io` will be used
                              for all the other images.'
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.version'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to a comma-delimited
                                  string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to a comma-delimited string of
                                  the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                        type: object
                      diskSetup:
                        description: DiskSetup specifies options for the creation
                          of partition tables and file systems on devices.
                        properties:
                          filesystems:
                            description: Filesystems specifies the list of file systems
                              to setup.
                            items:
                              description: Filesystem defines the file systems to
                                be created.
                              properties:
                                device:
                                  description: Device specifies the device name
                                  type: string
                                extraOpts:
                                  description: ExtraOpts defined extra options to
                                    add to the command for creating the file system.
                                  items:
                                    type: string
                                  type: array
                                filesystem:
                                  description: Filesystem specifies the file system
                                    type.
                                  type: string
                                label:
                                  description: Label specifies the file system label
                                    to be used. If set to None, no label is used.
                                  type: string
                                overwrite:
                                  description: Overwrite defines whether or not to
                                    overwrite any existing filesystem. If true, any
                                    pre-existing file system will be destroyed. Use
                                    with Caution.
                                  type: boolean
                                partition:
                                  description: 'Partition specifies the partition
                                    to use. The valid options are: "auto|any", "auto",
                                    "any", "none", and <NUM>, where NUM is the actual
                                    partition number.'
                                  type: string
                                replaceFS:
                                  description: 'ReplaceFS is a special directive,
                                    used for Microsoft Azure that instructs cloud-init
                                    to replace a file system of <FS_TYPE>. NOTE: unless
                                    you define a label, this requires the use of the
                                    ''any'' partition directive.'
                                  type: string
                              required:
                              - device
                              - filesystem
                              - label
                              type: object
                            type: array
                          partitions:
                            description: Partitions specifies the list of the partitions
                              to setup.
                            items:
                              description: Partition defines how to create and layout
                                a partition.
                              properties:
                                device:
                                  description: Device is the name of the device.
                                  type: string
                                layout:
                                  description: Layout specifies the device layout.
                                    If it is true, a single partition will be created
                                    for the entire device. When layout is false, it
                                    means don't partition or ignore existing partitioning.
                                  type: boolean
                                overwrite:
                                  description: Overwrite describes whether to skip
                                    checks and create the partition if a partition
                                    or filesystem is found on the device. Use with
                                    caution. Default is 'false'.
                                  type: boolean
                                tableType:
                                  description: 'TableType specifies the tupe of partition
                                    table. The following are supported: ''mbr'': default
                                    and setups a MS-DOS partition table ''gpt'': setups
                                    a GPT partition table'
                                  type: string
                              required:
                              - device
                              - layout
                              type: object
                            type: array
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            append:
                              description: Append specifies whether to append Content
                                to existing file if Path exists.
                              type: boolean
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            contentFrom:
                              description: ContentFrom is a referenced source of content
                                to populate the file.
                              properties:
                                secret:
                                  description: Secret represents a secret that should
                                    populate this file.
                                  properties:
                                    key:
                                      description: Key is the key in the secret's
                                        data map for this value.
                                      type: string
                                    name:
                                      description: Name of the secret in the KubeadmBootstrapConfig's
                                        namespace to use.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                              required:
                              - secret
                              type: object
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        - ignition
                        type: string
                      ignition:
                        description: Ignition contains Ignition specific configuration.
                        properties:
                          containerLinuxConfig:
                            description: ContainerLinuxConfig contains CLC specific
                              configuration.
                            properties:
                              additionalConfig:
                                description: "AdditionalConfig contains additional
                                  configuration to be merged with the Ignition configuration
                                  generated by the bootstrapper controller. More info:
                                  https://coreos.github.io/ignition/operator-notes/#config-merging
                                  \n The data format is documented here: https://kinvolk.io/docs/flatcar-container-linux/latest/provisioning/cl-config/"
                                type: string
                              strict:
                                description: Strict controls if AdditionalConfig should
                                  be strictly parsed. If so, warnings are treated
                                  as errors.
                                type: boolean
                            type: object
                        type: object
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster.
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: string
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              ignorePreflightErrors:
                                description: IgnorePreflightErrors provides a slice
                                  of pre-flight errors to be ignored when the current
                                  node is registered.
                                items:
                                  type: string
                                type: array
                              imagePullPolicy:
                                description: ImagePullPolicy specifies the policy
                                  for image pulling during kubeadm "init" and "join"
                                  operations. The value of this field must be one
                                  of "Always", "IfNotPresent" or "Never". Defaults
                                  to "IfNotPresent". This can be used only with Kubernetes
                                  version equal to 1.22 and later.
                                enum:
                                - Always
                                - IfNotPresent
                                - Never
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  []` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: The taint value corresponding to
                                        the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                          patches:
                            description: Patches contains options related to applying
                              patches to components deployed by kubeadm during "kubeadm
                              init". The minimum kubernetes version needed to support
                              Patches is v1.22
                            properties:
                              directory:
                                description: Directory is a path to a directory that
                                  contains files named "target[suffix][+patchtype].extension".
                                  For example, "kube-apiserver0+merge.yaml" or just
                                  "etcd.json". "target" can be one of "kube-apiserver",
                                  "kube-controller-manager", "kube-scheduler", "etcd".
                                  "patchtype" can be one of "strategic" "merge" or
                                  "json" and they match the patch formats supported
                                  by kubectl. The default "patchtype" is "strategic".
                                  "extension" must be either "json" or "yaml". "suffix"
                                  is an optional string that can be used to determine
                                  which patches are applied first alpha-numerically.
                                  These files can be written into the target directory
                                  via KubeadmConfig.Files which specifies additional
                                  files to be created on the machine, either with
                                  content inline or by referencing a secret.
                                type: string
                            type: object
                          skipPhases:
                            description: SkipPhases is a list of phases to skip during
                              command execution. The list of phases can be obtained
                              with the "kubeadm init --help" command. This option
                              takes effect only on Kubernetes >=1.22.0.
                            items:
                              type: string
                            type: array
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              ignorePreflightErrors:
                                description: IgnorePreflightErrors provides a slice
                                  of pre-flight errors to be ignored when the current
                                  node is registered.
                                items:
                                  type: string
                                type: array
                              imagePullPolicy:
                                description: ImagePullPolicy specifies the policy
                                  for image pulling during kubeadm "init" and "join"
                                  operations. The value of this field must be one
                                  of "Always", "IfNotPresent" or "Never". Defaults
                                  to "IfNotPresent". This can be used only with Kubernetes
                                  version equal to 1.22 and later.
                                enum:
                                - Always
                                - IfNotPresent
                                - Never
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  []` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: The taint value corresponding to
                                        the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                          patches:
                            description: Patches contains options related to applying
                              patches to components deployed by kubeadm during "kubeadm
                              join". The minimum kubernetes version needed to support
                              Patches is v1.22
                            properties:
                              directory:
                                description: Directory is a path to a directory that
                                  contains files named "target[suffix][+patchtype].extension".
                                  For example, "kube-apiserver0+merge.yaml" or just
                                  "etcd.json". "target" can be one of "kube-apiserver",
                                  "kube-controller-manager", "kube-scheduler", "etcd".
                                  "patchtype" can be one of "strategic" "merge" or
                                  "json" and they match the patch formats supported
                                  by kubectl. The default "patchtype" is "strategic".
                                  "extension" must be either "json" or "yaml". "suffix"
                                  is an optional string that can be used to determine
                                  which patches are applied first alpha-numerically.
                                  These files can be written into the target directory
                                  via KubeadmConfig.Files which specifies additional
                                  files to be created on the machine, either with
                                  content inline or by referencing a secret.
                                type: string
                            type: object
                          skipPhases:
                            description: SkipPhases is a list of phases to skip during
                              command execution. The list of phases can be obtained
                              with the "kubeadm init --help" command. This option
                              takes effect only on Kubernetes >=1.22.0.
                            items:
                              type: string
                            type: array
                        type: object
                      mounts:
                        description: Mounts specifies a list of mount points to be
                          setup.
                        items:
                          description: MountPoints defines input for generated mounts
                            in cloud-init.
                          items:
                            type: string
                          type: array
                        type: array
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      useExperimentalRetryJoin:
                        description: "UseExperimentalRetryJoin replaces a basic kubeadm
                          command with a shell script with retries for joins. \n This
                          is meant to be an experimental temporary workaround on some
                          environments where joins fail due to timing (and other issues).
                          The long term goal is to add retries to kubeadm proper and
                          use that functionality. \n This will add about 40KB to userdata
                          \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055.
                          \n Deprecated: This experimental fix is no longer needed
                          and this field will be removed in a future release. When
                          removing also remove from staticcheck exclude-rules for
                          SA1019 in golangci.yml"
                        type: boolean
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            passwdFrom:
                              description: PasswdFrom is a referenced source of passwd
                                to populate the passwd.
                              properties:
                                secret:
                                  description: Secret represents a secret that should
                                    populate this password.
                                  properties:
                                    key:
                                      description: Key is the key in the secret's
                                        data map for this value.
                                      type: string
                                    name:
                                      description: Name of the secret in the KubeadmBootstrapConfig's
                                        namespace to use.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                              required:
                              - secret
                              type: object
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      verbosity:
                        description: Verbosity is the number for the kubeadm log level
                          verbosity. It overrides the `--v` flag in kubeadm commands.
                        format: int32
                        type: integer
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    cluster.x-k8s.io/v1alpha3: v1alpha3
    cluster.x-k8s.io/v1alpha4: v1alpha4
    cluster.x-k8s.io/v1beta1: v1beta1
    clusterctl.cluster.x-k8s.io: ""
  name: kubeadmcontrolplanes.controlplane.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-control-plane-webhook-service
          namespace: capi-kubeadm-control-plane-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: controlplane.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmControlPlane
    listKind: KubeadmControlPlaneList
    plural: kubeadmcontrolplanes
    shortNames:
    - kcp
    singular: kubeadmcontrolplane
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: This denotes whether or not the control plane has the uploaded
        kubeadm-config configmap
      jsonPath: .status.initialized
      name: Initialized
      type: boolean
    - description: KubeadmControlPlane API Server is ready to receive requests
      jsonPath: .status.ready
      name: API Server Available
      type: boolean
    - description: Kubernetes version associated with this control plane
      jsonPath: .spec.version
      name: Version
      type: string
    - description: Total number of non-terminated machines targeted by this control
        plane
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of fully running and ready control plane machines
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this control
        plane that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this control plane
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "KubeadmControlPlane is the Schema for the KubeadmControlPlane
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneSpec defines the desired state of KubeadmControlPlane.
            properties:
              infrastructureTemplate:
                description: InfrastructureTemplate is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              kubeadmConfigSpec:
                description: KubeadmConfigSpec is a KubeadmConfigSpec to use for initializing
                  and joining machines to the control plane.
                properties:
                  clusterConfiguration:
                    description: ClusterConfiguration along with InitConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiServer:
                        description: APIServer contains extra settings for the API
                          server control plane component
                        properties:
                          certSANs:
                            description: CertSANs sets extra Subject Alternative Names
                              for the API Server signing cert.
                            items:
                              type: string
                            type: array
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                          timeoutForControlPlane:
                            description: TimeoutForControlPlane controls the timeout
                              that we use for API server to appear
                            type: string
                        type: object
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      certificatesDir:
                        description: 'CertificatesDir specifies where to store or
                          look for all required certificates. NB: if not provided,
                          this will default to `/etc/kubernetes/pki`'
                        type: string
                      clusterName:
                        description: The cluster name
                        type: string
                      controlPlaneEndpoint:
                        description: 'ControlPlaneEndpoint sets a stable IP address
                          or DNS name for the control plane; it can be a valid IP
                          address or a RFC-1123 DNS subdomain, both with optional
                          TCP port. In case the ControlPlaneEndpoint is not specified,
                          the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint
                          is specified but without a TCP port, the BindPort is used.
                          Possible usages are: e.g. In a cluster with more than one
                          control plane instances, this field should be assigned the
                          address of the external load balancer in front of the control
                          plane instances. e.g.  in environments with enforced node
                          recycling, the ControlPlaneEndpoint could be used for assigning
                          a stable DNS to the control plane. NB: This value defaults
                          to the first value in the Cluster object status.apiEndpoints
                          array.'
                        type: string
                      controllerManager:
                        description: ControllerManager contains extra settings for
                          the controller manager control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      dns:
                        description: DNS defines the options for the DNS add-on installed
                          in the cluster.
                        properties:
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          type:
                            description: Type defines the DNS add-on to be used
                            type: string
                        type: object
                      etcd:
                        description: 'Etcd holds configuration for etcd. NB: This
                          value defaults to a Local (stacked) etcd'
                        properties:
                          external:
                            description: External describes how to connect to an external
                              etcd cluster Local and External are mutually exclusive
                            properties:
                              caFile:
                                description: CAFile is an SSL Certificate Authority
                                  file used to secure etcd communication. Required
                                  if using a TLS connection.
                                type: string
                              certFile:
                                description: CertFile is an SSL certification file
                                  used to secure etcd communication. Required if using
                                  a TLS connection.
                                type: string
                              endpoints:
                                description: Endpoints of etcd members. Required for
                                  ExternalEtcd.
                                items:
                                  type: string
                                type: array
                              keyFile:
                                description: KeyFile is an SSL key file used to secure
                                  etcd communication. Required if using a TLS connection.
                                type: string
                            required:
                            - caFile
                            - certFile
                            - endpoints
                            - keyFile
                            type: object
                          local:
                            description: Local provides configuration knobs for configuring
                              the local etcd instance Local and External are mutually
                              exclusive
                            properties:
                              dataDir:
                                description: DataDir is the directory etcd will place
                                  its data. Defaults to "/var/lib/etcd".
                                type: string
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: ExtraArgs are extra arguments provided
                                  to the etcd binary when run inside a static pod.
                                type: object
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              peerCertSANs:
                                description: PeerCertSANs sets extra Subject Alternative
                                  Names for the etcd peer signing cert.
                                items:
                                  type: string
                                type: array
                              serverCertSANs:
                                description: ServerCertSANs sets extra Subject Alternative
                                  Names for the etcd server signing cert.
                                items:
                                  type: string
                                type: array
                            type: object
                        type: object
                      featureGates:
                        additionalProperties:
                          type: boolean
                        description: FeatureGates enabled by the user.
                        type: object
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. If empty, `k8s.gcr.io` will be used by
                          default; in case of kubernetes version is a CI build (kubernetes
                          version starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                          will be used as a default for control plane components and
                          for kube-proxy, while `k8s.gcr.io` will be used for all
                          the other images.
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      kubernetesVersion:
                        description: 'KubernetesVersion is the target version of the
                          control plane. NB: This value defaults to the Machine object
                          spec.version'
                        type: string
                      networking:
                        description: 'Networking holds configuration for the networking
                          topology of the cluster. NB: This value defaults to the
                          Cluster object spec.clusterNetwork.'
                        properties:
                          dnsDomain:
                            description: DNSDomain is the dns domain used by k8s services.
                              Defaults to "cluster.local".
                            type: string
                          podSubnet:
                            description: PodSubnet is the subnet used by pods. If
                              unset, the API server will not allocate CIDR ranges
                              for every node. Defaults to a comma-delimited string
                              of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                              if that is set
                            type: string
                          serviceSubnet:
                            description: ServiceSubnet is the subnet used by k8s services.
                              Defaults to a comma-delimited string of the Cluster
                              object's spec.clusterNetwork.pods.cidrBlocks, or to
                              "10.96.0.0/12" if that's unset.
                            type: string
                        type: object
                      scheduler:
                        description: Scheduler contains extra settings for the scheduler
                          control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      useHyperKubeImage:
                        description: UseHyperKubeImage controls if hyperkube should
                          be used for Kubernetes components instead of their respective
                          separate images
                        type: boolean
                    type: object
                  diskSetup:
                    description: DiskSetup specifies options for the creation of partition
                      tables and file systems on devices.
                    properties:
                      filesystems:
                        description: Filesystems specifies the list of file systems
                          to setup.
                        items:
                          description: Filesystem defines the file systems to be created.
                          properties:
                            device:
                              description: Device specifies the device name
                              type: string
                            extraOpts:
                              description: ExtraOpts defined extra options to add
                                to the command for creating the file system.
                              items:
                                type: string
                              type: array
                            filesystem:
                              description: Filesystem specifies the file system type.
                              type: string
                            label:
                              description: Label specifies the file system label to
                                be used. If set to None, no label is used.
                              type: string
                            overwrite:
                              description: Overwrite defines whether or not to overwrite
                                any existing filesystem. If true, any pre-existing
                                file system will be destroyed. Use with Caution.
                              type: boolean
                            partition:
                              description: 'Partition specifies the partition to use.
                                The valid options are: "auto|any", "auto", "any",
                                "none", and <NUM>, where NUM is the actual partition
                                number.'
                              type: string
                            replaceFS:
                              description: 'ReplaceFS is a special directive, used
                                for Microsoft Azure that instructs cloud-init to replace
                                a file system of <FS_TYPE>. NOTE: unless you define
                                a label, this requires the use of the ''any'' partition
                                directive.'
                              type: string
                          required:
                          - device
                          - filesystem
                          - label
                          type: object
                        type: array
                      partitions:
                        description: Partitions specifies the list of the partitions
                          to setup.
                        items:
                          description: Partition defines how to create and layout
                            a partition.
                          properties:
                            device:
                              description: Device is the name of the device.
                              type: string
                            layout:
                              description: Layout specifies the device layout. If
                                it is true, a single partition will be created for
                                the entire device. When layout is false, it means
                                don't partition or ignore existing partitioning.
                              type: boolean
                            overwrite:
                              description: Overwrite describes whether to skip checks
                                and create the partition if a partition or filesystem
                                is found on the device. Use with caution. Default
                                is 'false'.
                              type: boolean
                            tableType:
                              description: 'TableType specifies the tupe of partition
                                table. The following are supported: ''mbr'': default
                                and setups a MS-DOS partition table ''gpt'': setups
                                a GPT partition table'
                              type: string
                          required:
                          - device
                          - layout
                          type: object
                        type: array
                    type: object
                  files:
                    description: Files specifies extra files to be passed to user_data
                      upon creation.
                    items:
                      description: File defines the input for generating write_files
                        in cloud-init.
                      properties:
                        content:
                          description: Content is the actual content of the file.
                          type: string
                        contentFrom:
                          description: ContentFrom is a referenced source of content
                            to populate the file.
                          properties:
                            secret:
                              description: Secret represents a secret that should
                                populate this file.
                              properties:
                                key:
                                  description: Key is the key in the secret's data
                                    map for this value.
                                  type: string
                                name:
                                  description: Name of the secret in the KubeadmBootstrapConfig's
                                    namespace to use.
                                  type: string
                              required:
                              - key
                              - name
                              type: object
                          required:
                          - secret
                          type: object
                        encoding:
                          description: Encoding specifies the encoding of the file
                            contents.
                          enum:
                          - base64
                          - gzip
                          - gzip+base64
                          type: string
                        owner:
                          description: Owner specifies the ownership of the file,
                            e.g. "root:root".
                          type: string
                        path:
                          description: Path specifies the full path on disk where
                            to store the file.
                          type: string
                        permissions:
                          description: Permissions specifies the permissions to assign
                            to the file, e.g. "0640".
                          type: string
                      required:
                      - path
                      type: object
                    type: array
                  format:
                    description: Format specifies the output format of the bootstrap
                      data
                    enum:
                    - cloud-config
                    type: string
                  initConfiguration:
                    description: InitConfiguration along with ClusterConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      bootstrapTokens:
                        description: BootstrapTokens is respected at `kubeadm init`
                          time and describes a set of Bootstrap Tokens to create.
                          This information IS NOT uploaded to the kubeadm cluster
                          configmap, partly because of its sensitive nature
                        items:
                          description: BootstrapToken describes one bootstrap token,
                            stored as a Secret in the cluster.
                          properties:
                            description:
                              description: Description sets a human-friendly message
                                why this token exists and what it's used for, so other
                                administrators can know its purpose.
                              type: string
                            expires:
                              description: Expires specifies the timestamp when this
                                token expires. Defaults to being set dynamically at
                                runtime based on the TTL. Expires and TTL are mutually
                                exclusive.
                              format: date-time
                              type: string
                            groups:
                              description: Groups specifies the extra groups that
                                this token will authenticate as when/if used for authentication
                              items:
                                type: string
                              type: array
                            token:
                              description: Token is used for establishing bidirectional
                                trust between nodes and control-planes. Used for joining
                                nodes in the cluster.
                              type: string
                            ttl:
                              description: TTL defines the time to live for this token.
                                Defaults to 24h. Expires and TTL are mutually exclusive.
                              type: string
                            usages:
                              description: Usages describes the ways in which this
                                token can be used. Can by default be used for establishing
                                bidirectional trust, but that can be changed here.
                              items:
                                type: string
                              type: array
                          required:
                          - token
                          type: object
                        type: array
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance that's deployed on this control plane
                          node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                          in the sense that ControlPlaneEndpoint is the global endpoint
                          for the cluster, which then loadbalances the requests to
                          each individual API server. This configuration object lets
                          you customize what IP/DNS name and port the local API server
                          advertises it's accessible on. By default, kubeadm tries
                          to auto-detect the IP of the default interface and use that,
                          but in case that process fails you may set the desired value
                          here.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: The taint value corresponding to the
                                    taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  joinConfiguration:
                    description: JoinConfiguration is the kubeadm configuration for
                      the join command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      caCertPath:
                        description: 'CACertPath is the path to the SSL certificate
                          authority used to secure comunications between node and
                          control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                          TODO: revisit when there is defaulting from k/k'
                        type: string
                      controlPlane:
                        description: ControlPlane defines the additional control plane
                          instance to be deployed on the joining node. If nil, no
                          additional control plane instance will be deployed.
                        properties:
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance to be deployed on this node.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                        type: object
                      discovery:
                        description: 'Discovery specifies the options for the kubelet
                          to use during the TLS Bootstrap process TODO: revisit when
                          there is defaulting from k/k'
                        properties:
                          bootstrapToken:
                            description: BootstrapToken is used to set the options
                              for bootstrap token based discovery BootstrapToken and
                              File are mutually exclusive
                            properties:
                              apiServerEndpoint:
                                description: APIServerEndpoint is an IP or domain
                                  name to the API server from which info will be fetched.
                                type: string
                              caCertHashes:
                                description: 'CACertHashes specifies a set of public
                                  key pins to verify when token-based discovery is
                                  used. The root CA found during discovery must match
                                  one of these values. Specifying an empty set disables
                                  root CA pinning, which can be unsafe. Each hash
                                  is specified as "<type>:<value>", where the only
                                  currently supported type is "sha256". This is a
                                  hex-encoded SHA-256 hash of the Subject Public Key
                                  Info (SPKI) object in DER-encoded ASN.1. These hashes
                                  can be calculated using, for example, OpenSSL: openssl
                                  x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                                  der 2>&/dev/null | openssl dgst -sha256 -hex'
                                items:
                                  type: string
                                type: array
                              token:
                                description: Token is a token used to validate cluster
                                  information fetched from the control-plane.
                                type: string
                              unsafeSkipCAVerification:
                                description: UnsafeSkipCAVerification allows token-based
                                  discovery without CA verification via CACertHashes.
                                  This can weaken the security of kubeadm since other
                                  nodes can impersonate the control-plane.
                                type: boolean
                            required:
                            - token
                            - unsafeSkipCAVerification
                            type: object
                          file:
                            description: File is used to specify a file or URL to
                              a kubeconfig file from which to load cluster information
                              BootstrapToken and File are mutually exclusive
                            properties:
                              kubeConfigPath:
                                description: KubeConfigPath is used to specify the
                                  actual file path or URL to the kubeconfig file from
                                  which to load cluster information
                                type: string
                            required:
                            - kubeConfigPath
                            type: object
                          timeout:
                            description: Timeout modifies the discovery timeout
                            type: string
                          tlsBootstrapToken:
                            description: 'TLSBootstrapToken is a token used for TLS
                              bootstrapping. If .BootstrapToken is set, this field
                              is defaulted to .BootstrapToken.Token, but can be overridden.
                              If .File is set, this field **must be set** in case
                              the KubeConfigFile does not contain any other authentication
                              information TODO: revisit when there is defaulting from
                              k/k'
                            type: string
                        type: object
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: The taint value corresponding to the
                                    taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  mounts:
                    description: Mounts specifies a list of mount points to be setup.
                    items:
                      description: MountPoints defines input for generated mounts
                        in cloud-init.
                      items:
                        type: string
                      type: array
                    type: array
                  ntp:
                    description: NTP specifies NTP configuration
                    properties:
                      enabled:
                        description: Enabled specifies whether NTP should be enabled
                        type: boolean
                      servers:
                        description: Servers specifies which NTP servers to use
                        items:
                          type: string
                        type: array
                    type: object
                  postKubeadmCommands:
                    description: PostKubeadmCommands specifies extra commands to run
                      after kubeadm runs
                    items:
                      type: string
                    type: array
                  preKubeadmCommands:
                    description: PreKubeadmCommands specifies extra commands to run
                      before kubeadm runs
                    items:
                      type: string
                    type: array
                  useExperimentalRetryJoin:
                    description: "UseExperimentalRetryJoin replaces a basic kubeadm
                      command with a shell script with retries for joins. \n This
                      is meant to be an experimental temporary workaround on some
                      environments where joins fail due to timing (and other issues).
                      The long term goal is to add retries to kubeadm proper and use
                      that functionality. \n This will add about 40KB to userdata
                      \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                    type: boolean
                  users:
                    description: Users specifies extra users to add
                    items:
                      description: User defines the input for a generated user in
                        cloud-init.
                      properties:
                        gecos:
                          description: Gecos specifies the gecos to use for the user
                          type: string
                        groups:
                          description: Groups specifies the additional groups for
                            the user
                          type: string
                        homeDir:
                          description: HomeDir specifies the home directory to use
                            for the user
                          type: string
                        inactive:
                          description: Inactive specifies whether to mark the user
                            as inactive
                          type: boolean
                        lockPassword:
                          description: LockPassword specifies if password login should
                            be disabled
                          type: boolean
                        name:
                          description: Name specifies the user name
                          type: string
                        passwd:
                          description: Passwd specifies a hashed password for the
                            user
                          type: string
                        primaryGroup:
                          description: PrimaryGroup specifies the primary group for
                            the user
                          type: string
                        shell:
                          description: Shell specifies the user's shell
                          type: string
                        sshAuthorizedKeys:
                          description: SSHAuthorizedKeys specifies a list of ssh authorized
                            keys for the user
                          items:
                            type: string
                          type: array
                        sudo:
                          description: Sudo specifies a sudo role for the user
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  verbosity:
                    description: Verbosity is the number for the kubeadm log level
                      verbosity. It overrides the `--v` flag in kubeadm commands.
                    format: int32
                    type: integer
                type: object
              nodeDrainTimeout:
                description: 'NodeDrainTimeout is the total amount of time that the
                  controller will spend on draining a controlplane node The default
                  value is 0, meaning that the node can be drained without any time
                  limitations. NOTE: NodeDrainTimeout is different from `kubectl drain
                  --timeout`'
                type: string
              replicas:
                description: Number of desired machines. Defaults to 1. When stacked
                  etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members).
                  This is a pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              rolloutStrategy:
                description: The RolloutStrategy to use to replace control plane machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if RolloutStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of control planes that can
                          be scheduled above or under the desired number of control
                          planes. Value can be an absolute number 1 or 0. Defaults
                          to 1. Example: when this is set to 1, the control plane
                          can be scaled up immediately when the rolling update starts.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of rollout. Currently the only supported strategy
                      is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              upgradeAfter:
                description: UpgradeAfter is a field to indicate an upgrade should
                  be performed after the specified time even if no changes have been
                  made to the KubeadmControlPlane
                format: date-time
                type: string
              version:
                description: Version defines the desired Kubernetes version.
                type: string
            required:
            - infrastructureTemplate
            - kubeadmConfigSpec
            - version
            type: object
          status:
            description: KubeadmControlPlaneStatus defines the observed state of KubeadmControlPlane.
            properties:
              conditions:
                description: Conditions defines current service state of the KubeadmControlPlane.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: ErrorMessage indicates that there is a terminal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a terminal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              initialized:
                description: Initialized denotes whether or not the control plane
                  has the uploaded kubeadm-config configmap.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready denotes that the KubeadmControlPlane API Server
                  is ready to receive requests.
                type: boolean
              readyReplicas:
                description: Total number of fully running and ready control plane
                  machines.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  control plane (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the label selector in string format to avoid
                  introspection by clients, and is used to provide the CRD-based integration
                  for the scale subresource and additional integrations for things
                  like kubectl describe.. The string will be in the same format as
                  the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  control plane. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet ready or machines
                  that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  control plane that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of KubeadmControlPlane
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: This denotes whether or not the control plane has the uploaded
        kubeadm-config configmap
      jsonPath: .status.initialized
      name: Initialized
      type: boolean
    - description: KubeadmControlPlane API Server is ready to receive requests
      jsonPath: .status.ready
      name: API Server Available
      type: boolean
    - description: Kubernetes version associated with this control plane
      jsonPath: .spec.version
      name: Version
      type: string
    - description: Total number of non-terminated machines targeted by this control
        plane
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of fully running and ready control plane machines
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this control
        plane that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this control plane
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "KubeadmControlPlane is the Schema for the KubeadmControlPlane
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneSpec defines the desired state of KubeadmControlPlane.
            properties:
              kubeadmConfigSpec:
                description: KubeadmConfigSpec is a KubeadmConfigSpec to use for initializing
                  and joining machines to the control plane.
                properties:
                  clusterConfiguration:
                    description: ClusterConfiguration along with InitConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiServer:
                        description: APIServer contains extra settings for the API
                          server control plane component
                        properties:
                          certSANs:
                            description: CertSANs sets extra Subject Alternative Names
                              for the API Server signing cert.
                            items:
                              type: string
                            type: array
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                          timeoutForControlPlane:
                            description: TimeoutForControlPlane controls the timeout
                              that we use for API server to appear
                            type: string
                        type: object
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      certificatesDir:
                        description: 'CertificatesDir specifies where to store or
                          look for all required certificates. NB: if not provided,
                          this will default to `/etc/kubernetes/pki`'
                        type: string
                      clusterName:
                        description: The cluster name
                        type: string
                      controlPlaneEndpoint:
                        description: 'ControlPlaneEndpoint sets a stable IP address
                          or DNS name for the control plane; it can be a valid IP
                          address or a RFC-1123 DNS subdomain, both with optional
                          TCP port. In case the ControlPlaneEndpoint is not specified,
                          the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint
                          is specified but without a TCP port, the BindPort is used.
                          Possible usages are: e.g. In a cluster with more than one
                          control plane instances, this field should be assigned the
                          address of the external load balancer in front of the control
                          plane instances. e.g.  in environments with enforced node
                          recycling, the ControlPlaneEndpoint could be used for assigning
                          a stable DNS to the control plane. NB: This value defaults
                          to the first value in the Cluster object status.apiEndpoints
                          array.'
                        type: string
                      controllerManager:
                        description: ControllerManager contains extra settings for
                          the controller manager control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      dns:
                        description: DNS defines the options for the DNS add-on installed
                          in the cluster.
                        properties:
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                        type: object
                      etcd:
                        description: 'Etcd holds configuration for etcd. NB: This
                          value defaults to a Local (stacked) etcd'
                        properties:
                          external:
                            description: External describes how to connect to an external
                              etcd cluster Local and External are mutually exclusive
                            properties:
                              caFile:
                                description: CAFile is an SSL Certificate Authority
                                  file used to secure etcd communication. Required
                                  if using a TLS connection.
                                type: string
                              certFile:
                                description: CertFile is an SSL certification file
                                  used to secure etcd communication. Required if using
                                  a TLS connection.
                                type: string
                              endpoints:
                                description: Endpoints of etcd members. Required for
                                  ExternalEtcd.
                                items:
                                  type: string
                                type: array
                              keyFile:
                                description: KeyFile is an SSL key file used to secure
                                  etcd communication. Required if using a TLS connection.
                                type: string
                            required:
                            - caFile
                            - certFile
                            - endpoints
                            - keyFile
                            type: object
                          local:
                            description: Local provides configuration knobs for configuring
                              the local etcd instance Local and External are mutually
                              exclusive
                            properties:
                              dataDir:
                                description: DataDir is the directory etcd will place
                                  its data. Defaults to "/var/lib/etcd".
                                type: string
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: ExtraArgs are extra arguments provided
                                  to the etcd binary when run inside a static pod.
                                type: object
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              peerCertSANs:
                                description: PeerCertSANs sets extra Subject Alternative
                                  Names for the etcd peer signing cert.
                                items:
                                  type: string
                                type: array
                              serverCertSANs:
                                description: ServerCertSANs sets extra Subject Alternative
                                  Names for the etcd server signing cert.
                                items:
                                  type: string
                                type: array
                            type: object
                        type: object
                      featureGates:
                        additionalProperties:
                          type: boolean
                        description: FeatureGates enabled by the user.
                        type: object
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. If empty, `registry.k8s.io` will be used
                          by default; in case of kubernetes version is a CI build
                          (kubernetes version starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                          will be used as a default for control plane components and
                          for kube-proxy, while `registry.k8s.io` will be used for
                          all the other images.
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      kubernetesVersion:
                        description: 'KubernetesVersion is the target version of the
                          control plane. NB: This value defaults to the Machine object
                          spec.version'
                        type: string
                      networking:
                        description: 'Networking holds configuration for the networking
                          topology of the cluster. NB: This value defaults to the
                          Cluster object spec.clusterNetwork.'
                        properties:
                          dnsDomain:
                            description: DNSDomain is the dns domain used by k8s services.
                              Defaults to "cluster.local".
                            type: string
                          podSubnet:
                            description: PodSubnet is the subnet used by pods. If
                              unset, the API server will not allocate CIDR ranges
                              for every node. Defaults to a comma-delimited string
                              of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                              if that is set
                            type: string
                          serviceSubnet:
                            description: ServiceSubnet is the subnet used by k8s services.
                              Defaults to a comma-delimited string of the Cluster
                              object's spec.clusterNetwork.pods.cidrBlocks, or to
                              "10.96.0.0/12" if that's unset.
                            type: string
                        type: object
                      scheduler:
                        description: Scheduler contains extra settings for the scheduler
                          control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                    type: object
                  diskSetup:
                    description: DiskSetup specifies options for the creation of partition
                      tables and file systems on devices.
                    properties:
                      filesystems:
                        description: Filesystems specifies the list of file systems
                          to setup.
                        items:
                          description: Filesystem defines the file systems to be created.
                          properties:
                            device:
                              description: Device specifies the device name
                              type: string
                            extraOpts:
                              description: ExtraOpts defined extra options to add
                                to the command for creating the file system.
                              items:
                                type: string
                              type: array
                            filesystem:
                              description: Filesystem specifies the file system type.
                              type: string
                            label:
                              description: Label specifies the file system label to
                                be used. If set to None, no label is used.
                              type: string
                            overwrite:
                              description: Overwrite defines whether or not to overwrite
                                any existing filesystem. If true, any pre-existing
                                file system will be destroyed. Use with Caution.
                              type: boolean
                            partition:
                              description: 'Partition specifies the partition to use.
                                The valid options are: "auto|any", "auto", "any",
                                "none", and <NUM>, where NUM is the actual partition
                                number.'
                              type: string
                            replaceFS:
                              description: 'ReplaceFS is a special directive, used
                                for Microsoft Azure that instructs cloud-init to replace
                                a file system of <FS_TYPE>. NOTE: unless you define
                                a label, this requires the use of the ''any'' partition
                                directive.'
                              type: string
                          required:
                          - device
                          - filesystem
                          - label
                          type: object
                        type: array
                      partitions:
                        description: Partitions specifies the list of the partitions
                          to setup.
                        items:
                          description: Partition defines how to create and layout
                            a partition.
                          properties:
                            device:
                              description: Device is the name of the device.
                              type: string
                            layout:
                              description: Layout specifies the device layout. If
                                it is true, a single partition will be created for
                                the entire device. When layout is false, it means
                                don't partition or ignore existing partitioning.
                              type: boolean
                            overwrite:
                              description: Overwrite describes whether to skip checks
                                and create the partition if a partition or filesystem
                                is found on the device. Use with caution. Default
                                is 'false'.
                              type: boolean
                            tableType:
                              description: 'TableType specifies the tupe of partition
                                table. The following are supported: ''mbr'': default
                                and setups a MS-DOS partition table ''gpt'': setups
                                a GPT partition table'
                              type: string
                          required:
                          - device
                          - layout
                          type: object
                        type: array
                    type: object
                  files:
                    description: Files specifies extra files to be passed to user_data
                      upon creation.
                    items:
                      description: File defines the input for generating write_files
                        in cloud-init.
                      properties:
                        content:
                          description: Content is the actual content of the file.
                          type: string
                        contentFrom:
                          description: ContentFrom is a referenced source of content
                            to populate the file.
                          properties:
                            secret:
                              description: Secret represents a secret that should
                                populate this file.
                              properties:
                                key:
                                  description: Key is the key in the secret's data
                                    map for this value.
                                  type: string
                                name:
                                  description: Name of the secret in the KubeadmBootstrapConfig's
                                    namespace to use.
                                  type: string
                              required:
                              - key
                              - name
                              type: object
                          required:
                          - secret
                          type: object
                        encoding:
                          description: Encoding specifies the encoding of the file
                            contents.
                          enum:
                          - base64
                          - gzip
                          - gzip+base64
                          type: string
                        owner:
                          description: Owner specifies the ownership of the file,
                            e.g. "root:root".
                          type: string
                        path:
                          description: Path specifies the full path on disk where
                            to store the file.
                          type: string
                        permissions:
                          description: Permissions specifies the permissions to assign
                            to the file, e.g. "0640".
                          type: string
                      required:
                      - path
                      type: object
                    type: array
                  format:
                    description: Format specifies the output format of the bootstrap
                      data
                    enum:
                    - cloud-config
                    type: string
                  initConfiguration:
                    description: InitConfiguration along with ClusterConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      bootstrapTokens:
                        description: BootstrapTokens is respected at `kubeadm init`
                          time and describes a set of Bootstrap Tokens to create.
                          This information IS NOT uploaded to the kubeadm cluster
                          configmap, partly because of its sensitive nature
                        items:
                          description: BootstrapToken describes one bootstrap token,
                            stored as a Secret in the cluster.
                          properties:
                            description:
                              description: Description sets a human-friendly message
                                why this token exists and what it's used for, so other
                                administrators can know its purpose.
                              type: string
                            expires:
                              description: Expires specifies the timestamp when this
                                token expires. Defaults to being set dynamically at
                                runtime based on the TTL. Expires and TTL are mutually
                                exclusive.
                              format: date-time
                              type: string
                            groups:
                              description: Groups specifies the extra groups that
                                this token will authenticate as when/if used for authentication
                              items:
                                type: string
                              type: array
                            token:
                              description: Token is used for establishing bidirectional
                                trust between nodes and control-planes. Used for joining
                                nodes in the cluster.
                              type: string
                            ttl:
                              description: TTL defines the time to live for this token.
                                Defaults to 24h. Expires and TTL are mutually exclusive.
                              type: string
                            usages:
                              description: Usages describes the ways in which this
                                token can be used. Can by default be used for establishing
                                bidirectional trust, but that can be changed here.
                              items:
                                type: string
                              type: array
                          required:
                          - token
                          type: object
                        type: array
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance that's deployed on this control plane
                          node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                          in the sense that ControlPlaneEndpoint is the global endpoint
                          for the cluster, which then loadbalances the requests to
                          each individual API server. This configuration object lets
                          you customize what IP/DNS name and port the local API server
                          advertises it's accessible on. By default, kubeadm tries
                          to auto-detect the IP of the default interface and use that,
                          but in case that process fails you may set the desired value
                          here.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        type: object
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          ignorePreflightErrors:
                            description: IgnorePreflightErrors provides a slice of
                              pre-flight errors to be ignored when the current node
                              is registered.
                            items:
                              type: string
                            type: array
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: The taint value corresponding to the
                                    taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  joinConfiguration:
                    description: JoinConfiguration is the kubeadm configuration for
                      the join command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      caCertPath:
                        description: 'CACertPath is the path to the SSL certificate
                          authority used to secure comunications between node and
                          control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                          TODO: revisit when there is defaulting from k/k'
                        type: string
                      controlPlane:
                        description: ControlPlane defines the additional control plane
                          instance to be deployed on the joining node. If nil, no
                          additional control plane instance will be deployed.
                        properties:
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance to be deployed on this node.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            type: object
                        type: object
                      discovery:
                        description: 'Discovery specifies the options for the kubelet
                          to use during the TLS Bootstrap process TODO: revisit when
                          there is defaulting from k/k'
                        properties:
                          bootstrapToken:
                            description: BootstrapToken is used to set the options
                              for bootstrap token based discovery BootstrapToken and
                              File are mutually exclusive
                            properties:
                              apiServerEndpoint:
                                description: APIServerEndpoint is an IP or domain
                                  name to the API server from which info will be fetched.
                                type: string
                              caCertHashes:
                                description: 'CACertHashes specifies a set of public
                                  key pins to verify when token-based discovery is
                                  used. The root CA found during discovery must match
                                  one of these values. Specifying an empty set disables
                                  root CA pinning, which can be unsafe. Each hash
                                  is specified as "<type>:<value>", where the only
                                  currently supported type is "sha256". This is a
                                  hex-encoded SHA-256 hash of the Subject Public Key
                                  Info (SPKI) object in DER-encoded ASN.1. These hashes
                                  can be calculated using, for example, OpenSSL: openssl
                                  x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                                  der 2>&/dev/null | openssl dgst -sha256 -hex'
                                items:
                                  type: string
                                type: array
                              token:
                                description: Token is a token used to validate cluster
                                  information fetched from the control-plane.
                                type: string
                              unsafeSkipCAVerification:
                                description: UnsafeSkipCAVerification allows token-based
                                  discovery without CA verification via CACertHashes.
                                  This can weaken the security of kubeadm since other
                                  nodes can impersonate the control-plane.
                                type: boolean
                            required:
                            - token
                            type: object
                          file:
                            description: File is used to specify a file or URL to
                              a kubeconfig file from which to load cluster information
                              BootstrapToken and File are mutually exclusive
                            properties:
                              kubeConfigPath:
                                description: KubeConfigPath is used to specify the
                                  actual file path or URL to the kubeconfig file from
                                  which to load cluster information
                                type: string
                            required:
                            - kubeConfigPath
                            type: object
                          timeout:
                            description: Timeout modifies the discovery timeout
                            type: string
                          tlsBootstrapToken:
                            description: TLSBootstrapToken is a token used for TLS
                              bootstrapping. If .BootstrapToken is set, this field
                              is defaulted to .BootstrapToken.Token, but can be overridden.
                              If .File is set, this field **must be set** in case
                              the KubeConfigFile does not contain any other authentication
                              information
                            type: string
                        type: object
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          ignorePreflightErrors:
                            description: IgnorePreflightErrors provides a slice of
                              pre-flight errors to be ignored when the current node
                              is registered.
                            items:
                              type: string
                            type: array
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: The taint value corresponding to the
                                    taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  mounts:
                    description: Mounts specifies a list of mount points to be setup.
                    items:
                      description: MountPoints defines input for generated mounts
                        in cloud-init.
                      items:
                        type: string
                      type: array
                    type: array
                  ntp:
                    description: NTP specifies NTP configuration
                    properties:
                      enabled:
                        description: Enabled specifies whether NTP should be enabled
                        type: boolean
                      servers:
                        description: Servers specifies which NTP servers to use
                        items:
                          type: string
                        type: array
                    type: object
                  postKubeadmCommands:
                    description: PostKubeadmCommands specifies extra commands to run
                      after kubeadm runs
                    items:
                      type: string
                    type: array
                  preKubeadmCommands:
                    description: PreKubeadmCommands specifies extra commands to run
                      before kubeadm runs
                    items:
                      type: string
                    type: array
                  useExperimentalRetryJoin:
                    description: "UseExperimentalRetryJoin replaces a basic kubeadm
                      command with a shell script with retries for joins. \n This
                      is meant to be an experimental temporary workaround on some
                      environments where joins fail due to timing (and other issues).
                      The long term goal is to add retries to kubeadm proper and use
                      that functionality. \n This will add about 40KB to userdata
                      \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                    type: boolean
                  users:
                    description: Users specifies extra users to add
                    items:
                      description: User defines the input for a generated user in
                        cloud-init.
                      properties:
                        gecos:
                          description: Gecos specifies the gecos to use for the user
                          type: string
                        groups:
                          description: Groups specifies the additional groups for
                            the user
                          type: string
                        homeDir:
                          description: HomeDir specifies the home directory to use
                            for the user
                          type: string
                        inactive:
                          description: Inactive specifies whether to mark the user
                            as inactive
                          type: boolean
                        lockPassword:
                          description: LockPassword specifies if password login should
                            be disabled
                          type: boolean
                        name:
                          description: Name specifies the user name
                          type: string
                        passwd:
                          description: Passwd specifies a hashed password for the
                            user
                          type: string
                        primaryGroup:
                          description: PrimaryGroup specifies the primary group for
                            the user
                          type: string
                        shell:
                          description: Shell specifies the user's shell
                          type: string
                        sshAuthorizedKeys:
                          description: SSHAuthorizedKeys specifies a list of ssh authorized
                            keys for the user
                          items:
                            type: string
                          type: array
                        sudo:
                          description: Sudo specifies a sudo role for the user
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  verbosity:
                    description: Verbosity is the number for the kubeadm log level
                      verbosity. It overrides the `--v` flag in kubeadm commands.
                    format: int32
                    type: integer
                type: object
              machineTemplate:
                description: MachineTemplate contains information about how machines
                  should be shaped when creating or updating a control plane.
                properties:
                  infrastructureRef:
                    description: InfrastructureRef is a required reference to a custom
                      resource offered by an infrastructure provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  nodeDrainTimeout:
                    description: 'NodeDrainTimeout is the total amount of time that
                      the controller will spend on draining a controlplane node The
                      default value is 0, meaning that the node can be drained without
                      any time limitations. NOTE: NodeDrainTimeout is different from
                      `kubectl drain --timeout`'
                    type: string
                required:
                - infrastructureRef
                type: object
              replicas:
                description: Number of desired machines. Defaults to 1. When stacked
                  etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members).
                  This is a pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              rolloutAfter:
                description: RolloutAfter is a field to indicate a rollout should
                  be performed after the specified time even if no changes have been
                  made to the KubeadmControlPlane.
                format: date-time
                type: string
              rolloutStrategy:
                default:
                  rollingUpdate:
                    maxSurge: 1
                  type: RollingUpdate
                description: The RolloutStrategy to use to replace control plane machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if RolloutStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of control planes that can
                          be scheduled above or under the desired number of control
                          planes. Value can be an absolute number 1 or 0. Defaults
                          to 1. Example: when this is set to 1, the control plane
                          can be scaled up immediately when the rolling update starts.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of rollout. Currently the only supported strategy
                      is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              version:
                description: Version defines the desired Kubernetes version.
                type: string
            required:
            - kubeadmConfigSpec
            - machineTemplate
            - version
            type: object
          status:
            description: KubeadmControlPlaneStatus defines the observed state of KubeadmControlPlane.
            properties:
              conditions:
                description: Conditions defines current service state of the KubeadmControlPlane.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: ErrorMessage indicates that there is a terminal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a terminal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              initialized:
                description: Initialized denotes whether or not the control plane
                  has the uploaded kubeadm-config configmap.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready denotes that the KubeadmControlPlane API Server
                  is ready to receive requests.
                type: boolean
              readyReplicas:
                description: Total number of fully running and ready control plane
                  machines.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  control plane (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the label selector in string format to avoid
                  introspection by clients, and is used to provide the CRD-based integration
                  for the scale subresource and additional integrations for things
                  like kubectl describe.. The string will be in the same format as
                  the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  control plane. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet ready or machines
                  that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  control plane that have the desired template spec.
                format: int32
                type: integer
              version:
                description: Version represents the minimum Kubernetes version for
                  the control plane machines in the cluster.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .metadata.labels['cluster\.x-k8s\.io/cluster-name']
      name: Cluster
      type: string
    - description: This denotes whether or not the control plane has the uploaded
        kubeadm-config configmap
      jsonPath: .status.initialized
      name: Initialized
      type: boolean
    - description: KubeadmControlPlane API Server is ready to receive requests
      jsonPath: .status.ready
      name: API Server Available
      type: boolean
    - description: Total number of machines desired by this control plane
      jsonPath: .spec.replicas
      name: Desired
      priority: 10
      type: integer
    - description: Total number of non-terminated machines targeted by this control
        plane
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of fully running and ready control plane machines
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this control
        plane that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this control plane
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    - description: Time duration since creation of KubeadmControlPlane
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this control plane
      jsonPath: .spec.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: KubeadmControlPlane is the Schema for the KubeadmControlPlane
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneSpec defines the desired state of KubeadmControlPlane.
            properties:
              kubeadmConfigSpec:
                description: KubeadmConfigSpec is a KubeadmConfigSpec to use for initializing
                  and joining machines to the control plane.
                properties:
                  clusterConfiguration:
                    description: ClusterConfiguration along with InitConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiServer:
                        description: APIServer contains extra settings for the API
                          server control plane component
                        properties:
                          certSANs:
                            description: CertSANs sets extra Subject Alternative Names
                              for the API Server signing cert.
                            items:
                              type: string
                            type: array
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                          timeoutForControlPlane:
                            description: TimeoutForControlPlane controls the timeout
                              that we use for API server to appear
                            type: string
                        type: object
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      certificatesDir:
                        description: 'CertificatesDir specifies where to store or
                          look for all required certificates. NB: if not provided,
                          this will default to `/etc/kubernetes/pki`'
                        type: string
                      clusterName:
                        description: The cluster name
                        type: string
                      controlPlaneEndpoint:
                        description: 'ControlPlaneEndpoint sets a stable IP address
                          or DNS name for the control plane; it can be a valid IP
                          address or a RFC-1123 DNS subdomain, both with optional
                          TCP port. In case the ControlPlaneEndpoint is not specified,
                          the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint
                          is specified but without a TCP port, the BindPort is used.
                          Possible usages are: e.g. In a cluster with more than one
                          control plane instances, this field should be assigned the
                          address of the external load balancer in front of the control
                          plane instances. e.g.  in environments with enforced node
                          recycling, the ControlPlaneEndpoint could be used for assigning
                          a stable DNS to the control plane. NB: This value defaults
                          to the first value in the Cluster object status.apiEndpoints
                          array.'
                        type: string
                      controllerManager:
                        description: ControllerManager contains extra settings for
                          the controller manager control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      dns:
                        description: DNS defines the options for the DNS add-on installed
                          in the cluster.
                        properties:
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                        type: object
                      etcd:
                        description: 'Etcd holds configuration for etcd. NB: This
                          value defaults to a Local (stacked) etcd'
                        properties:
                          external:
                            description: External describes how to connect to an external
                              etcd cluster Local and External are mutually exclusive
                            properties:
                              caFile:
                                description: CAFile is an SSL Certificate Authority
                                  file used to secure etcd communication. Required
                                  if using a TLS connection.
                                type: string
                              certFile:
                                description: CertFile is an SSL certification file
                                  used to secure etcd communication. Required if using
                                  a TLS connection.
                                type: string
                              endpoints:
                                description: Endpoints of etcd members. Required for
                                  ExternalEtcd.
                                items:
                                  type: string
                                type: array
                              keyFile:
                                description: KeyFile is an SSL key file used to secure
                                  etcd communication. Required if using a TLS connection.
                                type: string
                            required:
                            - caFile
                            - certFile
                            - endpoints
                            - keyFile
                            type: object
                          local:
                            description: Local provides configuration knobs for configuring
                              the local etcd instance Local and External are mutually
                              exclusive
                            properties:
                              dataDir:
                                description: DataDir is the directory etcd will place
                                  its data. Defaults to "/var/lib/etcd".
                                type: string
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: ExtraArgs are extra arguments provided
                                  to the etcd binary when run inside a static pod.
                                type: object
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              peerCertSANs:
                                description: PeerCertSANs sets extra Subject Alternative
                                  Names for the etcd peer signing cert.
                                items:
                                  type: string
                                type: array
                              serverCertSANs:
                                description: ServerCertSANs sets extra Subject Alternative
                                  Names for the etcd server signing cert.
                                items:
                                  type: string
                                type: array
                            type: object
                        type: object
                      featureGates:
                        additionalProperties:
                          type: boolean
                        description: FeatureGates enabled by the user.
                        type: object
                      imageRepository:
                        description: 'ImageRepository sets the container registry
                          to pull images from. * If not set, the default registry
                          of kubeadm will be used, i.e. * registry.k8s.io (new registry):
                          >= v1.22.17, >= v1.23.15, >= v1.24.9, >= v1.25.0 * k8s.gcr.io
                          (old registry): all older versions Please note that when
                          imageRepository is not set we don''t allow upgrades to versions
                          >= v1.22.0 which use the old registry (k8s.gcr.io). Please
                          use a newer patch version with the new registry instead
                          (i.e. >= v1.22.17, >= v1.23.15, >= v1.24.9, >= v1.25.0).
                          * If the version is a CI build (kubernetes version starts
                          with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                          will be used as a default for control plane components and
                          for kube-proxy, while `registry.k8s.io` will be used for
                          all the other images.'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      kubernetesVersion:
                        description: 'KubernetesVersion is the target version of the
                          control plane. NB: This value defaults to the Machine object
                          spec.version'
                        type: string
                      networking:
                        description: 'Networking holds configuration for the networking
                          topology of the cluster. NB: This value defaults to the
                          Cluster object spec.clusterNetwork.'
                        properties:
                          dnsDomain:
                            description: DNSDomain is the dns domain used by k8s services.
                              Defaults to "cluster.local".
                            type: string
                          podSubnet:
                            description: PodSubnet is the subnet used by pods. If
                              unset, the API server will not allocate CIDR ranges
                              for every node. Defaults to a comma-delimited string
                              of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                              if that is set
                            type: string
                          serviceSubnet:
                            description: ServiceSubnet is the subnet used by k8s services.
                              Defaults to a comma-delimited string of the Cluster
                              object's spec.clusterNetwork.pods.cidrBlocks, or to
                              "10.96.0.0/12" if that's unset.
                            type: string
                        type: object
                      scheduler:
                        description: Scheduler contains extra settings for the scheduler
                          control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                    type: object
                  diskSetup:
                    description: DiskSetup specifies options for the creation of partition
                      tables and file systems on devices.
                    properties:
                      filesystems:
                        description: Filesystems specifies the list of file systems
                          to setup.
                        items:
                          description: Filesystem defines the file systems to be created.
                          properties:
                            device:
                              description: Device specifies the device name
                              type: string
                            extraOpts:
                              description: ExtraOpts defined extra options to add
                                to the command for creating the file system.
                              items:
                                type: string
                              type: array
                            filesystem:
                              description: Filesystem specifies the file system type.
                              type: string
                            label:
                              description: Label specifies the file system label to
                                be used. If set to None, no label is used.
                              type: string
                            overwrite:
                              description: Overwrite defines whether or not to overwrite
                                any existing filesystem. If true, any pre-existing
                                file system will be destroyed. Use with Caution.
                              type: boolean
                            partition:
                              description: 'Partition specifies the partition to use.
                                The valid options are: "auto|any", "auto", "any",
                                "none", and <NUM>, where NUM is the actual partition
                                number.'
                              type: string
                            replaceFS:
                              description: 'ReplaceFS is a special directive, used
                                for Microsoft Azure that instructs cloud-init to replace
                                a file system of <FS_TYPE>. NOTE: unless you define
                                a label, this requires the use of the ''any'' partition
                                directive.'
                              type: string
                          required:
                          - device
                          - filesystem
                          - label
                          type: object
                        type: array
                      partitions:
                        description: Partitions specifies the list of the partitions
                          to setup.
                        items:
                          description: Partition defines how to create and layout
                            a partition.
                          properties:
                            device:
                              description: Device is the name of the device.
                              type: string
                            layout:
                              description: Layout specifies the device layout. If
                                it is true, a single partition will be created for
                                the entire device. When layout is false, it means
                                don't partition or ignore existing partitioning.
                              type: boolean
                            overwrite:
                              description: Overwrite describes whether to skip checks
                                and create the partition if a partition or filesystem
                                is found on the device. Use with caution. Default
                                is 'false'.
                              type: boolean
                            tableType:
                              description: 'TableType specifies the tupe of partition
                                table. The following are supported: ''mbr'': default
                                and setups a MS-DOS partition table ''gpt'': setups
                                a GPT partition table'
                              type: string
                          required:
                          - device
                          - layout
                          type: object
                        type: array
                    type: object
                  files:
                    description: Files specifies extra files to be passed to user_data
                      upon creation.
                    items:
                      description: File defines the input for generating write_files
                        in cloud-init.
                      properties:
                        append:
                          description: Append specifies whether to append Content
                            to existing file if Path exists.
                          type: boolean
                        content:
                          description: Content is the actual content of the file.
                          type: string
                        contentFrom:
                          description: ContentFrom is a referenced source of content
                            to populate the file.
                          properties:
                            secret:
                              description: Secret represents a secret that should
                                populate this file.
                              properties:
                                key:
                                  description: Key is the key in the secret's data
                                    map for this value.
                                  type: string
                                name:
                                  description: Name of the secret in the KubeadmBootstrapConfig's
                                    namespace to use.
                                  type: string
                              required:
                              - key
                              - name
                              type: object
                          required:
                          - secret
                          type: object
                        encoding:
                          description: Encoding specifies the encoding of the file
                            contents.
                          enum:
                          - base64
                          - gzip
                          - gzip+base64
                          type: string
                        owner:
                          description: Owner specifies the ownership of the file,
                            e.g. "root:root".
                          type: string
                        path:
                          description: Path specifies the full path on disk where
                            to store the file.
                          type: string
                        permissions:
                          description: Permissions specifies the permissions to assign
                            to the file, e.g. "0640".
                          type: string
                      required:
                      - path
                      type: object
                    type: array
                  format:
                    description: Format specifies the output format of the bootstrap
                      data
                    enum:
                    - cloud-config
                    - ignition
                    type: string
                  ignition:
                    description: Ignition contains Ignition specific configuration.
                    properties:
                      containerLinuxConfig:
                        description: ContainerLinuxConfig contains CLC specific configuration.
                        properties:
                          additionalConfig:
                            description: "AdditionalConfig contains additional configuration
                              to be merged with the Ignition configuration generated
                              by the bootstrapper controller. More info: https://coreos.github.io/ignition/operator-notes/#config-merging
                              \n The data format is documented here: https://kinvolk.io/docs/flatcar-container-linux/latest/provisioning/cl-config/"
                            type: string
                          strict:
                            description: Strict controls if AdditionalConfig should
                              be strictly parsed. If so, warnings are treated as errors.
                            type: boolean
                        type: object
                    type: object
                  initConfiguration:
                    description: InitConfiguration along with ClusterConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      bootstrapTokens:
                        description: BootstrapTokens is respected at `kubeadm init`
                          time and describes a set of Bootstrap Tokens to create.
                          This information IS NOT uploaded to the kubeadm cluster
                          configmap, partly because of its sensitive nature
                        items:
                          description: BootstrapToken describes one bootstrap token,
                            stored as a Secret in the cluster.
                          properties:
                            description:
                              description: Description sets a human-friendly message
                                why this token exists and what it's used for, so other
                                administrators can know its purpose.
                              type: string
                            expires:
                              description: Expires specifies the timestamp when this
                                token expires. Defaults to being set dynamically at
                                runtime based on the TTL. Expires and TTL are mutually
                                exclusive.
                              format: date-time
                              type: string
                            groups:
                              description: Groups specifies the extra groups that
                                this token will authenticate as when/if used for authentication
                              items:
                                type: string
                              type: array
                            token:
                              description: Token is used for establishing bidirectional
                                trust between nodes and control-planes. Used for joining
                                nodes in the cluster.
                              type: string
                            ttl:
                              description: TTL defines the time to live for this token.
                                Defaults to 24h. Expires and TTL are mutually exclusive.
                              type: string
                            usages:
                              description: Usages describes the ways in which this
                                token can be used. Can by default be used for establishing
                                bidirectional trust, but that can be changed here.
                              items:
                                type: string
                              type: array
                          required:
                          - token
                          type: object
                        type: array
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance that's deployed on this control plane
                          node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                          in the sense that ControlPlaneEndpoint is the global endpoint
                          for the cluster, which then loadbalances the requests to
                          each individual API server. This configuration object lets
                          you customize what IP/DNS name and port the local API server
                          advertises it's accessible on. By default, kubeadm tries
                          to auto-detect the IP of the default interface and use that,
                          but in case that process fails you may set the desired value
                          here.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        type: object
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          ignorePreflightErrors:
                            description: IgnorePreflightErrors provides a slice of
                              pre-flight errors to be ignored when the current node
                              is registered.
                            items:
                              type: string
                            type: array
                          imagePullPolicy:
                            description: ImagePullPolicy specifies the policy for
                              image pulling during kubeadm "init" and "join" operations.
                              The value of this field must be one of "Always", "IfNotPresent"
                              or "Never". Defaults to "IfNotPresent". This can be
                              used only with Kubernetes version equal to 1.22 and
                              later.
                            enum:
                            - Always
                            - IfNotPresent
                            - Never
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: []`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: The taint value corresponding to the
                                    taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                      patches:
                        description: Patches contains options related to applying
                          patches to components deployed by kubeadm during "kubeadm
                          init". The minimum kubernetes version needed to support
                          Patches is v1.22
                        properties:
                          directory:
                            description: Directory is a path to a directory that contains
                              files named "target[suffix][+patchtype].extension".
                              For example, "kube-apiserver0+merge.yaml" or just "etcd.json".
                              "target" can be one of "kube-apiserver", "kube-controller-manager",
                              "kube-scheduler", "etcd". "patchtype" can be one of
                              "strategic" "merge" or "json" and they match the patch
                              formats supported by kubectl. The default "patchtype"
                              is "strategic". "extension" must be either "json" or
                              "yaml". "suffix" is an optional string that can be used
                              to determine which patches are applied first alpha-numerically.
                              These files can be written into the target directory
                              via KubeadmConfig.Files which specifies additional files
                              to be created on the machine, either with content inline
                              or by referencing a secret.
                            type: string
                        type: object
                      skipPhases:
                        description: SkipPhases is a list of phases to skip during
                          command execution. The list of phases can be obtained with
                          the "kubeadm init --help" command. This option takes effect
                          only on Kubernetes >=1.22.0.
                        items:
                          type: string
                        type: array
                    type: object
                  joinConfiguration:
                    description: JoinConfiguration is the kubeadm configuration for
                      the join command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      caCertPath:
                        description: 'CACertPath is the path to the SSL certificate
                          authority used to secure comunications between node and
                          control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                          TODO: revisit when there is defaulting from k/k'
                        type: string
                      controlPlane:
                        description: ControlPlane defines the additional control plane
                          instance to be deployed on the joining node. If nil, no
                          additional control plane instance will be deployed.
                        properties:
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance to be deployed on this node.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            type: object
                        type: object
                      discovery:
                        description: 'Discovery specifies the options for the kubelet
                          to use during the TLS Bootstrap process TODO: revisit when
                          there is defaulting from k/k'
                        properties:
                          bootstrapToken:
                            description: BootstrapToken is used to set the options
                              for bootstrap token based discovery BootstrapToken and
                              File are mutually exclusive
                            properties:
                              apiServerEndpoint:
                                description: APIServerEndpoint is an IP or domain
                                  name to the API server from which info will be fetched.
                                type: string
                              caCertHashes:
                                description: 'CACertHashes specifies a set of public
                                  key pins to verify when token-based discovery is
                                  used. The root CA found during discovery must match
                                  one of these values. Specifying an empty set disables
                                  root CA pinning, which can be unsafe. Each hash
                                  is specified as "<type>:<value>", where the only
                                  currently supported type is "sha256". This is a
                                  hex-encoded SHA-256 hash of the Subject Public Key
                                  Info (SPKI) object in DER-encoded ASN.1. These hashes
                                  can be calculated using, for example, OpenSSL: openssl
                                  x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                                  der 2>&/dev/null | openssl dgst -sha256 -hex'
                                items:
                                  type: string
                                type: array
                              token:
                                description: Token is a token used to validate cluster
                                  information fetched from the control-plane.
                                type: string
                              unsafeSkipCAVerification:
                                description: UnsafeSkipCAVerification allows token-based
                                  discovery without CA verification via CACertHashes.
                                  This can weaken the security of kubeadm since other
                                  nodes can impersonate the control-plane.
                                type: boolean
                            required:
                            - token
                            type: object
                          file:
                            description: File is used to specify a file or URL to
                              a kubeconfig file from which to load cluster information
                              BootstrapToken and File are mutually exclusive
                            properties:
                              kubeConfigPath:
                                description: KubeConfigPath is used to specify the
                                  actual file path or URL to the kubeconfig file from
                                  which to load cluster information
                                type: string
                            required:
                            - kubeConfigPath
                            type: object
                          timeout:
                            description: Timeout modifies the discovery timeout
                            type: string
                          tlsBootstrapToken:
                            description: TLSBootstrapToken is a token used for TLS
                              bootstrapping. If .BootstrapToken is set, this field
                              is defaulted to .BootstrapToken.Token, but can be overridden.
                              If .File is set, this field **must be set** in case
                              the KubeConfigFile does not contain any other authentication
                              information
                            type: string
                        type: object
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          ignorePreflightErrors:
                            description: IgnorePreflightErrors provides a slice of
                              pre-flight errors to be ignored when the current node
                              is registered.
                            items:
                              type: string
                            type: array
                          imagePullPolicy:
                            description: ImagePullPolicy specifies the policy for
                              image pulling during kubeadm "init" and "join" operations.
                              The value of this field must be one of "Always", "IfNotPresent"
                              or "Never". Defaults to "IfNotPresent". This can be
                              used only with Kubernetes version equal to 1.22 and
                              later.
                            enum:
                            - Always
                            - IfNotPresent
                            - Never
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: []`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: The taint value corresponding to the
                                    taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                      patches:
                        description: Patches contains options related to applying
                          patches to components deployed by kubeadm during "kubeadm
                          join". The minimum kubernetes version needed to support
                          Patches is v1.22
                        properties:
                          directory:
                            description: Directory is a path to a directory that contains
                              files named "target[suffix][+patchtype].extension".
                              For example, "kube-apiserver0+merge.yaml" or just "etcd.json".
                              "target" can be one of "kube-apiserver", "kube-controller-manager",
                              "kube-scheduler", "etcd". "patchtype" can be one of
                              "strategic" "merge" or "json" and they match the patch
                              formats supported by kubectl. The default "patchtype"
                              is "strategic". "extension" must be either "json" or
                              "yaml". "suffix" is an optional string that can be used
                              to determine which patches are applied first alpha-numerically.
                              These files can be written into the target directory
                              via KubeadmConfig.Files which specifies additional files
                              to be created on the machine, either with content inline
                              or by referencing a secret.
                            type: string
                        type: object
                      skipPhases:
                        description: SkipPhases is a list of phases to skip during
                          command execution. The list of phases can be obtained with
                          the "kubeadm init --help" command. This option takes effect
                          only on Kubernetes >=1.22.0.
                        items:
                          type: string
                        type: array
                    type: object
                  mounts:
                    description: Mounts specifies a list of mount points to be setup.
                    items:
                      description: MountPoints defines input for generated mounts
                        in cloud-init.
                      items:
                        type: string
                      type: array
                    type: array
                  ntp:
                    description: NTP specifies NTP configuration
                    properties:
                      enabled:
                        description: Enabled specifies whether NTP should be enabled
                        type: boolean
                      servers:
                        description: Servers specifies which NTP servers to use
                        items:
                          type: string
                        type: array
                    type: object
                  postKubeadmCommands:
                    description: PostKubeadmCommands specifies extra commands to run
                      after kubeadm runs
                    items:
                      type: string
                    type: array
                  preKubeadmCommands:
                    description: PreKubeadmCommands specifies extra commands to run
                      before kubeadm runs
                    items:
                      type: string
                    type: array
                  useExperimentalRetryJoin:
                    description: "UseExperimentalRetryJoin replaces a basic kubeadm
                      command with a shell script with retries for joins. \n This
                      is meant to be an experimental temporary workaround on some
                      environments where joins fail due to timing (and other issues).
                      The long term goal is to add retries to kubeadm proper and use
                      that functionality. \n This will add about 40KB to userdata
                      \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055.
                      \n Deprecated: This experimental fix is no longer needed and
                      this field will be removed in a future release. When removing
                      also remove from staticcheck exclude-rules for SA1019 in golangci.yml"
                    type: boolean
                  users:
                    description: Users specifies extra users to add
                    items:
                      description: User defines the input for a generated user in
                        cloud-init.
                      properties:
                        gecos:
                          description: Gecos specifies the gecos to use for the user
                          type: string
                        groups:
                          description: Groups specifies the additional groups for
                            the user
                          type: string
                        homeDir:
                          description: HomeDir specifies the home directory to use
                            for the user
                          type: string
                        inactive:
                          description: Inactive specifies whether to mark the user
                            as inactive
                          type: boolean
                        lockPassword:
                          description: LockPassword specifies if password login should
                            be disabled
                          type: boolean
                        name:
                          description: Name specifies the user name
                          type: string
                        passwd:
                          description: Passwd specifies a hashed password for the
                            user
                          type: string
                        passwdFrom:
                          description: PasswdFrom is a referenced source of passwd
                            to populate the passwd.
                          properties:
                            secret:
                              description: Secret represents a secret that should
                                populate this password.
                              properties:
                                key:
                                  description: Key is the key in the secret's data
                                    map for this value.
                                  type: string
                                name:
                                  description: Name of the secret in the KubeadmBootstrapConfig's
                                    namespace to use.
                                  type: string
                              required:
                              - key
                              - name
                              type: object
                          required:
                          - secret
                          type: object
                        primaryGroup:
                          description: PrimaryGroup specifies the primary group for
                            the user
                          type: string
                        shell:
                          description: Shell specifies the user's shell
                          type: string
                        sshAuthorizedKeys:
                          description: SSHAuthorizedKeys specifies a list of ssh authorized
                            keys for the user
                          items:
                            type: string
                          type: array
                        sudo:
                          description: Sudo specifies a sudo role for the user
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  verbosity:
                    description: Verbosity is the number for the kubeadm log level
                      verbosity. It overrides the `--v` flag in kubeadm commands.
                    format: int32
                    type: integer
                type: object
              machineTemplate:
                description: MachineTemplate contains information about how machines
                  should be shaped when creating or updating a control plane.
                properties:
                  infrastructureRef:
                    description: InfrastructureRef is a required reference to a custom
                      resource offered by an infrastructure provider.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  nodeDeletionTimeout:
                    description: NodeDeletionTimeout defines how long the machine
                      controller will attempt to delete the Node that the Machine
                      hosts after the Machine is marked for deletion. A duration of
                      0 will retry deletion indefinitely. If no value is provided,
                      the default value for this property of the Machine resource
                      will be used.
                    type: string
                  nodeDrainTimeout:
                    description: 'NodeDrainTimeout is the total amount of time that
                      the controller will spend on draining a controlplane node The
                      default value is 0, meaning that the node can be drained without
                      any time limitations. NOTE: NodeDrainTimeout is different from
                      `kubectl drain --timeout`'
                    type: string
                  nodeVolumeDetachTimeout:
                    description: NodeVolumeDetachTimeout is the total amount of time
                      that the controller will spend on waiting for all volumes to
                      be detached. The default value is 0, meaning that the volumes
                      can be detached without any time limitations.
                    type: string
                required:
                - infrastructureRef
                type: object
              remediationStrategy:
                description: The RemediationStrategy that controls how control plane
                  machine remediation happens.
                properties:
                  maxRetry:
                    description: "MaxRetry is the Max number of retries while attempting
                      to remediate an unhealthy machine. A retry happens when a machine
                      that was created as a replacement for an unhealthy machine also
                      fails. For example, given a control plane with three machines
                      M1, M2, M3: \n M1 become unhealthy; remediation happens, and
                      M1-1 is created as a replacement. If M1-1 (replacement of M1)
                      has problems while bootstrapping it will become unhealthy, and
                      then be remediated; such operation is considered a retry, remediation-retry
                      #1. If M1-2 (replacement of M1-1) becomes unhealthy, remediation-retry
                      #2 will happen, etc. \n A retry could happen only after RetryPeriod
                      from the previous retry. If a machine is marked as unhealthy
                      after MinHealthyPeriod from the previous remediation expired,
                      this is not considered a retry anymore because the new issue
                      is assumed unrelated from the previous one. \n If not set, the
                      remedation will be retried infinitely."
                    format: int32
                    type: integer
                  minHealthyPeriod:
                    description: "MinHealthyPeriod defines the duration after which
                      KCP will consider any failure to a machine unrelated from the
                      previous one. In this case the remediation is not considered
                      a retry anymore, and thus the retry counter restarts from 0.
                      For example, assuming MinHealthyPeriod is set to 1h (default)
                      \n M1 become unhealthy; remediation happens, and M1-1 is created
                      as a replacement. If M1-1 (replacement of M1) has problems within
                      the 1hr after the creation, also this machine will be remediated
                      and this operation is considered a retry - a problem related
                      to the original issue happened to M1 -. \n If instead the problem
                      on M1-1 is happening after MinHealthyPeriod expired, e.g. four
                      days after m1-1 has been created as a remediation of M1, the
                      problem on M1-1 is considered unrelated to the original issue
                      happened to M1. \n If not set, this value is defaulted to 1h."
                    type: string
                  retryPeriod:
                    description: "RetryPeriod is the duration that KCP should wait
                      before remediating a machine being created as a replacement
                      for an unhealthy machine (a retry). \n If not set, a retry will
                      happen immediately."
                    type: string
                type: object
              replicas:
                description: Number of desired machines. Defaults to 1. When stacked
                  etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members).
                  This is a pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              rolloutAfter:
                description: 'RolloutAfter is a field to indicate a rollout should
                  be performed after the specified time even if no changes have been
                  made to the KubeadmControlPlane. Example: In the YAML the time can
                  be specified in the RFC3339 format. To specify the rolloutAfter
                  target as March 9, 2023, at 9 am UTC use "2023-03-09T09:00:00Z".'
                format: date-time
                type: string
              rolloutBefore:
                description: RolloutBefore is a field to indicate a rollout should
                  be performed if the specified criteria is met.
                properties:
                  certificatesExpiryDays:
                    description: CertificatesExpiryDays indicates a rollout needs
                      to be performed if the certificates of the machine will expire
                      within the specified days.
                    format: int32
                    type: integer
                type: object
              rolloutStrategy:
                default:
                  rollingUpdate:
                    maxSurge: 1
                  type: RollingUpdate
                description: The RolloutStrategy to use to replace control plane machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if RolloutStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of control planes that can
                          be scheduled above or under the desired number of control
                          planes. Value can be an absolute number 1 or 0. Defaults
                          to 1. Example: when this is set to 1, the control plane
                          can be scaled up immediately when the rolling update starts.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of rollout. Currently the only supported strategy
                      is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              version:
                description: 'Version defines the desired Kubernetes version. Please
                  note that if kubeadmConfigSpec.ClusterConfiguration.imageRepository
                  is not set we don''t allow upgrades to versions >= v1.22.0 for which
                  kubeadm uses the old registry (k8s.gcr.io). Please use a newer patch
                  version with the new registry instead. The default registries of
                  kubeadm are: * registry.k8s.io (new registry): >= v1.22.17, >= v1.23.15,
                  >= v1.24.9, >= v1.25.0 * k8s.gcr.io (old registry): all older versions'
                type: string
            required:
            - kubeadmConfigSpec
            - machineTemplate
            - version
            type: object
          status:
            description: KubeadmControlPlaneStatus defines the observed state of KubeadmControlPlane.
            properties:
              conditions:
                description: Conditions defines current service state of the KubeadmControlPlane.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: ErrorMessage indicates that there is a terminal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a terminal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              initialized:
                description: Initialized denotes whether or not the control plane
                  has the uploaded kubeadm-config configmap.
                type: boolean
              lastRemediation:
                description: LastRemediation stores info about last remediation performed.
                properties:
                  machine:
                    description: Machine is the machine name of the latest machine
                      being remediated.
                    type: string
                  retryCount:
                    description: RetryCount used to keep track of remediation retry
                      for the last remediated machine. A retry happens when a machine
                      that was created as a replacement for an unhealthy machine also
                      fails.
                    format: int32
                    type: integer
                  timestamp:
                    description: Timestamp is when last remediation happened. It is
                      represented in RFC3339 form and is in UTC.
                    format: date-time
                    type: string
                required:
                - machine
                - retryCount
                - timestamp
                type: object
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready denotes that the KubeadmControlPlane API Server
                  is ready to receive requests.
                type: boolean
              readyReplicas:
                description: Total number of fully running and ready control plane
                  machines.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  control plane (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the label selector in string format to avoid
                  introspection by clients, and is used to provide the CRD-based integration
                  for the scale subresource and additional integrations for things
                  like kubectl describe.. The string will be in the same format as
                  the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  control plane. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet ready or machines
                  that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  control plane that have the desired template spec.
                format: int32
                type: integer
              version:
                description: Version represents the minimum Kubernetes version for
                  the control plane machines in the cluster.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    cluster.x-k8s.io/v1alpha3: v1alpha3
    cluster.x-k8s.io/v1alpha4: v1alpha4
    cluster.x-k8s.io/v1beta1: v1beta1
    clusterctl.cluster.x-k8s.io: ""
  name: kubeadmcontrolplanetemplates.controlplane.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-control-plane-webhook-service
          namespace: capi-kubeadm-control-plane-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: controlplane.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmControlPlaneTemplate
    listKind: KubeadmControlPlaneTemplateList
    plural: kubeadmcontrolplanetemplates
    singular: kubeadmcontrolplanetemplate
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Time duration since creation of KubeadmControlPlaneTemplate
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "KubeadmControlPlaneTemplate is the Schema for the kubeadmcontrolplanetemplates
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneTemplateSpec defines the desired state
              of KubeadmControlPlaneTemplate.
            properties:
              template:
                description: KubeadmControlPlaneTemplateResource describes the data
                  needed to create a KubeadmControlPlane from a template.
                properties:
                  spec:
                    description: KubeadmControlPlaneSpec defines the desired state
                      of KubeadmControlPlane.
                    properties:
                      kubeadmConfigSpec:
                        description: KubeadmConfigSpec is a KubeadmConfigSpec to use
                          for initializing and joining machines to the control plane.
                        properties:
                          clusterConfiguration:
                            description: ClusterConfiguration along with InitConfiguration
                              are the configurations necessary for the init command
                            properties:
                              apiServer:
                                description: APIServer contains extra settings for
                                  the API server control plane component
                                properties:
                                  certSANs:
                                    description: CertSANs sets extra Subject Alternative
                                      Names for the API Server signing cert.
                                    items:
                                      type: string
                                    type: array
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: 'ExtraArgs is an extra set of flags
                                      to pass to the control plane component. TODO:
                                      This is temporary and ideally we would like
                                      to switch all components to use ComponentConfig
                                      + ConfigMaps.'
                                    type: object
                                  extraVolumes:
                                    description: ExtraVolumes is an extra set of host
                                      volumes, mounted to the control plane component.
                                    items:
                                      description: HostPathMount contains elements
                                        describing volumes that are mounted from the
                                        host.
                                      properties:
                                        hostPath:
                                          description: HostPath is the path in the
                                            host that will be mounted inside the pod.
                                          type: string
                                        mountPath:
                                          description: MountPath is the path inside
                                            the pod where hostPath will be mounted.
                                          type: string
                                        name:
                                          description: Name of the volume inside the
                                            pod template.
                                          type: string
                                        pathType:
                                          description: PathType is the type of the
                                            HostPath.
                                          type: string
                                        readOnly:
                                          description: ReadOnly controls write access
                                            to the volume
                                          type: boolean
                                      required:
                                      - hostPath
                                      - mountPath
                                      - name
                                      type: object
                                    type: array
                                  timeoutForControlPlane:
                                    description: TimeoutForControlPlane controls the
                                      timeout that we use for API server to appear
                                    type: string
                                type: object
                              apiVersion:
                                description: 'APIVersion defines the versioned schema
                                  of this representation of an object. Servers should
                                  convert recognized schemas to the latest internal
                                  value, and may reject unrecognized values. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                                type: string
                              certificatesDir:
                                description: 'CertificatesDir specifies where to store
                                  or look for all required certificates. NB: if not
                                  provided, this will default to `/etc/kubernetes/pki`'
                                type: string
                              clusterName:
                                description: The cluster name
                                type: string
                              controlPlaneEndpoint:
                                description: 'ControlPlaneEndpoint sets a stable IP
                                  address or DNS name for the control plane; it can
                                  be a valid IP address or a RFC-1123 DNS subdomain,
                                  both with optional TCP port. In case the ControlPlaneEndpoint
                                  is not specified, the AdvertiseAddress + BindPort
                                  are used; in case the ControlPlaneEndpoint is specified
                                  but without a TCP port, the BindPort is used. Possible
                                  usages are: e.g. In a cluster with more than one
                                  control plane instances, this field should be assigned
                                  the address of the external load balancer in front
                                  of the control plane instances. e.g.  in environments
                                  with enforced node recycling, the ControlPlaneEndpoint
                                  could be used for assigning a stable DNS to the
                                  control plane. NB: This value defaults to the first
                                  value in the Cluster object status.apiEndpoints
                                  array.'
                                type: string
                              controllerManager:
                                description: ControllerManager contains extra settings
                                  for the controller manager control plane component
                                properties:
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: 'ExtraArgs is an extra set of flags
                                      to pass to the control plane component. TODO:
                                      This is temporary and ideally we would like
                                      to switch all components to use ComponentConfig
                                      + ConfigMaps.'
                                    type: object
                                  extraVolumes:
                                    description: ExtraVolumes is an extra set of host
                                      volumes, mounted to the control plane component.
                                    items:
                                      description: HostPathMount contains elements
                                        describing volumes that are mounted from the
                                        host.
                                      properties:
                                        hostPath:
                                          description: HostPath is the path in the
                                            host that will be mounted inside the pod.
                                          type: string
                                        mountPath:
                                          description: MountPath is the path inside
                                            the pod where hostPath will be mounted.
                                          type: string
                                        name:
                                          description: Name of the volume inside the
                                            pod template.
                                          type: string
                                        pathType:
                                          description: PathType is the type of the
                                            HostPath.
                                          type: string
                                        readOnly:
                                          description: ReadOnly controls write access
                                            to the volume
                                          type: boolean
                                      required:
                                      - hostPath
                                      - mountPath
                                      - name
                                      type: object
                                    type: array
                                type: object
                              dns:
                                description: DNS defines the options for the DNS add-on
                                  installed in the cluster.
                                properties:
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                type: object
                              etcd:
                                description: 'Etcd holds configuration for etcd. NB:
                                  This value defaults to a Local (stacked) etcd'
                                properties:
                                  external:
                                    description: External describes how to connect
                                      to an external etcd cluster Local and External
                                      are mutually exclusive
                                    properties:
                                      caFile:
                                        description: CAFile is an SSL Certificate
                                          Authority file used to secure etcd communication.
                                          Required if using a TLS connection.
                                        type: string
                                      certFile:
                                        description: CertFile is an SSL certification
                                          file used to secure etcd communication.
                                          Required if using a TLS connection.
                                        type: string
                                      endpoints:
                                        description: Endpoints of etcd members. Required
                                          for ExternalEtcd.
                                        items:
                                          type: string
                                        type: array
                                      keyFile:
                                        description: KeyFile is an SSL key file used
                                          to secure etcd communication. Required if
                                          using a TLS connection.
                                        type: string
                                    required:
                                    - caFile
                                    - certFile
                                    - endpoints
                                    - keyFile
                                    type: object
                                  local:
                                    description: Local provides configuration knobs
                                      for configuring the local etcd instance Local
                                      and External are mutually exclusive
                                    properties:
                                      dataDir:
                                        description: DataDir is the directory etcd
                                          will place its data. Defaults to "/var/lib/etcd".
                                        type: string
                                      extraArgs:
                                        additionalProperties:
                                          type: string
                                        description: ExtraArgs are extra arguments
                                          provided to the etcd binary when run inside
                                          a static pod.
                                        type: object
                                      imageRepository:
                                        description: ImageRepository sets the container
                                          registry to pull images from. if not set,
                                          the ImageRepository defined in ClusterConfiguration
                                          will be used instead.
                                        type: string
                                      imageTag:
                                        description: ImageTag allows to specify a
                                          tag for the image. In case this value is
                                          set, kubeadm does not change automatically
                                          the version of the above components during
                                          upgrades.
                                        type: string
                                      peerCertSANs:
                                        description: PeerCertSANs sets extra Subject
                                          Alternative Names for the etcd peer signing
                                          cert.
                                        items:
                                          type: string
                                        type: array
                                      serverCertSANs:
                                        description: ServerCertSANs sets extra Subject
                                          Alternative Names for the etcd server signing
                                          cert.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                type: object
                              featureGates:
                                additionalProperties:
                                  type: boolean
                                description: FeatureGates enabled by the user.
                                type: object
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. If empty, `registry.k8s.io`
                                  will be used by default; in case of kubernetes version
                                  is a CI build (kubernetes version starts with `ci/`
                                  or `ci-cross/`) `gcr.io/k8s-staging-ci-images` will
                                  be used as a default for control plane components
                                  and for kube-proxy, while `registry.k8s.io` will
                                  be used for all the other images.
                                type: string
                              kind:
                                description: 'Kind is a string value representing
                                  the REST resource this object represents. Servers
                                  may infer this from the endpoint the client submits
                                  requests to. Cannot be updated. In CamelCase. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              kubernetesVersion:
                                description: 'KubernetesVersion is the target version
                                  of the control plane. NB: This value defaults to
                                  the Machine object spec.version'
                                type: string
                              networking:
                                description: 'Networking holds configuration for the
                                  networking topology of the cluster. NB: This value
                                  defaults to the Cluster object spec.clusterNetwork.'
                                properties:
                                  dnsDomain:
                                    description: DNSDomain is the dns domain used
                                      by k8s services. Defaults to "cluster.local".
                                    type: string
                                  podSubnet:
                                    description: PodSubnet is the subnet used by pods.
                                      If unset, the API server will not allocate CIDR
                                      ranges for every node. Defaults to a comma-delimited
                                      string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                      if that is set
                                    type: string
                                  serviceSubnet:
                                    description: ServiceSubnet is the subnet used
                                      by k8s services. Defaults to a comma-delimited
                                      string of the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                      or to "10.96.0.0/12" if that's unset.
                                    type: string
                                type: object
                              scheduler:
                                description: Scheduler contains extra settings for
                                  the scheduler control plane component
                                properties:
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: 'ExtraArgs is an extra set of flags
                                      to pass to the control plane component. TODO:
                                      This is temporary and ideally we would like
                                      to switch all components to use ComponentConfig
                                      + ConfigMaps.'
                                    type: object
                                  extraVolumes:
                                    description: ExtraVolumes is an extra set of host
                                      volumes, mounted to the control plane component.
                                    items:
                                      description: HostPathMount contains elements
                                        describing volumes that are mounted from the
                                        host.
                                      properties:
                                        hostPath:
                                          description: HostPath is the path in the
                                            host that will be mounted inside the pod.
                                          type: string
                                        mountPath:
                                          description: MountPath is the path inside
                                            the pod where hostPath will be mounted.
                                          type: string
                                        name:
                                          description: Name of the volume inside the
                                            pod template.
                                          type: string
                                        pathType:
                                          description: PathType is the type of the
                                            HostPath.
                                          type: string
                                        readOnly:
                                          description: ReadOnly controls write access
                                            to the volume
                                          type: boolean
                                      required:
                                      - hostPath
                                      - mountPath
                                      - name
                                      type: object
                                    type: array
                                type: object
                            type: object
                          diskSetup:
                            description: DiskSetup specifies options for the creation
                              of partition tables and file systems on devices.
                            properties:
                              filesystems:
                                description: Filesystems specifies the list of file
                                  systems to setup.
                                items:
                                  description: Filesystem defines the file systems
                                    to be created.
                                  properties:
                                    device:
                                      description: Device specifies the device name
                                      type: string
                                    extraOpts:
                                      description: ExtraOpts defined extra options
                                        to add to the command for creating the file
                                        system.
                                      items:
                                        type: string
                                      type: array
                                    filesystem:
                                      description: Filesystem specifies the file system
                                        type.
                                      type: string
                                    label:
                                      description: Label specifies the file system
                                        label to be used. If set to None, no label
                                        is used.
                                      type: string
                                    overwrite:
                                      description: Overwrite defines whether or not
                                        to overwrite any existing filesystem. If true,
                                        any pre-existing file system will be destroyed.
                                        Use with Caution.
                                      type: boolean
                                    partition:
                                      description: 'Partition specifies the partition
                                        to use. The valid options are: "auto|any",
                                        "auto", "any", "none", and <NUM>, where NUM
                                        is the actual partition number.'
                                      type: string
                                    replaceFS:
                                      description: 'ReplaceFS is a special directive,
                                        used for Microsoft Azure that instructs cloud-init
                                        to replace a file system of <FS_TYPE>. NOTE:
                                        unless you define a label, this requires the
                                        use of the ''any'' partition directive.'
                                      type: string
                                  required:
                                  - device
                                  - filesystem
                                  - label
                                  type: object
                                type: array
                              partitions:
                                description: Partitions specifies the list of the
                                  partitions to setup.
                                items:
                                  description: Partition defines how to create and
                                    layout a partition.
                                  properties:
                                    device:
                                      description: Device is the name of the device.
                                      type: string
                                    layout:
                                      description: Layout specifies the device layout.
                                        If it is true, a single partition will be
                                        created for the entire device. When layout
                                        is false, it means don't partition or ignore
                                        existing partitioning.
                                      type: boolean
                                    overwrite:
                                      description: Overwrite describes whether to
                                        skip checks and create the partition if a
                                        partition or filesystem is found on the device.
                                        Use with caution. Default is 'false'.
                                      type: boolean
                                    tableType:
                                      description: 'TableType specifies the tupe of
                                        partition table. The following are supported:
                                        ''mbr'': default and setups a MS-DOS partition
                                        table ''gpt'': setups a GPT partition table'
                                      type: string
                                  required:
                                  - device
                                  - layout
                                  type: object
                                type: array
                            type: object
                          files:
                            description: Files specifies extra files to be passed
                              to user_data upon creation.
                            items:
                              description: File defines the input for generating write_files
                                in cloud-init.
                              properties:
                                content:
                                  description: Content is the actual content of the
                                    file.
                                  type: string
                                contentFrom:
                                  description: ContentFrom is a referenced source
                                    of content to populate the file.
                                  properties:
                                    secret:
                                      description: Secret represents a secret that
                                        should populate this file.
                                      properties:
                                        key:
                                          description: Key is the key in the secret's
                                            data map for this value.
                                          type: string
                                        name:
                                          description: Name of the secret in the KubeadmBootstrapConfig's
                                            namespace to use.
                                          type: string
                                      required:
                                      - key
                                      - name
                                      type: object
                                  required:
                                  - secret
                                  type: object
                                encoding:
                                  description: Encoding specifies the encoding of
                                    the file contents.
                                  enum:
                                  - base64
                                  - gzip
                                  - gzip+base64
                                  type: string
                                owner:
                                  description: Owner specifies the ownership of the
                                    file, e.g. "root:root".
                                  type: string
                                path:
                                  description: Path specifies the full path on disk
                                    where to store the file.
                                  type: string
                                permissions:
                                  description: Permissions specifies the permissions
                                    to assign to the file, e.g. "0640".
                                  type: string
                              required:
                              - path
                              type: object
                            type: array
                          format:
                            description: Format specifies the output format of the
                              bootstrap data
                            enum:
                            - cloud-config
                            type: string
                          initConfiguration:
                            description: InitConfiguration along with ClusterConfiguration
                              are the configurations necessary for the init command
                            properties:
                              apiVersion:
                                description: 'APIVersion defines the versioned schema
                                  of this representation of an object. Servers should
                                  convert recognized schemas to the latest internal
                                  value, and may reject unrecognized values. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                                type: string
                              bootstrapTokens:
                                description: BootstrapTokens is respected at `kubeadm
                                  init` time and describes a set of Bootstrap Tokens
                                  to create. This information IS NOT uploaded to the
                                  kubeadm cluster configmap, partly because of its
                                  sensitive nature
                                items:
                                  description: BootstrapToken describes one bootstrap
                                    token, stored as a Secret in the cluster.
                                  properties:
                                    description:
                                      description: Description sets a human-friendly
                                        message why this token exists and what it's
                                        used for, so other administrators can know
                                        its purpose.
                                      type: string
                                    expires:
                                      description: Expires specifies the timestamp
                                        when this token expires. Defaults to being
                                        set dynamically at runtime based on the TTL.
                                        Expires and TTL are mutually exclusive.
                                      format: date-time
                                      type: string
                                    groups:
                                      description: Groups specifies the extra groups
                                        that this token will authenticate as when/if
                                        used for authentication
                                      items:
                                        type: string
                                      type: array
                                    token:
                                      description: Token is used for establishing
                                        bidirectional trust between nodes and control-planes.
                                        Used for joining nodes in the cluster.
                                      type: string
                                    ttl:
                                      description: TTL defines the time to live for
                                        this token. Defaults to 24h. Expires and TTL
                                        are mutually exclusive.
                                      type: string
                                    usages:
                                      description: Usages describes the ways in which
                                        this token can be used. Can by default be
                                        used for establishing bidirectional trust,
                                        but that can be changed here.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - token
                                  type: object
                                type: array
                              kind:
                                description: 'Kind is a string value representing
                                  the REST resource this object represents. Servers
                                  may infer this from the endpoint the client submits
                                  requests to. Cannot be updated. In CamelCase. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance that's deployed on this
                                  control plane node In HA setups, this differs from
                                  ClusterConfiguration.ControlPlaneEndpoint in the
                                  sense that ControlPlaneEndpoint is the global endpoint
                                  for the cluster, which then loadbalances the requests
                                  to each individual API server. This configuration
                                  object lets you customize what IP/DNS name and port
                                  the local API server advertises it's accessible
                                  on. By default, kubeadm tries to auto-detect the
                                  IP of the default interface and use that, but in
                                  case that process fails you may set the desired
                                  value here.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                type: object
                              nodeRegistration:
                                description: NodeRegistration holds fields that relate
                                  to registering the new control-plane node to the
                                  cluster. When used in the context of control plane
                                  nodes, NodeRegistration should remain consistent
                                  across both InitConfiguration and JoinConfiguration
                                properties:
                                  criSocket:
                                    description: CRISocket is used to retrieve container
                                      runtime info. This information will be annotated
                                      to the Node API object, for later re-use
                                    type: string
                                  ignorePreflightErrors:
                                    description: IgnorePreflightErrors provides a
                                      slice of pre-flight errors to be ignored when
                                      the current node is registered.
                                    items:
                                      type: string
                                    type: array
                                  kubeletExtraArgs:
                                    additionalProperties:
                                      type: string
                                    description: KubeletExtraArgs passes through extra
                                      arguments to the kubelet. The arguments here
                                      are passed to the kubelet command line via the
                                      environment file kubeadm writes at runtime for
                                      the kubelet to source. This overrides the generic
                                      base-level configuration in the kubelet-config-1.X
                                      ConfigMap Flags have higher priority when parsing.
                                      These values are local and specific to the node
                                      kubeadm is executing on.
                                    type: object
                                  name:
                                    description: Name is the `.Metadata.Name` field
                                      of the Node API object that will be created
                                      in this `kubeadm init` or `kubeadm join` operation.
                                      This field is also used in the CommonName field
                                      of the kubelet's client certificate to the API
                                      server. Defaults to the hostname of the node
                                      if not provided.
                                    type: string
                                  taints:
                                    description: 'Taints specifies the taints the
                                      Node API object should be registered with. If
                                      this field is unset, i.e. nil, in the `kubeadm
                                      init` process it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                      If you don''t want to taint your control-plane
                                      node, set this field to an empty slice, i.e.
                                      `taints: {}` in the YAML file. This field is
                                      solely used for Node registration.'
                                    items:
                                      description: The node this Taint is attached
                                        to has the "effect" on any pod that does not
                                        tolerate the Taint.
                                      properties:
                                        effect:
                                          description: Required. The effect of the
                                            taint on pods that do not tolerate the
                                            taint. Valid effects are NoSchedule, PreferNoSchedule
                                            and NoExecute.
                                          type: string
                                        key:
                                          description: Required. The taint key to
                                            be applied to a node.
                                          type: string
                                        timeAdded:
                                          description: TimeAdded represents the time
                                            at which the taint was added. It is only
                                            written for NoExecute taints.
                                          format: date-time
                                          type: string
                                        value:
                                          description: The taint value corresponding
                                            to the taint key.
                                          type: string
                                      required:
                                      - effect
                                      - key
                                      type: object
                                    type: array
                                type: object
                            type: object
                          joinConfiguration:
                            description: JoinConfiguration is the kubeadm configuration
                              for the join command
                            properties:
                              apiVersion:
                                description: 'APIVersion defines the versioned schema
                                  of this representation of an object. Servers should
                                  convert recognized schemas to the latest internal
                                  value, and may reject unrecognized values. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                                type: string
                              caCertPath:
                                description: 'CACertPath is the path to the SSL certificate
                                  authority used to secure comunications between node
                                  and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                                  TODO: revisit when there is defaulting from k/k'
                                type: string
                              controlPlane:
                                description: ControlPlane defines the additional control
                                  plane instance to be deployed on the joining node.
                                  If nil, no additional control plane instance will
                                  be deployed.
                                properties:
                                  localAPIEndpoint:
                                    description: LocalAPIEndpoint represents the endpoint
                                      of the API server instance to be deployed on
                                      this node.
                                    properties:
                                      advertiseAddress:
                                        description: AdvertiseAddress sets the IP
                                          address for the API server to advertise.
                                        type: string
                                      bindPort:
                                        description: BindPort sets the secure port
                                          for the API Server to bind to. Defaults
                                          to 6443.
                                        format: int32
                                        type: integer
                                    type: object
                                type: object
                              discovery:
                                description: 'Discovery specifies the options for
                                  the kubelet to use during the TLS Bootstrap process
                                  TODO: revisit when there is defaulting from k/k'
                                properties:
                                  bootstrapToken:
                                    description: BootstrapToken is used to set the
                                      options for bootstrap token based discovery
                                      BootstrapToken and File are mutually exclusive
                                    properties:
                                      apiServerEndpoint:
                                        description: APIServerEndpoint is an IP or
                                          domain name to the API server from which
                                          info will be fetched.
                                        type: string
                                      caCertHashes:
                                        description: 'CACertHashes specifies a set
                                          of public key pins to verify when token-based
                                          discovery is used. The root CA found during
                                          discovery must match one of these values.
                                          Specifying an empty set disables root CA
                                          pinning, which can be unsafe. Each hash
                                          is specified as "<type>:<value>", where
                                          the only currently supported type is "sha256".
                                          This is a hex-encoded SHA-256 hash of the
                                          Subject Public Key Info (SPKI) object in
                                          DER-encoded ASN.1. These hashes can be calculated
                                          using, for example, OpenSSL: openssl x509
                                          -pubkey -in ca.crt openssl rsa -pubin -outform
                                          der 2>&/dev/null | openssl dgst -sha256
                                          -hex'
                                        items:
                                          type: string
                                        type: array
                                      token:
                                        description: Token is a token used to validate
                                          cluster information fetched from the control-plane.
                                        type: string
                                      unsafeSkipCAVerification:
                                        description: UnsafeSkipCAVerification allows
                                          token-based discovery without CA verification
                                          via CACertHashes. This can weaken the security
                                          of kubeadm since other nodes can impersonate
                                          the control-plane.
                                        type: boolean
                                    required:
                                    - token
                                    type: object
                                  file:
                                    description: File is used to specify a file or
                                      URL to a kubeconfig file from which to load
                                      cluster information BootstrapToken and File
                                      are mutually exclusive
                                    properties:
                                      kubeConfigPath:
                                        description: KubeConfigPath is used to specify
                                          the actual file path or URL to the kubeconfig
                                          file from which to load cluster information
                                        type: string
                                    required:
                                    - kubeConfigPath
                                    type: object
                                  timeout:
                                    description: Timeout modifies the discovery timeout
                                    type: string
                                  tlsBootstrapToken:
                                    description: TLSBootstrapToken is a token used
                                      for TLS bootstrapping. If .BootstrapToken is
                                      set, this field is defaulted to .BootstrapToken.Token,
                                      but can be overridden. If .File is set, this
                                      field **must be set** in case the KubeConfigFile
                                      does not contain any other authentication information
                                    type: string
                                type: object
                              kind:
                                description: 'Kind is a string value representing
                                  the REST resource this object represents. Servers
                                  may infer this from the endpoint the client submits
                                  requests to. Cannot be updated. In CamelCase. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              nodeRegistration:
                                description: NodeRegistration holds fields that relate
                                  to registering the new control-plane node to the
                                  cluster. When used in the context of control plane
                                  nodes, NodeRegistration should remain consistent
                                  across both InitConfiguration and JoinConfiguration
                                properties:
                                  criSocket:
                                    description: CRISocket is used to retrieve container
                                      runtime info. This information will be annotated
                                      to the Node API object, for later re-use
                                    type: string
                                  ignorePreflightErrors:
                                    description: IgnorePreflightErrors provides a
                                      slice of pre-flight errors to be ignored when
                                      the current node is registered.
                                    items:
                                      type: string
                                    type: array
                                  kubeletExtraArgs:
                                    additionalProperties:
                                      type: string
                                    description: KubeletExtraArgs passes through extra
                                      arguments to the kubelet. The arguments here
                                      are passed to the kubelet command line via the
                                      environment file kubeadm writes at runtime for
                                      the kubelet to source. This overrides the generic
                                      base-level configuration in the kubelet-config-1.X
                                      ConfigMap Flags have higher priority when parsing.
                                      These values are local and specific to the node
                                      kubeadm is executing on.
                                    type: object
                                  name:
                                    description: Name is the `.Metadata.Name` field
                                      of the Node API object that will be created
                                      in this `kubeadm init` or `kubeadm join` operation.
                                      This field is also used in the CommonName field
                                      of the kubelet's client certificate to the API
                                      server. Defaults to the hostname of the node
                                      if not provided.
                                    type: string
                                  taints:
                                    description: 'Taints specifies the taints the
                                      Node API object should be registered with. If
                                      this field is unset, i.e. nil, in the `kubeadm
                                      init` process it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                      If you don''t want to taint your control-plane
                                      node, set this field to an empty slice, i.e.
                                      `taints: {}` in the YAML file. This field is
                                      solely used for Node registration.'
                                    items:
                                      description: The node this Taint is attached
                                        to has the "effect" on any pod that does not
                                        tolerate the Taint.
                                      properties:
                                        effect:
                                          description: Required. The effect of the
                                            taint on pods that do not tolerate the
                                            taint. Valid effects are NoSchedule, PreferNoSchedule
                                            and NoExecute.
                                          type: string
                                        key:
                                          description: Required. The taint key to
                                            be applied to a node.
                                          type: string
                                        timeAdded:
                                          description: TimeAdded represents the time
                                            at which the taint was added. It is only
                                            written for NoExecute taints.
                                          format: date-time
                                          type: string
                                        value:
                                          description: The taint value corresponding
                                            to the taint key.
                                          type: string
                                      required:
                                      - effect
                                      - key
                                      type: object
                                    type: array
                                type: object
                            type: object
                          mounts:
                            description: Mounts specifies a list of mount points to
                              be setup.
                            items:
                              description: MountPoints defines input for generated
                                mounts in cloud-init.
                              items:
                                type: string
                              type: array
                            type: array
                          ntp:
                            description: NTP specifies NTP configuration
                            properties:
                              enabled:
                                description: Enabled specifies whether NTP should
                                  be enabled
                                type: boolean
                              servers:
                                description: Servers specifies which NTP servers to
                                  use
                                items:
                                  type: string
                                type: array
                            type: object
                          postKubeadmCommands:
                            description: PostKubeadmCommands specifies extra commands
                              to run after kubeadm runs
                            items:
                              type: string
                            type: array
                          preKubeadmCommands:
                            description: PreKubeadmCommands specifies extra commands
                              to run before kubeadm runs
                            items:
                              type: string
                            type: array
                          useExperimentalRetryJoin:
                            description: "UseExperimentalRetryJoin replaces a basic
                              kubeadm command with a shell script with retries for
                              joins. \n This is meant to be an experimental temporary
                              workaround on some environments where joins fail due
                              to timing (and other issues). The long term goal is
                              to add retries to kubeadm proper and use that functionality.
                              \n This will add about 40KB to userdata \n For more
                              information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                            type: boolean
                          users:
                            description: Users specifies extra users to add
                            items:
                              description: User defines the input for a generated
                                user in cloud-init.
                              properties:
                                gecos:
                                  description: Gecos specifies the gecos to use for
                                    the user
                                  type: string
                                groups:
                                  description: Groups specifies the additional groups
                                    for the user
                                  type: string
                                homeDir:
                                  description: HomeDir specifies the home directory
                                    to use for the user
                                  type: string
                                inactive:
                                  description: Inactive specifies whether to mark
                                    the user as inactive
                                  type: boolean
                                lockPassword:
                                  description: LockPassword specifies if password
                                    login should be disabled
                                  type: boolean
                                name:
                                  description: Name specifies the user name
                                  type: string
                                passwd:
                                  description: Passwd specifies a hashed password
                                    for the user
                                  type: string
                                primaryGroup:
                                  description: PrimaryGroup specifies the primary
                                    group for the user
                                  type: string
                                shell:
                                  description: Shell specifies the user's shell
                                  type: string
                                sshAuthorizedKeys:
                                  description: SSHAuthorizedKeys specifies a list
                                    of ssh authorized keys for the user
                                  items:
                                    type: string
                                  type: array
                                sudo:
                                  description: Sudo specifies a sudo role for the
                                    user
                                  type: string
                              required:
                              - name
                              type: object
                            type: array
                          verbosity:
                            description: Verbosity is the number for the kubeadm log
                              level verbosity. It overrides the `--v` flag in kubeadm
                              commands.
                            format: int32
                            type: integer
                        type: object
                      machineTemplate:
                        description: MachineTemplate contains information about how
                          machines should be shaped when creating or updating a control
                          plane.
                        properties:
                          infrastructureRef:
                            description: InfrastructureRef is a required reference
                              to a custom resource offered by an infrastructure provider.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          metadata:
                            description: 'Standard object''s metadata. More info:
                              https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: 'Annotations is an unstructured key value
                                  map stored with a resource that may be set by external
                                  tools to store and retrieve arbitrary metadata.
                                  They are not queryable and should be preserved when
                                  modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                type: object
                              labels:
                                additionalProperties:
                                  type: string
                                description: 'Map of string keys and values that can
                                  be used to organize and categorize (scope and select)
                                  objects. May match selectors of replication controllers
                                  and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                type: object
                            type: object
                          nodeDrainTimeout:
                            description: 'NodeDrainTimeout is the total amount of
                              time that the controller will spend on draining a controlplane
                              node The default value is 0, meaning that the node can
                              be drained without any time limitations. NOTE: NodeDrainTimeout
                              is different from `kubectl drain --timeout`'
                            type: string
                        required:
                        - infrastructureRef
                        type: object
                      replicas:
                        description: Number of desired machines. Defaults to 1. When
                          stacked etcd is used only odd numbers are permitted, as
                          per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members).
                          This is a pointer to distinguish between explicit zero and
                          not specified.
                        format: int32
                        type: integer
                      rolloutAfter:
                        description: RolloutAfter is a field to indicate a rollout
                          should be performed after the specified time even if no
                          changes have been made to the KubeadmControlPlane.
                        format: date-time
                        type: string
                      rolloutStrategy:
                        default:
                          rollingUpdate:
                            maxSurge: 1
                          type: RollingUpdate
                        description: The RolloutStrategy to use to replace control
                          plane machines with new ones.
                        properties:
                          rollingUpdate:
                            description: Rolling update config params. Present only
                              if RolloutStrategyType = RollingUpdate.
                            properties:
                              maxSurge:
                                anyOf:
                                - type: integer
                                - type: string
                                description: 'The maximum number of control planes
                                  that can be scheduled above or under the desired
                                  number of control planes. Value can be an absolute
                                  number 1 or 0. Defaults to 1. Example: when this
                                  is set to 1, the control plane can be scaled up
                                  immediately when the rolling update starts.'
                                x-kubernetes-int-or-string: true
                            type: object
                          type:
                            description: Type of rollout. Currently the only supported
                              strategy is "RollingUpdate". Default is RollingUpdate.
                            type: string
                        type: object
                      version:
                        description: Version defines the desired Kubernetes version.
                        type: string
                    required:
                    - kubeadmConfigSpec
                    - machineTemplate
                    - version
                    type: object
                required:
                - spec
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: false
    subresources: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of KubeadmControlPlaneTemplate
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: KubeadmControlPlaneTemplate is the Schema for the kubeadmcontrolplanetemplates
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneTemplateSpec defines the desired state
              of KubeadmControlPlaneTemplate.
            properties:
              template:
                description: KubeadmControlPlaneTemplateResource describes the data
                  needed to create a KubeadmControlPlane from a template.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'KubeadmControlPlaneTemplateResourceSpec defines
                      the desired state of KubeadmControlPlane. NOTE: KubeadmControlPlaneTemplateResourceSpec
                      is similar to KubeadmControlPlaneSpec but omits Replicas and
                      Version fields. These fields do not make sense on the KubeadmControlPlaneTemplate,
                      because they are calculated by the Cluster topology reconciler
                      during reconciliation and thus cannot be configured on the KubeadmControlPlaneTemplate.'
                    properties:
                      kubeadmConfigSpec:
                        description: KubeadmConfigSpec is a KubeadmConfigSpec to use
                          for initializing and joining machines to the control plane.
                        properties:
                          clusterConfiguration:
                            description: ClusterConfiguration along with InitConfiguration
                              are the configurations necessary for the init command
                            properties:
                              apiServer:
                                description: APIServer contains extra settings for
                                  the API server control plane component
                                properties:
                                  certSANs:
                                    description: CertSANs sets extra Subject Alternative
                                      Names for the API Server signing cert.
                                    items:
                                      type: string
                                    type: array
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: 'ExtraArgs is an extra set of flags
                                      to pass to the control plane component. TODO:
                                      This is temporary and ideally we would like
                                      to switch all components to use ComponentConfig
                                      + ConfigMaps.'
                                    type: object
                                  extraVolumes:
                                    description: ExtraVolumes is an extra set of host
                                      volumes, mounted to the control plane component.
                                    items:
                                      description: HostPathMount contains elements
                                        describing volumes that are mounted from the
                                        host.
                                      properties:
                                        hostPath:
                                          description: HostPath is the path in the
                                            host that will be mounted inside the pod.
                                          type: string
                                        mountPath:
                                          description: MountPath is the path inside
                                            the pod where hostPath will be mounted.
                                          type: string
                                        name:
                                          description: Name of the volume inside the
                                            pod template.
                                          type: string
                                        pathType:
                                          description: PathType is the type of the
                                            HostPath.
                                          type: string
                                        readOnly:
                                          description: ReadOnly controls write access
                                            to the volume
                                          type: boolean
                                      required:
                                      - hostPath
                                      - mountPath
                                      - name
                                      type: object
                                    type: array
                                  timeoutForControlPlane:
                                    description: TimeoutForControlPlane controls the
                                      timeout that we use for API server to appear
                                    type: string
                                type: object
                              apiVersion:
                                description: 'APIVersion defines the versioned schema
                                  of this representation of an object. Servers should
                                  convert recognized schemas to the latest internal
                                  value, and may reject unrecognized values. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                                type: string
                              certificatesDir:
                                description: 'CertificatesDir specifies where to store
                                  or look for all required certificates. NB: if not
                                  provided, this will default to `/etc/kubernetes/pki`'
                                type: string
                              clusterName:
                                description: The cluster name
                                type: string
                              controlPlaneEndpoint:
                                description: 'ControlPlaneEndpoint sets a stable IP
                                  address or DNS name for the control plane; it can
                                  be a valid IP address or a RFC-1123 DNS subdomain,
                                  both with optional TCP port. In case the ControlPlaneEndpoint
                                  is not specified, the AdvertiseAddress + BindPort
                                  are used; in case the ControlPlaneEndpoint is specified
                                  but without a TCP port, the BindPort is used. Possible
                                  usages are: e.g. In a cluster with more than one
                                  control plane instances, this field should be assigned
                                  the address of the external load balancer in front
                                  of the control plane instances. e.g.  in environments
                                  with enforced node recycling, the ControlPlaneEndpoint
                                  could be used for assigning a stable DNS to the
                                  control plane. NB: This value defaults to the first
                                  value in the Cluster object status.apiEndpoints
                                  array.'
                                type: string
                              controllerManager:
                                description: ControllerManager contains extra settings
                                  for the controller manager control plane component
                                properties:
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: 'ExtraArgs is an extra set of flags
                                      to pass to the control plane component. TODO:
                                      This is temporary and ideally we would like
                                      to switch all components to use ComponentConfig
                                      + ConfigMaps.'
                                    type: object
                                  extraVolumes:
                                    description: ExtraVolumes is an extra set of host
                                      volumes, mounted to the control plane component.
                                    items:
                                      description: HostPathMount contains elements
                                        describing volumes that are mounted from the
                                        host.
                                      properties:
                                        hostPath:
                                          description: HostPath is the path in the
                                            host that will be mounted inside the pod.
                                          type: string
                                        mountPath:
                                          description: MountPath is the path inside
                                            the pod where hostPath will be mounted.
                                          type: string
                                        name:
                                          description: Name of the volume inside the
                                            pod template.
                                          type: string
                                        pathType:
                                          description: PathType is the type of the
                                            HostPath.
                                          type: string
                                        readOnly:
                                          description: ReadOnly controls write access
                                            to the volume
                                          type: boolean
                                      required:
                                      - hostPath
                                      - mountPath
                                      - name
                                      type: object
                                    type: array
                                type: object
                              dns:
                                description: DNS defines the options for the DNS add-on
                                  installed in the cluster.
                                properties:
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                type: object
                              etcd:
                                description: 'Etcd holds configuration for etcd. NB:
                                  This value defaults to a Local (stacked) etcd'
                                properties:
                                  external:
                                    description: External describes how to connect
                                      to an external etcd cluster Local and External
                                      are mutually exclusive
                                    properties:
                                      caFile:
                                        description: CAFile is an SSL Certificate
                                          Authority file used to secure etcd communication.
                                          Required if using a TLS connection.
                                        type: string
                                      certFile:
                                        description: CertFile is an SSL certification
                                          file used to secure etcd communication.
                                          Required if using a TLS connection.
                                        type: string
                                      endpoints:
                                        description: Endpoints of etcd members. Required
                                          for ExternalEtcd.
                                        items:
                                          type: string
                                        type: array
                                      keyFile:
                                        description: KeyFile is an SSL key file used
                                          to secure etcd communication. Required if
                                          using a TLS connection.
                                        type: string
                                    required:
                                    - caFile
                                    - certFile
                                    - endpoints
                                    - keyFile
                                    type: object
                                  local:
                                    description: Local provides configuration knobs
                                      for configuring the local etcd instance Local
                                      and External are mutually exclusive
                                    properties:
                                      dataDir:
                                        description: DataDir is the directory etcd
                                          will place its data. Defaults to "/var/lib/etcd".
                                        type: string
                                      extraArgs:
                                        additionalProperties:
                                          type: string
                                        description: ExtraArgs are extra arguments
                                          provided to the etcd binary when run inside
                                          a static pod.
                                        type: object
                                      imageRepository:
                                        description: ImageRepository sets the container
                                          registry to pull images from. if not set,
                                          the ImageRepository defined in ClusterConfiguration
                                          will be used instead.
                                        type: string
                                      imageTag:
                                        description: ImageTag allows to specify a
                                          tag for the image. In case this value is
                                          set, kubeadm does not change automatically
                                          the version of the above components during
                                          upgrades.
                                        type: string
                                      peerCertSANs:
                                        description: PeerCertSANs sets extra Subject
                                          Alternative Names for the etcd peer signing
                                          cert.
                                        items:
                                          type: string
                                        type: array
                                      serverCertSANs:
                                        description: ServerCertSANs sets extra Subject
                                          Alternative Names for the etcd server signing
                                          cert.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                type: object
                              featureGates:
                                additionalProperties:
                                  type: boolean
                                description: FeatureGates enabled by the user.
                                type: object
                              imageRepository:
                                description: 'ImageRepository sets the container registry
                                  to pull images from. * If not set, the default registry
                                  of kubeadm will be used, i.e. * registry.k8s.io
                                  (new registry): >= v1.22.17, >= v1.23.15, >= v1.24.9,
                                  >= v1.25.0 * k8s.gcr.io (old registry): all older
                                  versions Please note that when imageRepository is
                                  not set we don''t allow upgrades to versions >=
                                  v1.22.0 which use the old registry (k8s.gcr.io).
                                  Please use a newer patch version with the new registry
                                  instead (i.e. >= v1.22.17, >= v1.23.15, >= v1.24.9,
                                  >= v1.25.0). * If the version is a CI build (kubernetes
                                  version starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                                  will be used as a default for control plane components
                                  and for kube-proxy, while `registry.k8s.io` will
                                  be used for all the other images.'
                                type: string
                              kind:
                                description: 'Kind is a string value representing
                                  the REST resource this object represents. Servers
                                  may infer this from the endpoint the client submits
                                  requests to. Cannot be updated. In CamelCase. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              kubernetesVersion:
                                description: 'KubernetesVersion is the target version
                                  of the control plane. NB: This value defaults to
                                  the Machine object spec.version'
                                type: string
                              networking:
                                description: 'Networking holds configuration for the
                                  networking topology of the cluster. NB: This value
                                  defaults to the Cluster object spec.clusterNetwork.'
                                properties:
                                  dnsDomain:
                                    description: DNSDomain is the dns domain used
                                      by k8s services. Defaults to "cluster.local".
                                    type: string
                                  podSubnet:
                                    description: PodSubnet is the subnet used by pods.
                                      If unset, the API server will not allocate CIDR
                                      ranges for every node. Defaults to a comma-delimited
                                      string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                      if that is set
                                    type: string
                                  serviceSubnet:
                                    description: ServiceSubnet is the subnet used
                                      by k8s services. Defaults to a comma-delimited
                                      string of the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                      or to "10.96.0.0/12" if that's unset.
                                    type: string
                                type: object
                              scheduler:
                                description: Scheduler contains extra settings for
                                  the scheduler control plane component
                                properties:
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: 'ExtraArgs is an extra set of flags
                                      to pass to the control plane component. TODO:
                                      This is temporary and ideally we would like
                                      to switch all components to use ComponentConfig
                                      + ConfigMaps.'
                                    type: object
                                  extraVolumes:
                                    description: ExtraVolumes is an extra set of host
                                      volumes, mounted to the control plane component.
                                    items:
                                      description: HostPathMount contains elements
                                        describing volumes that are mounted from the
                                        host.
                                      properties:
                                        hostPath:
                                          description: HostPath is the path in the
                                            host that will be mounted inside the pod.
                                          type: string
                                        mountPath:
                                          description: MountPath is the path inside
                                            the pod where hostPath will be mounted.
                                          type: string
                                        name:
                                          description: Name of the volume inside the
                                            pod template.
                                          type: string
                                        pathType:
                                          description: PathType is the type of the
                                            HostPath.
                                          type: string
                                        readOnly:
                                          description: ReadOnly controls write access
                                            to the volume
                                          type: boolean
                                      required:
                                      - hostPath
                                      - mountPath
                                      - name
                                      type: object
                                    type: array
                                type: object
                            type: object
                          diskSetup:
                            description: DiskSetup specifies options for the creation
                              of partition tables and file systems on devices.
                            properties:
                              filesystems:
                                description: Filesystems specifies the list of file
                                  systems to setup.
                                items:
                                  description: Filesystem defines the file systems
                                    to be created.
                                  properties:
                                    device:
                                      description: Device specifies the device name
                                      type: string
                                    extraOpts:
                                      description: ExtraOpts defined extra options
                                        to add to the command for creating the file
                                        system.
                                      items:
                                        type: string
                                      type: array
                                    filesystem:
                                      description: Filesystem specifies the file system
                                        type.
                                      type: string
                                    label:
                                      description: Label specifies the file system
                                        label to be used. If set to None, no label
                                        is used.
                                      type: string
                                    overwrite:
                                      description: Overwrite defines whether or not
                                        to overwrite any existing filesystem. If true,
                                        any pre-existing file system will be destroyed.
                                        Use with Caution.
                                      type: boolean
                                    partition:
                                      description: 'Partition specifies the partition
                                        to use. The valid options are: "auto|any",
                                        "auto", "any", "none", and <NUM>, where NUM
                                        is the actual partition number.'
                                      type: string
                                    replaceFS:
                                      description: 'ReplaceFS is a special directive,
                                        used for Microsoft Azure that instructs cloud-init
                                        to replace a file system of <FS_TYPE>. NOTE:
                                        unless you define a label, this requires the
                                        use of the ''any'' partition directive.'
                                      type: string
                                  required:
                                  - device
                                  - filesystem
                                  - label
                                  type: object
                                type: array
                              partitions:
                                description: Partitions specifies the list of the
                                  partitions to setup.
                                items:
                                  description: Partition defines how to create and
                                    layout a partition.
                                  properties:
                                    device:
                                      description: Device is the name of the device.
                                      type: string
                                    layout:
                                      description: Layout specifies the device layout.
                                        If it is true, a single partition will be
                                        created for the entire device. When layout
                                        is false, it means don't partition or ignore
                                        existing partitioning.
                                      type: boolean
                                    overwrite:
                                      description: Overwrite describes whether to
                                        skip checks and create the partition if a
                                        partition or filesystem is found on the device.
                                        Use with caution. Default is 'false'.
                                      type: boolean
                                    tableType:
                                      description: 'TableType specifies the tupe of
                                        partition table. The following are supported:
                                        ''mbr'': default and setups a MS-DOS partition
                                        table ''gpt'': setups a GPT partition table'
                                      type: string
                                  required:
                                  - device
                                  - layout
                                  type: object
                                type: array
                            type: object
                          files:
                            description: Files specifies extra files to be passed
                              to user_data upon creation.
                            items:
                              description: File defines the input for generating write_files
                                in cloud-init.
                              properties:
                                append:
                                  description: Append specifies whether to append
                                    Content to existing file if Path exists.
                                  type: boolean
                                content:
                                  description: Content is the actual content of the
                                    file.
                                  type: string
                                contentFrom:
                                  description: ContentFrom is a referenced source
                                    of content to populate the file.
                                  properties:
                                    secret:
                                      description: Secret represents a secret that
                                        should populate this file.
                                      properties:
                                        key:
                                          description: Key is the key in the secret's
                                            data map for this value.
                                          type: string
                                        name:
                                          description: Name of the secret in the KubeadmBootstrapConfig's
                                            namespace to use.
                                          type: string
                                      required:
                                      - key
                                      - name
                                      type: object
                                  required:
                                  - secret
                                  type: object
                                encoding:
                                  description: Encoding specifies the encoding of
                                    the file contents.
                                  enum:
                                  - base64
                                  - gzip
                                  - gzip+base64
                                  type: string
                                owner:
                                  description: Owner specifies the ownership of the
                                    file, e.g. "root:root".
                                  type: string
                                path:
                                  description: Path specifies the full path on disk
                                    where to store the file.
                                  type: string
                                permissions:
                                  description: Permissions specifies the permissions
                                    to assign to the file, e.g. "0640".
                                  type: string
                              required:
                              - path
                              type: object
                            type: array
                          format:
                            description: Format specifies the output format of the
                              bootstrap data
                            enum:
                            - cloud-config
                            - ignition
                            type: string
                          ignition:
                            description: Ignition contains Ignition specific configuration.
                            properties:
                              containerLinuxConfig:
                                description: ContainerLinuxConfig contains CLC specific
                                  configuration.
                                properties:
                                  additionalConfig:
                                    description: "AdditionalConfig contains additional
                                      configuration to be merged with the Ignition
                                      configuration generated by the bootstrapper
                                      controller. More info: https://coreos.github.io/ignition/operator-notes/#config-merging
                                      \n The data format is documented here: https://kinvolk.io/docs/flatcar-container-linux/latest/provisioning/cl-config/"
                                    type: string
                                  strict:
                                    description: Strict controls if AdditionalConfig
                                      should be strictly parsed. If so, warnings are
                                      treated as errors.
                                    type: boolean
                                type: object
                            type: object
                          initConfiguration:
                            description: InitConfiguration along with ClusterConfiguration
                              are the configurations necessary for the init command
                            properties:
                              apiVersion:
                                description: 'APIVersion defines the versioned schema
                                  of this representation of an object. Servers should
                                  convert recognized schemas to the latest internal
                                  value, and may reject unrecognized values. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                                type: string
                              bootstrapTokens:
                                description: BootstrapTokens is respected at `kubeadm
                                  init` time and describes a set of Bootstrap Tokens
                                  to create. This information IS NOT uploaded to the
                                  kubeadm cluster configmap, partly because of its
                                  sensitive nature
                                items:
                                  description: BootstrapToken describes one bootstrap
                                    token, stored as a Secret in the cluster.
                                  properties:
                                    description:
                                      description: Description sets a human-friendly
                                        message why this token exists and what it's
                                        used for, so other administrators can know
                                        its purpose.
                                      type: string
                                    expires:
                                      description: Expires specifies the timestamp
                                        when this token expires. Defaults to being
                                        set dynamically at runtime based on the TTL.
                                        Expires and TTL are mutually exclusive.
                                      format: date-time
                                      type: string
                                    groups:
                                      description: Groups specifies the extra groups
                                        that this token will authenticate as when/if
                                        used for authentication
                                      items:
                                        type: string
                                      type: array
                                    token:
                                      description: Token is used for establishing
                                        bidirectional trust between nodes and control-planes.
                                        Used for joining nodes in the cluster.
                                      type: string
                                    ttl:
                                      description: TTL defines the time to live for
                                        this token. Defaults to 24h. Expires and TTL
                                        are mutually exclusive.
                                      type: string
                                    usages:
                                      description: Usages describes the ways in which
                                        this token can be used. Can by default be
                                        used for establishing bidirectional trust,
                                        but that can be changed here.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - token
                                  type: object
                                type: array
                              kind:
                                description: 'Kind is a string value representing
                                  the REST resource this object represents. Servers
                                  may infer this from the endpoint the client submits
                                  requests to. Cannot be updated. In CamelCase. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance that's deployed on this
                                  control plane node In HA setups, this differs from
                                  ClusterConfiguration.ControlPlaneEndpoint in the
                                  sense that ControlPlaneEndpoint is the global endpoint
                                  for the cluster, which then loadbalances the requests
                                  to each individual API server. This configuration
                                  object lets you customize what IP/DNS name and port
                                  the local API server advertises it's accessible
                                  on. By default, kubeadm tries to auto-detect the
                                  IP of the default interface and use that, but in
                                  case that process fails you may set the desired
                                  value here.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                type: object
                              nodeRegistration:
                                description: NodeRegistration holds fields that relate
                                  to registering the new control-plane node to the
                                  cluster. When used in the context of control plane
                                  nodes, NodeRegistration should remain consistent
                                  across both InitConfiguration and JoinConfiguration
                                properties:
                                  criSocket:
                                    description: CRISocket is used to retrieve container
                                      runtime info. This information will be annotated
                                      to the Node API object, for later re-use
                                    type: string
                                  ignorePreflightErrors:
                                    description: IgnorePreflightErrors provides a
                                      slice of pre-flight errors to be ignored when
                                      the current node is registered.
                                    items:
                                      type: string
                                    type: array
                                  imagePullPolicy:
                                    description: ImagePullPolicy specifies the policy
                                      for image pulling during kubeadm "init" and
                                      "join" operations. The value of this field must
                                      be one of "Always", "IfNotPresent" or "Never".
                                      Defaults to "IfNotPresent". This can be used
                                      only with Kubernetes version equal to 1.22 and
                                      later.
                                    enum:
                                    - Always
                                    - IfNotPresent
                                    - Never
                                    type: string
                                  kubeletExtraArgs:
                                    additionalProperties:
                                      type: string
                                    description: KubeletExtraArgs passes through extra
                                      arguments to the kubelet. The arguments here
                                      are passed to the kubelet command line via the
                                      environment file kubeadm writes at runtime for
                                      the kubelet to source. This overrides the generic
                                      base-level configuration in the kubelet-config-1.X
                                      ConfigMap Flags have higher priority when parsing.
                                      These values are local and specific to the node
                                      kubeadm is executing on.
                                    type: object
                                  name:
                                    description: Name is the `.Metadata.Name` field
                                      of the Node API object that will be created
                                      in this `kubeadm init` or `kubeadm join` operation.
                                      This field is also used in the CommonName field
                                      of the kubelet's client certificate to the API
                                      server. Defaults to the hostname of the node
                                      if not provided.
                                    type: string
                                  taints:
                                    description: 'Taints specifies the taints the
                                      Node API object should be registered with. If
                                      this field is unset, i.e. nil, in the `kubeadm
                                      init` process it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                      If you don''t want to taint your control-plane
                                      node, set this field to an empty slice, i.e.
                                      `taints: []` in the YAML file. This field is
                                      solely used for Node registration.'
                                    items:
                                      description: The node this Taint is attached
                                        to has the "effect" on any pod that does not
                                        tolerate the Taint.
                                      properties:
                                        effect:
                                          description: Required. The effect of the
                                            taint on pods that do not tolerate the
                                            taint. Valid effects are NoSchedule, PreferNoSchedule
                                            and NoExecute.
                                          type: string
                                        key:
                                          description: Required. The taint key to
                                            be applied to a node.
                                          type: string
                                        timeAdded:
                                          description: TimeAdded represents the time
                                            at which the taint was added. It is only
                                            written for NoExecute taints.
                                          format: date-time
                                          type: string
                                        value:
                                          description: The taint value corresponding
                                            to the taint key.
                                          type: string
                                      required:
                                      - effect
                                      - key
                                      type: object
                                    type: array
                                type: object
                              patches:
                                description: Patches contains options related to applying
                                  patches to components deployed by kubeadm during
                                  "kubeadm init". The minimum kubernetes version needed
                                  to support Patches is v1.22
                                properties:
                                  directory:
                                    description: Directory is a path to a directory
                                      that contains files named "target[suffix][+patchtype].extension".
                                      For example, "kube-apiserver0+merge.yaml" or
                                      just "etcd.json". "target" can be one of "kube-apiserver",
                                      "kube-controller-manager", "kube-scheduler",
                                      "etcd". "patchtype" can be one of "strategic"
                                      "merge" or "json" and they match the patch formats
                                      supported by kubectl. The default "patchtype"
                                      is "strategic". "extension" must be either "json"
                                      or "yaml". "suffix" is an optional string that
                                      can be used to determine which patches are applied
                                      first alpha-numerically. These files can be
                                      written into the target directory via KubeadmConfig.Files
                                      which specifies additional files to be created
                                      on the machine, either with content inline or
                                      by referencing a secret.
                                    type: string
                                type: object
                              skipPhases:
                                description: SkipPhases is a list of phases to skip
                                  during command execution. The list of phases can
                                  be obtained with the "kubeadm init --help" command.
                                  This option takes effect only on Kubernetes >=1.22.0.
                                items:
                                  type: string
                                type: array
                            type: object
                          joinConfiguration:
                            description: JoinConfiguration is the kubeadm configuration
                              for the join command
                            properties:
                              apiVersion:
                                description: 'APIVersion defines the versioned schema
                                  of this representation of an object. Servers should
                                  convert recognized schemas to the latest internal
                                  value, and may reject unrecognized values. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                                type: string
                              caCertPath:
                                description: 'CACertPath is the path to the SSL certificate
                                  authority used to secure comunications between node
                                  and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                                  TODO: revisit when there is defaulting from k/k'
                                type: string
                              controlPlane:
                                description: ControlPlane defines the additional control
                                  plane instance to be deployed on the joining node.
                                  If nil, no additional control plane instance will
                                  be deployed.
                                properties:
                                  localAPIEndpoint:
                                    description: LocalAPIEndpoint represents the endpoint
                                      of the API server instance to be deployed on
                                      this node.
                                    properties:
                                      advertiseAddress:
                                        description: AdvertiseAddress sets the IP
                                          address for the API server to advertise.
                                        type: string
                                      bindPort:
                                        description: BindPort sets the secure port
                                          for the API Server to bind to. Defaults
                                          to 6443.
                                        format: int32
                                        type: integer
                                    type: object
                                type: object
                              discovery:
                                description: 'Discovery specifies the options for
                                  the kubelet to use during the TLS Bootstrap process
                                  TODO: revisit when there is defaulting from k/k'
                                properties:
                                  bootstrapToken:
                                    description: BootstrapToken is used to set the
                                      options for bootstrap token based discovery
                                      BootstrapToken and File are mutually exclusive
                                    properties:
                                      apiServerEndpoint:
                                        description: APIServerEndpoint is an IP or
                                          domain name to the API server from which
                                          info will be fetched.
                                        type: string
                                      caCertHashes:
                                        description: 'CACertHashes specifies a set
                                          of public key pins to verify when token-based
                                          discovery is used. The root CA found during
                                          discovery must match one of these values.
                                          Specifying an empty set disables root CA
                                          pinning, which can be unsafe. Each hash
                                          is specified as "<type>:<value>", where
                                          the only currently supported type is "sha256".
                                          This is a hex-encoded SHA-256 hash of the
                                          Subject Public Key Info (SPKI) object in
                                          DER-encoded ASN.1. These hashes can be calculated
                                          using, for example, OpenSSL: openssl x509
                                          -pubkey -in ca.crt openssl rsa -pubin -outform
                                          der 2>&/dev/null | openssl dgst -sha256
                                          -hex'
                                        items:
                                          type: string
                                        type: array
                                      token:
                                        description: Token is a token used to validate
                                          cluster information fetched from the control-plane.
                                        type: string
                                      unsafeSkipCAVerification:
                                        description: UnsafeSkipCAVerification allows
                                          token-based discovery without CA verification
                                          via CACertHashes. This can weaken the security
                                          of kubeadm since other nodes can impersonate
                                          the control-plane.
                                        type: boolean
                                    required:
                                    - token
                                    type: object
                                  file:
                                    description: File is used to specify a file or
                                      URL to a kubeconfig file from which to load
                                      cluster information BootstrapToken and File
                                      are mutually exclusive
                                    properties:
                                      kubeConfigPath:
                                        description: KubeConfigPath is used to specify
                                          the actual file path or URL to the kubeconfig
                                          file from which to load cluster information
                                        type: string
                                    required:
                                    - kubeConfigPath
                                    type: object
                                  timeout:
                                    description: Timeout modifies the discovery timeout
                                    type: string
                                  tlsBootstrapToken:
                                    description: TLSBootstrapToken is a token used
                                      for TLS bootstrapping. If .BootstrapToken is
                                      set, this field is defaulted to .BootstrapToken.Token,
                                      but can be overridden. If .File is set, this
                                      field **must be set** in case the KubeConfigFile
                                      does not contain any other authentication information
                                    type: string
                                type: object
                              kind:
                                description: 'Kind is a string value representing
                                  the REST resource this object represents. Servers
                                  may infer this from the endpoint the client submits
                                  requests to. Cannot be updated. In CamelCase. More
                                  info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              nodeRegistration:
                                description: NodeRegistration holds fields that relate
                                  to registering the new control-plane node to the
                                  cluster. When used in the context of control plane
                                  nodes, NodeRegistration should remain consistent
                                  across both InitConfiguration and JoinConfiguration
                                properties:
                                  criSocket:
                                    description: CRISocket is used to retrieve container
                                      runtime info. This information will be annotated
                                      to the Node API object, for later re-use
                                    type: string
                                  ignorePreflightErrors:
                                    description: IgnorePreflightErrors provides a
                                      slice of pre-flight errors to be ignored when
                                      the current node is registered.
                                    items:
                                      type: string
                                    type: array
                                  imagePullPolicy:
                                    description: ImagePullPolicy specifies the policy
                                      for image pulling during kubeadm "init" and
                                      "join" operations. The value of this field must
                                      be one of "Always", "IfNotPresent" or "Never".
                                      Defaults to "IfNotPresent". This can be used
                                      only with Kubernetes version equal to 1.22 and
                                      later.
                                    enum:
                                    - Always
                                    - IfNotPresent
                                    - Never
                                    type: string
                                  kubeletExtraArgs:
                                    additionalProperties:
                                      type: string
                                    description: KubeletExtraArgs passes through extra
                                      arguments to the kubelet. The arguments here
                                      are passed to the kubelet command line via the
                                      environment file kubeadm writes at runtime for
                                      the kubelet to source. This overrides the generic
                                      base-level configuration in the kubelet-config-1.X
                                      ConfigMap Flags have higher priority when parsing.
                                      These values are local and specific to the node
                                      kubeadm is executing on.
                                    type: object
                                  name:
                                    description: Name is the `.Metadata.Name` field
                                      of the Node API object that will be created
                                      in this `kubeadm init` or `kubeadm join` operation.
                                      This field is also used in the CommonName field
                                      of the kubelet's client certificate to the API
                                      server. Defaults to the hostname of the node
                                      if not provided.
                                    type: string
                                  taints:
                                    description: 'Taints specifies the taints the
                                      Node API object should be registered with. If
                                      this field is unset, i.e. nil, in the `kubeadm
                                      init` process it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                      If you don''t want to taint your control-plane
                                      node, set this field to an empty slice, i.e.
                                      `taints: []` in the YAML file. This field is
                                      solely used for Node registration.'
                                    items:
                                      description: The node this Taint is attached
                                        to has the "effect" on any pod that does not
                                        tolerate the Taint.
                                      properties:
                                        effect:
                                          description: Required. The effect of the
                                            taint on pods that do not tolerate the
                                            taint. Valid effects are NoSchedule, PreferNoSchedule
                                            and NoExecute.
                                          type: string
                                        key:
                                          description: Required. The taint key to
                                            be applied to a node.
                                          type: string
                                        timeAdded:
                                          description: TimeAdded represents the time
                                            at which the taint was added. It is only
                                            written for NoExecute taints.
                                          format: date-time
                                          type: string
                                        value:
                                          description: The taint value corresponding
                                            to the taint key.
                                          type: string
                                      required:
                                      - effect
                                      - key
                                      type: object
                                    type: array
                                type: object
                              patches:
                                description: Patches contains options related to applying
                                  patches to components deployed by kubeadm during
                                  "kubeadm join". The minimum kubernetes version needed
                                  to support Patches is v1.22
                                properties:
                                  directory:
                                    description: Directory is a path to a directory
                                      that contains files named "target[suffix][+patchtype].extension".
                                      For example, "kube-apiserver0+merge.yaml" or
                                      just "etcd.json". "target" can be one of "kube-apiserver",
                                      "kube-controller-manager", "kube-scheduler",
                                      "etcd". "patchtype" can be one of "strategic"
                                      "merge" or "json" and they match the patch formats
                                      supported by kubectl. The default "patchtype"
                                      is "strategic". "extension" must be either "json"
                                      or "yaml". "suffix" is an optional string that
                                      can be used to determine which patches are applied
                                      first alpha-numerically. These files can be
                                      written into the target directory via KubeadmConfig.Files
                                      which specifies additional files to be created
                                      on the machine, either with content inline or
                                      by referencing a secret.
                                    type: string
                                type: object
                              skipPhases:
                                description: SkipPhases is a list of phases to skip
                                  during command execution. The list of phases can
                                  be obtained with the "kubeadm init --help" command.
                                  This option takes effect only on Kubernetes >=1.22.0.
                                items:
                                  type: string
                                type: array
                            type: object
                          mounts:
                            description: Mounts specifies a list of mount points to
                              be setup.
                            items:
                              description: MountPoints defines input for generated
                                mounts in cloud-init.
                              items:
                                type: string
                              type: array
                            type: array
                          ntp:
                            description: NTP specifies NTP configuration
                            properties:
                              enabled:
                                description: Enabled specifies whether NTP should
                                  be enabled
                                type: boolean
                              servers:
                                description: Servers specifies which NTP servers to
                                  use
                                items:
                                  type: string
                                type: array
                            type: object
                          postKubeadmCommands:
                            description: PostKubeadmCommands specifies extra commands
                              to run after kubeadm runs
                            items:
                              type: string
                            type: array
                          preKubeadmCommands:
                            description: PreKubeadmCommands specifies extra commands
                              to run before kubeadm runs
                            items:
                              type: string
                            type: array
                          useExperimentalRetryJoin:
                            description: "UseExperimentalRetryJoin replaces a basic
                              kubeadm command with a shell script with retries for
                              joins. \n This is meant to be an experimental temporary
                              workaround on some environments where joins fail due
                              to timing (and other issues). The long term goal is
                              to add retries to kubeadm proper and use that functionality.
                              \n This will add about 40KB to userdata \n For more
                              information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055.
                              \n Deprecated: This experimental fix is no longer needed
                              and this field will be removed in a future release.
                              When removing also remove from staticcheck exclude-rules
                              for SA1019 in golangci.yml"
                            type: boolean
                          users:
                            description: Users specifies extra users to add
                            items:
                              description: User defines the input for a generated
                                user in cloud-init.
                              properties:
                                gecos:
                                  description: Gecos specifies the gecos to use for
                                    the user
                                  type: string
                                groups:
                                  description: Groups specifies the additional groups
                                    for the user
                                  type: string
                                homeDir:
                                  description: HomeDir specifies the home directory
                                    to use for the user
                                  type: string
                                inactive:
                                  description: Inactive specifies whether to mark
                                    the user as inactive
                                  type: boolean
                                lockPassword:
                                  description: LockPassword specifies if password
                                    login should be disabled
                                  type: boolean
                                name:
                                  description: Name specifies the user name
                                  type: string
                                passwd:
                                  description: Passwd specifies a hashed password
                                    for the user
                                  type: string
                                passwdFrom:
                                  description: PasswdFrom is a referenced source of
                                    passwd to populate the passwd.
                                  properties:
                                    secret:
                                      description: Secret represents a secret that
                                        should populate this password.
                                      properties:
                                        key:
                                          description: Key is the key in the secret's
                                            data map for this value.
                                          type: string
                                        name:
                                          description: Name of the secret in the KubeadmBootstrapConfig's
                                            namespace to use.
                                          type: string
                                      required:
                                      - key
                                      - name
                                      type: object
                                  required:
                                  - secret
                                  type: object
                                primaryGroup:
                                  description: PrimaryGroup specifies the primary
                                    group for the user
                                  type: string
                                shell:
                                  description: Shell specifies the user's shell
                                  type: string
                                sshAuthorizedKeys:
                                  description: SSHAuthorizedKeys specifies a list
                                    of ssh authorized keys for the user
                                  items:
                                    type: string
                                  type: array
                                sudo:
                                  description: Sudo specifies a sudo role for the
                                    user
                                  type: string
                              required:
                              - name
                              type: object
                            type: array
                          verbosity:
                            description: Verbosity is the number for the kubeadm log
                              level verbosity. It overrides the `--v` flag in kubeadm
                              commands.
                            format: int32
                            type: integer
                        type: object
                      machineTemplate:
                        description: MachineTemplate contains information about how
                          machines should be shaped when creating or updating a control
                          plane.
                        properties:
                          metadata:
                            description: 'Standard object''s metadata. More info:
                              https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: 'Annotations is an unstructured key value
                                  map stored with a resource that may be set by external
                                  tools to store and retrieve arbitrary metadata.
                                  They are not queryable and should be preserved when
                                  modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                type: object
                              labels:
                                additionalProperties:
                                  type: string
                                description: 'Map of string keys and values that can
                                  be used to organize and categorize (scope and select)
                                  objects. May match selectors of replication controllers
                                  and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                type: object
                            type: object
                          nodeDeletionTimeout:
                            description: NodeDeletionTimeout defines how long the
                              machine controller will attempt to delete the Node that
                              the Machine hosts after the Machine is marked for deletion.
                              A duration of 0 will retry deletion indefinitely. If
                              no value is provided, the default value for this property
                              of the Machine resource will be used.
                            type: string
                          nodeDrainTimeout:
                            description: 'NodeDrainTimeout is the total amount of
                              time that the controller will spend on draining a controlplane
                              node The default value is 0, meaning that the node can
                              be drained without any time limitations. NOTE: NodeDrainTimeout
                              is different from `kubectl drain --timeout`'
                            type: string
                          nodeVolumeDetachTimeout:
                            description: NodeVolumeDetachTimeout is the total amount
                              of time that the controller will spend on waiting for
                              all volumes to be detached. The default value is 0,
                              meaning that the volumes can be detached without any
                              time limitations.
                            type: string
                        type: object
                      remediationStrategy:
                        description: The RemediationStrategy that controls how control
                          plane machine remediation happens.
                        properties:
                          maxRetry:
                            description: "MaxRetry is the Max number of retries while
                              attempting to remediate an unhealthy machine. A retry
                              happens when a machine that was created as a replacement
                              for an unhealthy machine also fails. For example, given
                              a control plane with three machines M1, M2, M3: \n M1
                              become unhealthy; remediation happens, and M1-1 is created
                              as a replacement. If M1-1 (replacement of M1) has problems
                              while bootstrapping it will become unhealthy, and then
                              be remediated; such operation is considered a retry,
                              remediation-retry #1. If M1-2 (replacement of M1-1)
                              becomes unhealthy, remediation-retry #2 will happen,
                              etc. \n A retry could happen only after RetryPeriod
                              from the previous retry. If a machine is marked as unhealthy
                              after MinHealthyPeriod from the previous remediation
                              expired, this is not considered a retry anymore because
                              the new issue is assumed unrelated from the previous
                              one. \n If not set, the remedation will be retried infinitely."
                            format: int32
                            type: integer
                          minHealthyPeriod:
                            description: "MinHealthyPeriod defines the duration after
                              which KCP will consider any failure to a machine unrelated
                              from the previous one. In this case the remediation
                              is not considered a retry anymore, and thus the retry
                              counter restarts from 0. For example, assuming MinHealthyPeriod
                              is set to 1h (default) \n M1 become unhealthy; remediation
                              happens, and M1-1 is created as a replacement. If M1-1
                              (replacement of M1) has problems within the 1hr after
                              the creation, also this machine will be remediated and
                              this operation is considered a retry - a problem related
                              to the original issue happened to M1 -. \n If instead
                              the problem on M1-1 is happening after MinHealthyPeriod
                              expired, e.g. four days after m1-1 has been created
                              as a remediation of M1, the problem on M1-1 is considered
                              unrelated to the original issue happened to M1. \n If
                              not set, this value is defaulted to 1h."
                            type: string
                          retryPeriod:
                            description: "RetryPeriod is the duration that KCP should
                              wait before remediating a machine being created as a
                              replacement for an unhealthy machine (a retry). \n If
                              not set, a retry will happen immediately."
                            type: string
                        type: object
                      rolloutAfter:
                        description: RolloutAfter is a field to indicate a rollout
                          should be performed after the specified time even if no
                          changes have been made to the KubeadmControlPlane.
                        format: date-time
                        type: string
                      rolloutBefore:
                        description: RolloutBefore is a field to indicate a rollout
                          should be performed if the specified criteria is met.
                        properties:
                          certificatesExpiryDays:
                            description: CertificatesExpiryDays indicates a rollout
                              needs to be performed if the certificates of the machine
                              will expire within the specified days.
                            format: int32
                            type: integer
                        type: object
                      rolloutStrategy:
                        default:
                          rollingUpdate:
                            maxSurge: 1
                          type: RollingUpdate
                        description: The RolloutStrategy to use to replace control
                          plane machines with new ones.
                        properties:
                          rollingUpdate:
                            description: Rolling update config params. Present only
                              if RolloutStrategyType = RollingUpdate.
                            properties:
                              maxSurge:
                                anyOf:
                                - type: integer
                                - type: string
                                description: 'The maximum number of control planes
                                  that can be scheduled above or under the desired
                                  number of control planes. Value can be an absolute
                                  number 1 or 0. Defaults to 1. Example: when this
                                  is set to 1, the control plane can be scaled up
                                  immediately when the rolling update starts.'
                                x-kubernetes-int-or-string: true
                            type: object
                          type:
                            description: Type of rollout. Currently the only supported
                              strategy is "RollingUpdate". Default is RollingUpdate.
                            type: string
                        type: object
                    required:
                    - kubeadmConfigSpec
                    type: object
                required:
                - spec
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: machinedeployments.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineDeployment
    listKind: MachineDeploymentList
    plural: machinedeployments
    shortNames:
    - md
    singular: machinedeployment
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Total number of non-terminated machines targeted by this MachineDeployment
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of ready machines targeted by this MachineDeployment
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this deployment
        that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this MachineDeployment
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "MachineDeployment is the Schema for the machinedeployments API.
          \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineDeploymentSpec defines the desired state of MachineDeployment.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  should be ready. Defaults to 0 (machine will be considered available
                  as soon as it is ready)
                format: int32
                type: integer
              paused:
                description: Indicates that the deployment is paused.
                type: boolean
              progressDeadlineSeconds:
                description: The maximum time in seconds for a deployment to make
                  progress before it is considered to be failed. The deployment controller
                  will continue to process failed deployments and a condition with
                  a ProgressDeadlineExceeded reason will be surfaced in the deployment
                  status. Note that progress will not be estimated during the time
                  a deployment is paused. Defaults to 600s.
                format: int32
                type: integer
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              revisionHistoryLimit:
                description: The number of old MachineSets to retain to allow rollback.
                  This is a pointer to distinguish between explicit zero and not specified.
                  Defaults to 1.
                format: int32
                type: integer
              selector:
                description: Label selector for machines. Existing MachineSets whose
                  machines are selected by this will be the ones affected by this
                  deployment. It must match the machine template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              strategy:
                description: The deployment strategy to use to replace existing machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Currently the only supported
                      strategy is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                          \n Deprecated: This field has no function and is going to
                          be removed in a next release."
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: "Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names \n
                          Deprecated: This field has no function and is going to be
                          removed in a next release."
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces
                          \n Deprecated: This field has no function and is going to
                          be removed in a next release."
                        type: string
                      ownerReferences:
                        description: "List of objects depended by this object. If
                          ALL objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller. \n Deprecated: This field
                          has no function and is going to be removed in a next release."
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. See
                                https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                for how the garbage collector interacts with this
                                field and enforces the foreground deletion. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: Switch to
                              DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            - template
            type: object
          status:
            description: MachineDeploymentStatus defines the observed state of MachineDeployment.
            properties:
              availableReplicas:
                description: Total number of available machines (ready for at least
                  minReadySeconds) targeted by this deployment.
                format: int32
                type: integer
              observedGeneration:
                description: The generation observed by the deployment controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of a MachineDeployment
                  (ScalingUp, ScalingDown, Running, Failed, or Unknown).
                type: string
              readyReplicas:
                description: Total number of ready machines targeted by this deployment.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  deployment (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  deployment. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet available or
                  machines that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  deployment that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Time duration since creation of MachineDeployment
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Total number of non-terminated machines targeted by this MachineDeployment
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of ready machines targeted by this MachineDeployment
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this deployment
        that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this MachineDeployment
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "MachineDeployment is the Schema for the machinedeployments API.
          \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineDeploymentSpec defines the desired state of MachineDeployment.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  should be ready. Defaults to 0 (machine will be considered available
                  as soon as it is ready)
                format: int32
                type: integer
              paused:
                description: Indicates that the deployment is paused.
                type: boolean
              progressDeadlineSeconds:
                description: The maximum time in seconds for a deployment to make
                  progress before it is considered to be failed. The deployment controller
                  will continue to process failed deployments and a condition with
                  a ProgressDeadlineExceeded reason will be surfaced in the deployment
                  status. Note that progress will not be estimated during the time
                  a deployment is paused. Defaults to 600s.
                format: int32
                type: integer
              replicas:
                default: 1
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              revisionHistoryLimit:
                description: The number of old MachineSets to retain to allow rollback.
                  This is a pointer to distinguish between explicit zero and not specified.
                  Defaults to 1.
                format: int32
                type: integer
              selector:
                description: Label selector for machines. Existing MachineSets whose
                  machines are selected by this will be the ones affected by this
                  deployment. It must match the machine template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              strategy:
                description: The deployment strategy to use to replace existing machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      deletePolicy:
                        description: DeletePolicy defines the policy used by the MachineDeployment
                          to identify nodes to delete when downscaling. Valid values
                          are "Random, "Newest", "Oldest" When no value is supplied,
                          the default DeletePolicy of MachineSet is used
                        enum:
                        - Random
                        - Newest
                        - Oldest
                        type: string
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Default is RollingUpdate.
                    enum:
                    - RollingUpdate
                    - OnDelete
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.DataSecretName
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            - template
            type: object
          status:
            description: MachineDeploymentStatus defines the observed state of MachineDeployment.
            properties:
              availableReplicas:
                description: Total number of available machines (ready for at least
                  minReadySeconds) targeted by this deployment.
                format: int32
                type: integer
              conditions:
                description: Conditions defines current service state of the MachineDeployment.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: The generation observed by the deployment controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of a MachineDeployment
                  (ScalingUp, ScalingDown, Running, Failed, or Unknown).
                type: string
              readyReplicas:
                description: Total number of ready machines targeted by this deployment.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  deployment (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  deployment. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet available or
                  machines that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  deployment that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Total number of machines desired by this MachineDeployment
      jsonPath: .spec.replicas
      name: Desired
      priority: 10
      type: integer
    - description: Total number of non-terminated machines targeted by this MachineDeployment
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of ready machines targeted by this MachineDeployment
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this deployment
        that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this MachineDeployment
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    - description: MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Time duration since creation of MachineDeployment
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this MachineDeployment
      jsonPath: .spec.template.spec.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: MachineDeployment is the Schema for the machinedeployments API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineDeploymentSpec defines the desired state of MachineDeployment.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  should be ready. Defaults to 0 (machine will be considered available
                  as soon as it is ready)
                format: int32
                type: integer
              paused:
                description: Indicates that the deployment is paused.
                type: boolean
              progressDeadlineSeconds:
                description: The maximum time in seconds for a deployment to make
                  progress before it is considered to be failed. The deployment controller
                  will continue to process failed deployments and a condition with
                  a ProgressDeadlineExceeded reason will be surfaced in the deployment
                  status. Note that progress will not be estimated during the time
                  a deployment is paused. Defaults to 600s.
                format: int32
                type: integer
              replicas:
                description: "Number of desired machines. This is a pointer to distinguish
                  between explicit zero and not specified. \n Defaults to: * if the
                  Kubernetes autoscaler min size and max size annotations are set:
                  - if it's a new MachineDeployment, use min size - if the replicas
                  field of the old MachineDeployment is < min size, use min size -
                  if the replicas field of the old MachineDeployment is > max size,
                  use max size - if the replicas field of the old MachineDeployment
                  is in the (min size, max size) range, keep the value from the oldMD
                  * otherwise use 1 Note: Defaulting will be run whenever the replicas
                  field is not set: * A new MachineDeployment is created with replicas
                  not set. * On an existing MachineDeployment the replicas field was
                  first set and is now unset. Those cases are especially relevant
                  for the following Kubernetes autoscaler use cases: * A new MachineDeployment
                  is created and replicas should be managed by the autoscaler * An
                  existing MachineDeployment which initially wasn't controlled by
                  the autoscaler should be later controlled by the autoscaler"
                format: int32
                type: integer
              revisionHistoryLimit:
                description: The number of old MachineSets to retain to allow rollback.
                  This is a pointer to distinguish between explicit zero and not specified.
                  Defaults to 1.
                format: int32
                type: integer
              rolloutAfter:
                description: 'RolloutAfter is a field to indicate a rollout should
                  be performed after the specified time even if no changes have been
                  made to the MachineDeployment. Example: In the YAML the time can
                  be specified in the RFC3339 format. To specify the rolloutAfter
                  target as March 9, 2023, at 9 am UTC use "2023-03-09T09:00:00Z".'
                format: date-time
                type: string
              selector:
                description: Label selector for machines. Existing MachineSets whose
                  machines are selected by this will be the ones affected by this
                  deployment. It must match the machine template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              strategy:
                description: The deployment strategy to use to replace existing machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      deletePolicy:
                        description: DeletePolicy defines the policy used by the MachineDeployment
                          to identify nodes to delete when downscaling. Valid values
                          are "Random, "Newest", "Oldest" When no value is supplied,
                          the default DeletePolicy of MachineSet is used
                        enum:
                        - Random
                        - Newest
                        - Oldest
                        type: string
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Default is RollingUpdate.
                    enum:
                    - RollingUpdate
                    - OnDelete
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.DataSecretName
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDeletionTimeout:
                        description: NodeDeletionTimeout defines how long the controller
                          will attempt to delete the Node that the Machine hosts after
                          the Machine is marked for deletion. A duration of 0 will
                          retry deletion indefinitely. Defaults to 10 seconds.
                        type: string
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      nodeVolumeDetachTimeout:
                        description: NodeVolumeDetachTimeout is the total amount of
                          time that the controller will spend on waiting for all volumes
                          to be detached. The default value is 0, meaning that the
                          volumes can be detached without any time limitations.
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            - template
            type: object
          status:
            description: MachineDeploymentStatus defines the observed state of MachineDeployment.
            properties:
              availableReplicas:
                description: Total number of available machines (ready for at least
                  minReadySeconds) targeted by this deployment.
                format: int32
                type: integer
              conditions:
                description: Conditions defines current service state of the MachineDeployment.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: The generation observed by the deployment controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of a MachineDeployment
                  (ScalingUp, ScalingDown, Running, Failed, or Unknown).
                type: string
              readyReplicas:
                description: Total number of ready machines targeted by this deployment.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  deployment (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  deployment. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet available or
                  machines that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  deployment that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: machinehealthchecks.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineHealthCheck
    listKind: MachineHealthCheckList
    plural: machinehealthchecks
    shortNames:
    - mhc
    - mhcs
    singular: machinehealthcheck
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Maximum number of unhealthy machines allowed
      jsonPath: .spec.maxUnhealthy
      name: MaxUnhealthy
      type: string
    - description: Number of machines currently monitored
      jsonPath: .status.expectedMachines
      name: ExpectedMachines
      type: integer
    - description: Current observed healthy machines
      jsonPath: .status.currentHealthy
      name: CurrentHealthy
      type: integer
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "MachineHealthCheck is the Schema for the machinehealthchecks
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of machine health check policy
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              maxUnhealthy:
                anyOf:
                - type: integer
                - type: string
                description: Any further remediation is only allowed if at most "MaxUnhealthy"
                  machines selected by "selector" are not healthy.
                x-kubernetes-int-or-string: true
              nodeStartupTimeout:
                description: Machines older than this duration without a node will
                  be considered to have failed and will be remediated.
                type: string
              remediationTemplate:
                description: "RemediationTemplate is a reference to a remediation
                  template provided by an infrastructure provider. \n This field is
                  completely optional, when filled, the MachineHealthCheck controller
                  creates a new object from the template referenced and hands off
                  remediation of the machine to a controller that lives outside of
                  Cluster API."
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              selector:
                description: Label selector to match machines whose health will be
                  exercised
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              unhealthyConditions:
                description: UnhealthyConditions contains a list of the conditions
                  that determine whether a node is considered unhealthy.  The conditions
                  are combined in a logical OR, i.e. if any of the conditions is met,
                  the node is unhealthy.
                items:
                  description: UnhealthyCondition represents a Node condition type
                    and value with a timeout specified as a duration.  When the named
                    condition has been in the given status for at least the timeout
                    value, a node is considered unhealthy.
                  properties:
                    status:
                      minLength: 1
                      type: string
                    timeout:
                      type: string
                    type:
                      minLength: 1
                      type: string
                  required:
                  - status
                  - timeout
                  - type
                  type: object
                minItems: 1
                type: array
            required:
            - clusterName
            - selector
            - unhealthyConditions
            type: object
          status:
            description: Most recently observed status of MachineHealthCheck resource
            properties:
              conditions:
                description: Conditions defines current service state of the MachineHealthCheck.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              currentHealthy:
                description: total number of healthy machines counted by this machine
                  health check
                format: int32
                minimum: 0
                type: integer
              expectedMachines:
                description: total number of machines counted by this machine health
                  check
                format: int32
                minimum: 0
                type: integer
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              remediationsAllowed:
                description: RemediationsAllowed is the number of further remediations
                  allowed by this machine health check before maxUnhealthy short circuiting
                  will be applied
                format: int32
                minimum: 0
                type: integer
              targets:
                description: Targets shows the current list of machines the machine
                  health check is watching
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Time duration since creation of MachineHealthCheck
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Maximum number of unhealthy machines allowed
      jsonPath: .spec.maxUnhealthy
      name: MaxUnhealthy
      type: string
    - description: Number of machines currently monitored
      jsonPath: .status.expectedMachines
      name: ExpectedMachines
      type: integer
    - description: Current observed healthy machines
      jsonPath: .status.currentHealthy
      name: CurrentHealthy
      type: integer
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "MachineHealthCheck is the Schema for the machinehealthchecks
          API. \n Deprecated: This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of machine health check policy
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              maxUnhealthy:
                anyOf:
                - type: integer
                - type: string
                description: Any further remediation is only allowed if at most "MaxUnhealthy"
                  machines selected by "selector" are not healthy.
                x-kubernetes-int-or-string: true
              nodeStartupTimeout:
                description: Machines older than this duration without a node will
                  be considered to have failed and will be remediated. If not set,
                  this value is defaulted to 10 minutes. If you wish to disable this
                  feature, set the value explicitly to 0.
                type: string
              remediationTemplate:
                description: "RemediationTemplate is a reference to a remediation
                  template provided by an infrastructure provider. \n This field is
                  completely optional, when filled, the MachineHealthCheck controller
                  creates a new object from the template referenced and hands off
                  remediation of the machine to a controller that lives outside of
                  Cluster API."
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              selector:
                description: Label selector to match machines whose health will be
                  exercised
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              unhealthyConditions:
                description: UnhealthyConditions contains a list of the conditions
                  that determine whether a node is considered unhealthy.  The conditions
                  are combined in a logical OR, i.e. if any of the conditions is met,
                  the node is unhealthy.
                items:
                  description: UnhealthyCondition represents a Node condition type
                    and value with a timeout specified as a duration.  When the named
                    condition has been in the given status for at least the timeout
                    value, a node is considered unhealthy.
                  properties:
                    status:
                      minLength: 1
                      type: string
                    timeout:
                      type: string
                    type:
                      minLength: 1
                      type: string
                  required:
                  - status
                  - timeout
                  - type
                  type: object
                minItems: 1
                type: array
              unhealthyRange:
                description: 'Any further remediation is only allowed if the number
                  of machines selected by "selector" as not healthy is within the
                  range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg.
                  "[3-5]" - This means that remediation will be allowed only when:
                  (a) there are at least 3 unhealthy machines (and) (b) there are
                  at most 5 unhealthy machines'
                pattern: ^\[[0-9]+-[0-9]+\]$
                type: string
            required:
            - clusterName
            - selector
            - unhealthyConditions
            type: object
          status:
            description: Most recently observed status of MachineHealthCheck resource
            properties:
              conditions:
                description: Conditions defines current service state of the MachineHealthCheck.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              currentHealthy:
                description: total number of healthy machines counted by this machine
                  health check
                format: int32
                minimum: 0
                type: integer
              expectedMachines:
                description: total number of machines counted by this machine health
                  check
                format: int32
                minimum: 0
                type: integer
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              remediationsAllowed:
                description: RemediationsAllowed is the number of further remediations
                  allowed by this machine health check before maxUnhealthy short circuiting
                  will be applied
                format: int32
                minimum: 0
                type: integer
              targets:
                description: Targets shows the current list of machines the machine
                  health check is watching
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Number of machines currently monitored
      jsonPath: .status.expectedMachines
      name: ExpectedMachines
      type: integer
    - description: Maximum number of unhealthy machines allowed
      jsonPath: .spec.maxUnhealthy
      name: MaxUnhealthy
      type: string
    - description: Current observed healthy machines
      jsonPath: .status.currentHealthy
      name: CurrentHealthy
      type: integer
    - description: Time duration since creation of MachineHealthCheck
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: MachineHealthCheck is the Schema for the machinehealthchecks
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of machine health check policy
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              maxUnhealthy:
                anyOf:
                - type: integer
                - type: string
                description: Any further remediation is only allowed if at most "MaxUnhealthy"
                  machines selected by "selector" are not healthy.
                x-kubernetes-int-or-string: true
              nodeStartupTimeout:
                description: Machines older than this duration without a node will
                  be considered to have failed and will be remediated. If not set,
                  this value is defaulted to 10 minutes. If you wish to disable this
                  feature, set the value explicitly to 0.
                type: string
              remediationTemplate:
                description: "RemediationTemplate is a reference to a remediation
                  template provided by an infrastructure provider. \n This field is
                  completely optional, when filled, the MachineHealthCheck controller
                  creates a new object from the template referenced and hands off
                  remediation of the machine to a controller that lives outside of
                  Cluster API."
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              selector:
                description: Label selector to match machines whose health will be
                  exercised
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              unhealthyConditions:
                description: UnhealthyConditions contains a list of the conditions
                  that determine whether a node is considered unhealthy.  The conditions
                  are combined in a logical OR, i.e. if any of the conditions is met,
                  the node is unhealthy.
                items:
                  description: UnhealthyCondition represents a Node condition type
                    and value with a timeout specified as a duration.  When the named
                    condition has been in the given status for at least the timeout
                    value, a node is considered unhealthy.
                  properties:
                    status:
                      minLength: 1
                      type: string
                    timeout:
                      type: string
                    type:
                      minLength: 1
                      type: string
                  required:
                  - status
                  - timeout
                  - type
                  type: object
                minItems: 1
                type: array
              unhealthyRange:
                description: 'Any further remediation is only allowed if the number
                  of machines selected by "selector" as not healthy is within the
                  range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg.
                  "[3-5]" - This means that remediation will be allowed only when:
                  (a) there are at least 3 unhealthy machines (and) (b) there are
                  at most 5 unhealthy machines'
                pattern: ^\[[0-9]+-[0-9]+\]$
                type: string
            required:
            - clusterName
            - selector
            - unhealthyConditions
            type: object
          status:
            description: Most recently observed status of MachineHealthCheck resource
            properties:
              conditions:
                description: Conditions defines current service state of the MachineHealthCheck.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              currentHealthy:
                description: total number of healthy machines counted by this machine
                  health check
                format: int32
                minimum: 0
                type: integer
              expectedMachines:
                description: total number of machines counted by this machine health
                  check
                format: int32
                minimum: 0
                type: integer
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              remediationsAllowed:
                description: RemediationsAllowed is the number of further remediations
                  allowed by this machine health check before maxUnhealthy short circuiting
                  will be applied
                format: int32
                minimum: 0
                type: integer
              targets:
                description: Targets shows the current list of machines the machine
                  health check is watching
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: machinepools.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachinePool
    listKind: MachinePoolList
    plural: machinepools
    shortNames:
    - mp
    singular: machinepool
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: MachinePool replicas count
      jsonPath: .status.replicas
      name: Replicas
      type: string
    - description: MachinePool status such as Terminating/Pending/Provisioning/Running/Failed
        etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Kubernetes version associated with this MachinePool
      jsonPath: .spec.template.spec.version
      name: Version
      type: string
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "MachinePool is the Schema for the machinepools API. \n Deprecated:
          This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachinePoolSpec defines the desired state of MachinePool.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomains:
                description: FailureDomains is the list of failure domains this MachinePool
                  should be attached to.
                items:
                  type: string
                type: array
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  instances should be ready. Defaults to 0 (machine instance will
                  be considered available as soon as it is ready)
                format: int32
                type: integer
              providerIDList:
                description: ProviderIDList are the identification IDs of machine
                  instances provided by the provider. This field must match the provider
                  IDs as seen on the node objects corresponding to a machine pool's
                  machine instances.
                items:
                  type: string
                type: array
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              strategy:
                description: The deployment strategy to use to replace existing machine
                  instances with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Currently the only supported
                      strategy is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                          \n Deprecated: This field has no function and is going to
                          be removed in a next release."
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: "Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names \n
                          Deprecated: This field has no function and is going to be
                          removed in a next release."
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces
                          \n Deprecated: This field has no function and is going to
                          be removed in a next release."
                        type: string
                      ownerReferences:
                        description: "List of objects depended by this object. If
                          ALL objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller. \n Deprecated: This field
                          has no function and is going to be removed in a next release."
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. See
                                https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                for how the garbage collector interacts with this
                                field and enforces the foreground deletion. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: Switch to
                              DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - template
            type: object
          status:
            description: MachinePoolStatus defines the observed state of MachinePool.
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachinePool.
                format: int32
                type: integer
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              conditions:
                description: Conditions define the current service state of the MachinePool.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: FailureMessage indicates that there is a problem reconciling
                  the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a problem reconciling
                  the state, and will be set to a token value suitable for programmatic
                  interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              nodeRefs:
                description: NodeRefs will point to the corresponding Nodes if it
                  they exist.
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              readyReplicas:
                description: The number of ready replicas for this MachinePool. A
                  machine is considered ready when the node has been created and is
                  "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              unavailableReplicas:
                description: Total number of unavailable machine instances targeted
                  by this machine pool. This is the total number of machine instances
                  that are still required for the machine pool to have 100% available
                  capacity. They may either be machine instances that are running
                  but not yet available or machine instances that still have not been
                  created.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Time duration since creation of MachinePool
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: MachinePool replicas count
      jsonPath: .status.replicas
      name: Replicas
      type: string
    - description: MachinePool status such as Terminating/Pending/Provisioning/Running/Failed
        etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Kubernetes version associated with this MachinePool
      jsonPath: .spec.template.spec.version
      name: Version
      type: string
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "MachinePool is the Schema for the machinepools API. \n Deprecated:
          This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachinePoolSpec defines the desired state of MachinePool.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomains:
                description: FailureDomains is the list of failure domains this MachinePool
                  should be attached to.
                items:
                  type: string
                type: array
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  instances should be ready. Defaults to 0 (machine instance will
                  be considered available as soon as it is ready)
                format: int32
                type: integer
              providerIDList:
                description: ProviderIDList are the identification IDs of machine
                  instances provided by the provider. This field must match the provider
                  IDs as seen on the node objects corresponding to a machine pool's
                  machine instances.
                items:
                  type: string
                type: array
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.DataSecretName
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - template
            type: object
          status:
            description: MachinePoolStatus defines the observed state of MachinePool.
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachinePool.
                format: int32
                type: integer
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              conditions:
                description: Conditions define the current service state of the MachinePool.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: FailureMessage indicates that there is a problem reconciling
                  the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a problem reconciling
                  the state, and will be set to a token value suitable for programmatic
                  interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              nodeRefs:
                description: NodeRefs will point to the corresponding Nodes if it
                  they exist.
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              readyReplicas:
                description: The number of ready replicas for this MachinePool. A
                  machine is considered ready when the node has been created and is
                  "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              unavailableReplicas:
                description: Total number of unavailable machine instances targeted
                  by this machine pool. This is the total number of machine instances
                  that are still required for the machine pool to have 100% available
                  capacity. They may either be machine instances that are running
                  but not yet available or machine instances that still have not been
                  created.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Total number of machines desired by this MachinePool
      jsonPath: .spec.replicas
      name: Desired
      priority: 10
      type: integer
    - description: MachinePool replicas count
      jsonPath: .status.replicas
      name: Replicas
      type: string
    - description: MachinePool status such as Terminating/Pending/Provisioning/Running/Failed
        etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Time duration since creation of MachinePool
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this MachinePool
      jsonPath: .spec.template.spec.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: MachinePool is the Schema for the machinepools API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachinePoolSpec defines the desired state of MachinePool.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomains:
                description: FailureDomains is the list of failure domains this MachinePool
                  should be attached to.
                items:
                  type: string
                type: array
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  instances should be ready. Defaults to 0 (machine instance will
                  be considered available as soon as it is ready)
                format: int32
                type: integer
              providerIDList:
                description: ProviderIDList are the identification IDs of machine
                  instances provided by the provider. This field must match the provider
                  IDs as seen on the node objects corresponding to a machine pool's
                  machine instances.
                items:
                  type: string
                type: array
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.DataSecretName
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDeletionTimeout:
                        description: NodeDeletionTimeout defines how long the controller
                          will attempt to delete the Node that the Machine hosts after
                          the Machine is marked for deletion. A duration of 0 will
                          retry deletion indefinitely. Defaults to 10 seconds.
                        type: string
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      nodeVolumeDetachTimeout:
                        description: NodeVolumeDetachTimeout is the total amount of
                          time that the controller will spend on waiting for all volumes
                          to be detached. The default value is 0, meaning that the
                          volumes can be detached without any time limitations.
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - template
            type: object
          status:
            description: MachinePoolStatus defines the observed state of MachinePool.
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachinePool.
                format: int32
                type: integer
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              conditions:
                description: Conditions define the current service state of the MachinePool.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: FailureMessage indicates that there is a problem reconciling
                  the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a problem reconciling
                  the state, and will be set to a token value suitable for programmatic
                  interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              nodeRefs:
                description: NodeRefs will point to the corresponding Nodes if it
                  they exist.
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              readyReplicas:
                description: The number of ready replicas for this MachinePool. A
                  machine is considered ready when the node has been created and is
                  "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              unavailableReplicas:
                description: Total number of unavailable machine instances targeted
                  by this machine pool. This is the total number of machine instances
                  that are still required for the machine pool to have 100% available
                  capacity. They may either be machine instances that are running
                  but not yet available or machine instances that still have not been
                  created.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: machines.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Machine
    listKind: MachineList
    plural: machines
    shortNames:
    - ma
    singular: machine
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: Machine status such as Terminating/Pending/Running/Failed etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Kubernetes version associated with this Machine
      jsonPath: .spec.version
      name: Version
      type: string
    - description: Node name associated with this machine
      jsonPath: .status.nodeRef.name
      name: NodeName
      priority: 1
      type: string
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "Machine is the Schema for the machines API. \n Deprecated: This
          type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSpec defines the desired state of Machine.
            properties:
              bootstrap:
                description: Bootstrap is a reference to a local struct which encapsulates
                  fields to configure the Machine’s bootstrapping mechanism.
                properties:
                  configRef:
                    description: ConfigRef is a reference to a bootstrap provider-specific
                      resource that holds configuration details. The reference is
                      optional to allow users/operators to specify Bootstrap.Data
                      without the need of a controller.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  data:
                    description: "Data contains the bootstrap data, such as cloud-init
                      details scripts. If nil, the Machine should remain in the Pending
                      state. \n Deprecated: Switch to DataSecretName."
                    type: string
                  dataSecretName:
                    description: DataSecretName is the name of the secret that stores
                      the bootstrap data script. If nil, the Machine should remain
                      in the Pending state.
                    type: string
                type: object
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomain:
                description: FailureDomain is the failure domain the machine will
                  be created in. Must match a key in the FailureDomains map stored
                  on the cluster object.
                type: string
              infrastructureRef:
                description: InfrastructureRef is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              nodeDrainTimeout:
                description: 'NodeDrainTimeout is the total amount of time that the
                  controller will spend on draining a node. The default value is 0,
                  meaning that the node can be drained without any time limitations.
                  NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`'
                type: string
              providerID:
                description: ProviderID is the identification ID of the machine provided
                  by the provider. This field must match the provider ID as seen on
                  the node object corresponding to this machine. This field is required
                  by higher level consumers of cluster-api. Example use case is cluster
                  autoscaler with cluster-api as provider. Clean-up logic in the autoscaler
                  compares machines to nodes to find out machines at provider which
                  could not get registered as Kubernetes nodes. With cluster-api as
                  a generic out-of-tree provider for autoscaler, this field is required
                  by autoscaler to be able to have a provider view of the list of
                  machines. Another list of nodes is queried from the k8s apiserver
                  and then a comparison is done to find out unregistered machines
                  and are marked for delete. This field will be set by the actuators
                  and consumed by higher level entities like autoscaler that will
                  be interfacing with cluster-api as generic provider.
                type: string
              version:
                description: Version defines the desired Kubernetes version. This
                  field is meant to be optionally used by bootstrap providers.
                type: string
            required:
            - bootstrap
            - clusterName
            - infrastructureRef
            type: object
          status:
            description: MachineStatus defines the observed state of Machine.
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              conditions:
                description: Conditions defines current service state of the Machine.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: "FailureMessage will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a more
                  verbose string suitable for logging and human consumption. \n This
                  field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the Machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of Machines can be added as events
                  to the Machine object and/or logged in the controller's output."
                type: string
              failureReason:
                description: "FailureReason will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a succinct
                  value suitable for machine interpretation. \n This field should
                  not be set for transitive errors that a controller faces that are
                  expected to be fixed automatically over time (like service outages),
                  but instead indicate that something is fundamentally wrong with
                  the Machine's spec or the configuration of the controller, and that
                  manual intervention is required. Examples of terminal errors would
                  be invalid combinations of settings in the spec, values that are
                  unsupported by the controller, or the responsible controller itself
                  being critically misconfigured. \n Any transient errors that occur
                  during the reconciliation of Machines can be added as events to
                  the Machine object and/or logged in the controller's output."
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              lastUpdated:
                description: LastUpdated identifies when the phase of the Machine
                  last transitioned.
                format: date-time
                type: string
              nodeRef:
                description: NodeRef will point to the corresponding Node if it exists.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              version:
                description: Version specifies the current version of Kubernetes running
                  on the corresponding Node. This is meant to be a means of bubbling
                  up status from the Node to the Machine. It is entirely optional,
                  but useful for end-user UX if it’s present.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Time duration since creation of Machine
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: Machine status such as Terminating/Pending/Running/Failed etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Kubernetes version associated with this Machine
      jsonPath: .spec.version
      name: Version
      type: string
    - description: Node name associated with this machine
      jsonPath: .status.nodeRef.name
      name: NodeName
      priority: 1
      type: string
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "Machine is the Schema for the machines API. \n Deprecated: This
          type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSpec defines the desired state of Machine.
            properties:
              bootstrap:
                description: Bootstrap is a reference to a local struct which encapsulates
                  fields to configure the Machine’s bootstrapping mechanism.
                properties:
                  configRef:
                    description: ConfigRef is a reference to a bootstrap provider-specific
                      resource that holds configuration details. The reference is
                      optional to allow users/operators to specify Bootstrap.DataSecretName
                      without the need of a controller.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  dataSecretName:
                    description: DataSecretName is the name of the secret that stores
                      the bootstrap data script. If nil, the Machine should remain
                      in the Pending state.
                    type: string
                type: object
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomain:
                description: FailureDomain is the failure domain the machine will
                  be created in. Must match a key in the FailureDomains map stored
                  on the cluster object.
                type: string
              infrastructureRef:
                description: InfrastructureRef is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              nodeDrainTimeout:
                description: 'NodeDrainTimeout is the total amount of time that the
                  controller will spend on draining a node. The default value is 0,
                  meaning that the node can be drained without any time limitations.
                  NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`'
                type: string
              providerID:
                description: ProviderID is the identification ID of the machine provided
                  by the provider. This field must match the provider ID as seen on
                  the node object corresponding to this machine. This field is required
                  by higher level consumers of cluster-api. Example use case is cluster
                  autoscaler with cluster-api as provider. Clean-up logic in the autoscaler
                  compares machines to nodes to find out machines at provider which
                  could not get registered as Kubernetes nodes. With cluster-api as
                  a generic out-of-tree provider for autoscaler, this field is required
                  by autoscaler to be able to have a provider view of the list of
                  machines. Another list of nodes is queried from the k8s apiserver
                  and then a comparison is done to find out unregistered machines
                  and are marked for delete. This field will be set by the actuators
                  and consumed by higher level entities like autoscaler that will
                  be interfacing with cluster-api as generic provider.
                type: string
              version:
                description: Version defines the desired Kubernetes version. This
                  field is meant to be optionally used by bootstrap providers.
                type: string
            required:
            - bootstrap
            - clusterName
            - infrastructureRef
            type: object
          status:
            description: MachineStatus defines the observed state of Machine.
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              conditions:
                description: Conditions defines current service state of the Machine.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: "FailureMessage will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a more
                  verbose string suitable for logging and human consumption. \n This
                  field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the Machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of Machines can be added as events
                  to the Machine object and/or logged in the controller's output."
                type: string
              failureReason:
                description: "FailureReason will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a succinct
                  value suitable for machine interpretation. \n This field should
                  not be set for transitive errors that a controller faces that are
                  expected to be fixed automatically over time (like service outages),
                  but instead indicate that something is fundamentally wrong with
                  the Machine's spec or the configuration of the controller, and that
                  manual intervention is required. Examples of terminal errors would
                  be invalid combinations of settings in the spec, values that are
                  unsupported by the controller, or the responsible controller itself
                  being critically misconfigured. \n Any transient errors that occur
                  during the reconciliation of Machines can be added as events to
                  the Machine object and/or logged in the controller's output."
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              lastUpdated:
                description: LastUpdated identifies when the phase of the Machine
                  last transitioned.
                format: date-time
                type: string
              nodeInfo:
                description: 'NodeInfo is a set of ids/uuids to uniquely identify
                  the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info'
                properties:
                  architecture:
                    description: The Architecture reported by the node
                    type: string
                  bootID:
                    description: Boot ID reported by the node.
                    type: string
                  containerRuntimeVersion:
                    description: ContainerRuntime Version reported by the node through
                      runtime remote API (e.g. containerd://1.4.2).
                    type: string
                  kernelVersion:
                    description: Kernel Version reported by the node from 'uname -r'
                      (e.g. 3.16.0-0.bpo.4-amd64).
                    type: string
                  kubeProxyVersion:
                    description: KubeProxy Version reported by the node.
                    type: string
                  kubeletVersion:
                    description: Kubelet Version reported by the node.
                    type: string
                  machineID:
                    description: 'MachineID reported by the node. For unique machine
                      identification in the cluster this field is preferred. Learn
                      more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html'
                    type: string
                  operatingSystem:
                    description: The Operating System reported by the node
                    type: string
                  osImage:
                    description: OS Image reported by the node from /etc/os-release
                      (e.g. Debian GNU/Linux 7 (wheezy)).
                    type: string
                  systemUUID:
                    description: SystemUUID reported by the node. For unique machine
                      identification MachineID is preferred. This field is specific
                      to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
                    type: string
                required:
                - architecture
                - bootID
                - containerRuntimeVersion
                - kernelVersion
                - kubeProxyVersion
                - kubeletVersion
                - machineID
                - operatingSystem
                - osImage
                - systemUUID
                type: object
              nodeRef:
                description: NodeRef will point to the corresponding Node if it exists.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              version:
                description: Version specifies the current version of Kubernetes running
                  on the corresponding Node. This is meant to be a means of bubbling
                  up status from the Node to the Machine. It is entirely optional,
                  but useful for end-user UX if it’s present.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Node name associated with this machine
      jsonPath: .status.nodeRef.name
      name: NodeName
      type: string
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: Machine status such as Terminating/Pending/Running/Failed etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Time duration since creation of Machine
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this Machine
      jsonPath: .spec.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Machine is the Schema for the machines API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSpec defines the desired state of Machine.
            properties:
              bootstrap:
                description: Bootstrap is a reference to a local struct which encapsulates
                  fields to configure the Machine’s bootstrapping mechanism.
                properties:
                  configRef:
                    description: ConfigRef is a reference to a bootstrap provider-specific
                      resource that holds configuration details. The reference is
                      optional to allow users/operators to specify Bootstrap.DataSecretName
                      without the need of a controller.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  dataSecretName:
                    description: DataSecretName is the name of the secret that stores
                      the bootstrap data script. If nil, the Machine should remain
                      in the Pending state.
                    type: string
                type: object
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomain:
                description: FailureDomain is the failure domain the machine will
                  be created in. Must match a key in the FailureDomains map stored
                  on the cluster object.
                type: string
              infrastructureRef:
                description: InfrastructureRef is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              nodeDeletionTimeout:
                description: NodeDeletionTimeout defines how long the controller will
                  attempt to delete the Node that the Machine hosts after the Machine
                  is marked for deletion. A duration of 0 will retry deletion indefinitely.
                  Defaults to 10 seconds.
                type: string
              nodeDrainTimeout:
                description: 'NodeDrainTimeout is the total amount of time that the
                  controller will spend on draining a node. The default value is 0,
                  meaning that the node can be drained without any time limitations.
                  NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`'
                type: string
              nodeVolumeDetachTimeout:
                description: NodeVolumeDetachTimeout is the total amount of time that
                  the controller will spend on waiting for all volumes to be detached.
                  The default value is 0, meaning that the volumes can be detached
                  without any time limitations.
                type: string
              providerID:
                description: ProviderID is the identification ID of the machine provided
                  by the provider. This field must match the provider ID as seen on
                  the node object corresponding to this machine. This field is required
                  by higher level consumers of cluster-api. Example use case is cluster
                  autoscaler with cluster-api as provider. Clean-up logic in the autoscaler
                  compares machines to nodes to find out machines at provider which
                  could not get registered as Kubernetes nodes. With cluster-api as
                  a generic out-of-tree provider for autoscaler, this field is required
                  by autoscaler to be able to have a provider view of the list of
                  machines. Another list of nodes is queried from the k8s apiserver
                  and then a comparison is done to find out unregistered machines
                  and are marked for delete. This field will be set by the actuators
                  and consumed by higher level entities like autoscaler that will
                  be interfacing with cluster-api as generic provider.
                type: string
              version:
                description: Version defines the desired Kubernetes version. This
                  field is meant to be optionally used by bootstrap providers.
                type: string
            required:
            - bootstrap
            - clusterName
            - infrastructureRef
            type: object
          status:
            description: MachineStatus defines the observed state of Machine.
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP,
                        InternalIP, ExternalDNS or InternalDNS.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              certificatesExpiryDate:
                description: CertificatesExpiryDate is the expiry date of the machine
                  certificates. This value is only set for control plane machines.
                format: date-time
                type: string
              conditions:
                description: Conditions defines current service state of the Machine.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: "FailureMessage will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a more
                  verbose string suitable for logging and human consumption. \n This
                  field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the Machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of Machines can be added as events
                  to the Machine object and/or logged in the controller's output."
                type: string
              failureReason:
                description: "FailureReason will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a succinct
                  value suitable for machine interpretation. \n This field should
                  not be set for transitive errors that a controller faces that are
                  expected to be fixed automatically over time (like service outages),
                  but instead indicate that something is fundamentally wrong with
                  the Machine's spec or the configuration of the controller, and that
                  manual intervention is required. Examples of terminal errors would
                  be invalid combinations of settings in the spec, values that are
                  unsupported by the controller, or the responsible controller itself
                  being critically misconfigured. \n Any transient errors that occur
                  during the reconciliation of Machines can be added as events to
                  the Machine object and/or logged in the controller's output."
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              lastUpdated:
                description: LastUpdated identifies when the phase of the Machine
                  last transitioned.
                format: date-time
                type: string
              nodeInfo:
                description: 'NodeInfo is a set of ids/uuids to uniquely identify
                  the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info'
                properties:
                  architecture:
                    description: The Architecture reported by the node
                    type: string
                  bootID:
                    description: Boot ID reported by the node.
                    type: string
                  containerRuntimeVersion:
                    description: ContainerRuntime Version reported by the node through
                      runtime remote API (e.g. containerd://1.4.2).
                    type: string
                  kernelVersion:
                    description: Kernel Version reported by the node from 'uname -r'
                      (e.g. 3.16.0-0.bpo.4-amd64).
                    type: string
                  kubeProxyVersion:
                    description: KubeProxy Version reported by the node.
                    type: string
                  kubeletVersion:
                    description: Kubelet Version reported by the node.
                    type: string
                  machineID:
                    description: 'MachineID reported by the node. For unique machine
                      identification in the cluster this field is preferred. Learn
                      more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html'
                    type: string
                  operatingSystem:
                    description: The Operating System reported by the node
                    type: string
                  osImage:
                    description: OS Image reported by the node from /etc/os-release
                      (e.g. Debian GNU/Linux 7 (wheezy)).
                    type: string
                  systemUUID:
                    description: SystemUUID reported by the node. For unique machine
                      identification MachineID is preferred. This field is specific
                      to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
                    type: string
                required:
                - architecture
                - bootID
                - containerRuntimeVersion
                - kernelVersion
                - kubeProxyVersion
                - kubeletVersion
                - machineID
                - operatingSystem
                - osImage
                - systemUUID
                type: object
              nodeRef:
                description: NodeRef will point to the corresponding Node if it exists.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.11.4
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: machinesets.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineSet
    listKind: MachineSetList
    plural: machinesets
    shortNames:
    - ms
    singular: machineset
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Total number of non-terminated machines targeted by this machineset
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of available machines (ready for at least minReadySeconds)
      jsonPath: .status.availableReplicas
      name: Available
      type: integer
    - description: Total number of ready machines targeted by this machineset.
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: "MachineSet is the Schema for the machinesets API. \n Deprecated:
          This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSetSpec defines the desired state of MachineSet.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              deletePolicy:
                description: DeletePolicy defines the policy used to identify nodes
                  to delete when downscaling. Defaults to "Random".  Valid values
                  are "Random, "Newest", "Oldest"
                enum:
                - Random
                - Newest
                - Oldest
                type: string
              minReadySeconds:
                description: MinReadySeconds is the minimum number of seconds for
                  which a newly created machine should be ready. Defaults to 0 (machine
                  will be considered available as soon as it is ready)
                format: int32
                type: integer
              replicas:
                description: Replicas is the number of desired replicas. This is a
                  pointer to distinguish between explicit zero and unspecified. Defaults
                  to 1.
                format: int32
                type: integer
              selector:
                description: 'Selector is a label query over machines that should
                  match the replica count. Label keys and values that must match in
                  order to be controlled by this MachineSet. It must match the machine
                  template''s labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              template:
                description: Template is the object that describes the machine that
                  will be created if insufficient replicas are detected. Object references
                  to custom resources are treated as templates.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                          \n Deprecated: This field has no function and is going to
                          be removed in a next release."
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: "Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names \n
                          Deprecated: This field has no function and is going to be
                          removed in a next release."
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces
                          \n Deprecated: This field has no function and is going to
                          be removed in a next release."
                        type: string
                      ownerReferences:
                        description: "List of objects depended by this object. If
                          ALL objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller. \n Deprecated: This field
                          has no function and is going to be removed in a next release."
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. See
                                https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                for how the garbage collector interacts with this
                                field and enforces the foreground deletion. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: Switch to
                              DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            type: object
          status:
            description: MachineSetStatus defines the observed state of MachineSet.
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachineSet.
                format: int32
                type: integer
              failureMessage:
                type: string
              failureReason:
                description: "In the event that there is a terminal problem reconciling
                  the replicas, both FailureReason and FailureMessage will be set.
                  FailureReason will be populated with a succinct value suitable for
                  machine interpretation, while FailureMessage will contain a more
                  verbose string suitable for logging and human consumption. \n These
                  fields should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the MachineTemplate's spec or the configuration of the
                  machine controller, and that manual intervention is required. Examples
                  of terminal errors would be invalid combinations of settings in
                  the spec, values that are unsupported by the machine controller,
                  or the responsible machine controller itself being critically misconfigured.
                  \n Any transient errors that occur during the reconciliation of
                  Machines can be added as events to the MachineSet object and/or
                  logged in the controller's output."
                type: string
              fullyLabeledReplicas:
                description: The number of replicas that have labels matching the
                  labels of the machine template of the MachineSet.
                format: int32
                type: integer
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed MachineSet.
                format: int64
                type: integer
              readyReplicas:
                description: The number of ready replicas for this MachineSet. A machine
                  is considered ready when the node has been created and is "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Time duration since creation of MachineSet
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Total number of non-terminated machines targeted by this machineset
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of available machines (ready for at least minReadySeconds)
      jsonPath: .status.availableReplicas
      name: Available
      type: integer
    - description: Total number of ready machines targeted by this machineset.
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    deprecated: true
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "MachineSet is the Schema for the machinesets API. \n Deprecated:
          This type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSetSpec defines the desired state of MachineSet.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              deletePolicy:
                description: DeletePolicy defines the policy used to identify nodes
                  to delete when downscaling. Defaults to "Random".  Valid values
                  are "Random, "Newest", "Oldest"
                enum:
                - Random
                - Newest
                - Oldest
                type: string
              minReadySeconds:
                description: MinReadySeconds is the minimum number of seconds for
                  which a newly created machine should be ready. Defaults to 0 (machine
                  will be considered available as soon as it is ready)
                format: int32
                type: integer
              replicas:
                default: 1
                description: Replicas is the number of desired replicas. This is a
                  pointer to distinguish between explicit zero and unspecified. Defaults
                  to 1.
                format: int32
                type: integer
              selector:
                description: 'Selector is a label query over machines that should
                  match the replica count. Label keys and values that must match in
                  order to be controlled by this MachineSet. It must match the machine
                  template''s labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              template:
                description: Template is the object that describes the machine that
                  will be created if insufficient replicas are detected. Object references
                  to custom resources are treated as templates.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.DataSecretName
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            type: object
          status:
            description: MachineSetStatus defines the observed state of MachineSet.
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachineSet.
                format: int32
                type: integer
              conditions:
                description: Conditions defines current service state of the MachineSet.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                type: string
              failureReason:
                description: "In the event that there is a terminal problem reconciling
                  the replicas, both FailureReason and FailureMessage will be set.
                  FailureReason will be populated with a succinct value suitable for
                  machine interpretation, while FailureMessage will contain a more
                  verbose string suitable for logging and human consumption. \n These
                  fields should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the MachineTemplate's spec or the configuration of the
                  machine controller, and that manual intervention is required. Examples
                  of terminal errors would be invalid combinations of settings in
                  the spec, values that are unsupported by the machine controller,
                  or the responsible machine controller itself being critically misconfigured.
                  \n Any transient errors that occur during the reconciliation of
                  Machines can be added as events to the MachineSet object and/or
                  logged in the controller's output."
                type: string
              fullyLabeledReplicas:
                description: The number of replicas that have labels matching the
                  labels of the machine template of the MachineSet.
                format: int32
                type: integer
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed MachineSet.
                format: int64
                type: integer
              readyReplicas:
                description: The number of ready replicas for this MachineSet. A machine
                  is considered ready when the node has been created and is "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .spec.clusterName
      name: Cluster
      type: string
    - description: Total number of machines desired by this machineset
      jsonPath: .spec.replicas
      name: Desired
      priority: 10
      type: integer
    - description: Total number of non-terminated machines targeted by this machineset
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of ready machines targeted by this machineset.
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of available machines (ready for at least minReadySeconds)
      jsonPath: .status.availableReplicas
      name: Available
      type: integer
    - description: Time duration since creation of MachineSet
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this MachineSet
      jsonPath: .spec.template.spec.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: MachineSet is the Schema for the machinesets API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSetSpec defines the desired state of MachineSet.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              deletePolicy:
                description: DeletePolicy defines the policy used to identify nodes
                  to delete when downscaling. Defaults to "Random".  Valid values
                  are "Random, "Newest", "Oldest"
                enum:
                - Random
                - Newest
                - Oldest
                type: string
              minReadySeconds:
                description: MinReadySeconds is the minimum number of seconds for
                  which a newly created machine should be ready. Defaults to 0 (machine
                  will be considered available as soon as it is ready)
                format: int32
                type: integer
              replicas:
                default: 1
                description: Replicas is the number of desired replicas. This is a
                  pointer to distinguish between explicit zero and unspecified. Defaults
                  to 1.
                format: int32
                type: integer
              selector:
                description: 'Selector is a label query over machines that should
                  match the replica count. Label keys and values that must match in
                  order to be controlled by this MachineSet. It must match the machine
                  template''s labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              template:
                description: Template is the object that describes the machine that
                  will be created if insufficient replicas are detected. Object references
                  to custom resources are treated as templates.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.DataSecretName
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nodeDeletionTimeout:
                        description: NodeDeletionTimeout defines how long the controller
                          will attempt to delete the Node that the Machine hosts after
                          the Machine is marked for deletion. A duration of 0 will
                          retry deletion indefinitely. Defaults to 10 seconds.
                        type: string
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      nodeVolumeDetachTimeout:
                        description: NodeVolumeDetachTimeout is the total amount of
                          time that the controller will spend on waiting for all volumes
                          to be detached. The default value is 0, meaning that the
                          volumes can be detached without any time limitations.
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            type: object
          status:
            description: MachineSetStatus defines the observed state of MachineSet.
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachineSet.
                format: int32
                type: integer
              conditions:
                description: Conditions defines current service state of the MachineSet.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                type: string
              failureReason:
                description: "In the event that there is a terminal problem reconciling
                  the replicas, both FailureReason and FailureMessage will be set.
                  FailureReason will be populated with a succinct value suitable for
                  machine interpretation, while FailureMessage will contain a more
                  verbose string suitable for logging and human consumption. \n These
                  fields should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the MachineTemplate's spec or the configuration of the
                  machine controller, and that manual intervention is required. Examples
                  of terminal errors would be invalid combinations of settings in
                  the spec, values that are unsupported by the machine controller,
                  or the responsible machine controller itself being critically misconfigured.
                  \n Any transient errors that occur during the reconciliation of
                  Machines can be added as events to the MachineSet object and/or
                  logged in the controller's output."
                type: string
              fullyLabeledReplicas:
                description: The number of replicas that have labels matching the
                  labels of the machine template of the MachineSet.
                format: int32
                type: integer
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed MachineSet.
                format: int64
                type: integer
              readyReplicas:
                description: The number of ready replicas for this MachineSet. A machine
                  is considered ready when the node has been created and is "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: remoteclusters.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    kind: RemoteCluster
    listKind: RemoteClusterList
    plural: remoteclusters
    singular: remotecluster
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RemoteClusterSpec defines the desired state of RemoteCluster
            properties:
              controlPlaneEndpoint:
                description: APIEndpoint represents a reachable Kubernetes API endpoint.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
            required:
            - controlPlaneEndpoint
            type: object
          status:
            description: RemoteClusterStatus defines the observed state of RemoteCluster
            properties:
              ready:
                default: false
                description: Ready denotes that the remote cluster is ready to be
                  used.
                type: boolean
            required:
            - ready
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  labels:
    cluster.x-k8s.io/v1beta1: v1beta1
  name: remotemachines.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    kind: RemoteMachine
    listKind: RemoteMachineList
    plural: remotemachines
    singular: remotemachine
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RemoteMachineSpec defines the desired state of RemoteMachine
            properties:
              address:
                description: Address is the IP address or DNS name of the remote machine.
                type: string
              port:
                default: 22
                description: Port is the SSH port of the remote machine.
                type: integer
              providerID:
                description: ProviderID is the ID of the machine in the provider.
                type: string
              sshKeyRef:
                description: SSHKeyRef is a reference to a secret that contains the
                  SSH private key. The key must be placed on the secret using the
                  key "value".
                properties:
                  name:
                    description: Name is the name of the secret.
                    type: string
                required:
                - name
                type: object
              user:
                default: root
                description: User is the user to use when connecting to the remote
                  machine.
                type: string
            required:
            - address
            - sshKeyRef
            type: object
          status:
            description: RemoteMachineStatus defines the observed state of RemoteMachine
            properties:
              failureMessage:
                type: string
              failureReason:
                type: string
              ready:
                description: Ready denotes that the remote machine is ready to be
                  used.
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-manager
  namespace: capi-kubeadm-bootstrap-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-manager
  namespace: capi-kubeadm-control-plane-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-manager
  namespace: capi-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-controller-manager
  namespace: k0smotron
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-leader-election-role
  namespace: capi-kubeadm-bootstrap-system
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-leader-election-role
  namespace: capi-kubeadm-control-plane-system
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-leader-election-role
  namespace: capi-system
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-leader-election-role
  namespace: k0smotron
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      cluster.x-k8s.io/aggregate-to-manager: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-aggregated-manager-role
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - kubeadmconfigs
  - kubeadmconfigs/finalizers
  - kubeadmconfigs/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  - machinepools
  - machinepools/status
  - machines
  - machines/status
  - machinesets
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      kubeadm.controlplane.cluster.x-k8s.io/aggregate-to-manager: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-aggregated-manager-role
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
    kubeadm.controlplane.cluster.x-k8s.io/aggregate-to-manager: "true"
  name: capi-kubeadm-control-plane-manager-role
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - controlplane.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  - machines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/aggregate-to-manager: "true"
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - addons.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - addons.cluster.x-k8s.io
  resources:
  - clusterresourcesets/finalizers
  - clusterresourcesets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - controlplane.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusterclasses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusterclasses
  - clusterclasses/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/finalizers
  - clusters/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinedeployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinedeployments
  - machinedeployments/finalizers
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinedeployments
  - machinedeployments/finalizers
  - machinedeployments/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinehealthchecks
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinehealthchecks
  - machinehealthchecks/finalizers
  - machinehealthchecks/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinepools
  - machinepools/finalizers
  - machinepools/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  - machines/finalizers
  - machines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  - machines/status
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinesets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinesets
  - machinesets/finalizers
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinesets
  - machinesets/finalizers
  - machinesets/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ipam.cluster.x-k8s.io
  resources:
  - ipaddressclaims
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - runtime.cluster.x-k8s.io
  resources:
  - extensionconfigs
  - extensionconfigs/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k0smotron-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - k0scontrollerconfigs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - k0scontrollerconfigs/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - k0sworkerconfigs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - k0sworkerconfigs/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  - machines
  - machines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - k0scontrolplanes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - k0scontrolplanes/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - k0smotroncontrolplanes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - k0smotroncontrolplanes/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - exp.cluster.x-k8s.io
  resources:
  - machinepools
  - machinepools/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - remoteclusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - remoteclusters/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - remotemachines
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - remotemachines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - k0smotron.io
  resources:
  - clusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - k0smotron.io
  resources:
  - clusters/finalizers
  verbs:
  - update
- apiGroups:
  - k0smotron.io
  resources:
  - clusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - k0smotron.io
  resources:
  - jointokenrequests
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - k0smotron.io
  resources:
  - jointokenrequests/finalizers
  verbs:
  - update
- apiGroups:
  - k0smotron.io
  resources:
  - jointokenrequests/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-leader-election-rolebinding
  namespace: capi-kubeadm-bootstrap-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-kubeadm-bootstrap-leader-election-role
subjects:
- kind: ServiceAccount
  name: capi-kubeadm-bootstrap-manager
  namespace: capi-kubeadm-bootstrap-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-leader-election-rolebinding
  namespace: capi-kubeadm-control-plane-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-kubeadm-control-plane-leader-election-role
subjects:
- kind: ServiceAccount
  name: capi-kubeadm-control-plane-manager
  namespace: capi-kubeadm-control-plane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-leader-election-rolebinding
  namespace: capi-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-leader-election-role
subjects:
- kind: ServiceAccount
  name: capi-manager
  namespace: capi-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-leader-election-rolebinding
  namespace: k0smotron
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k0smotron-leader-election-role
subjects:
- kind: ServiceAccount
  name: k0smotron-controller-manager
  namespace: k0smotron
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-kubeadm-bootstrap-manager-role
subjects:
- kind: ServiceAccount
  name: capi-kubeadm-bootstrap-manager
  namespace: capi-kubeadm-bootstrap-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-kubeadm-control-plane-aggregated-manager-role
subjects:
- kind: ServiceAccount
  name: capi-kubeadm-control-plane-manager
  namespace: capi-kubeadm-control-plane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-aggregated-manager-role
subjects:
- kind: ServiceAccount
  name: capi-manager
  namespace: capi-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k0smotron-manager-role
subjects:
- kind: ServiceAccount
  name: k0smotron-controller-manager
  namespace: k0smotron
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: k0smotron
  name: k0smotron-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k0smotron-proxy-role
subjects:
- kind: ServiceAccount
  name: k0smotron-controller-manager
  namespace: k0smotron
---
apiVersion: v1
data:
  vault-approle.sh: |-
    #!/bin/bash
    set -e

    # TODO: enable approle auth method
    # TODO: approle for ceph
    # TODO: approle for kasten
  vault-ldap.sh: |-
    #!/bin/bash
    set -e

    # TODO: add ldap as auth method
    # TODO: configure ldap auth method
  vault-oidc.sh: |-
    #!/bin/bash
    set -e

    ENTITY_ID=$(vault read -field=id identity/entity/name/admin)
    # vault write identity/group \
    #   name=admins \
    #   member_entity_ids="${ENTITY_ID}"
    GROUP_ID="$(vault read -field=id identity/group/name/admins)"
    USERPASS_ACCESSOR="$(vault auth list -detailed -format json | jq -r '.["userpass/"].accessor')"
    vault write identity/entity-alias \
      name=admin \
      canonical_id="${ENTITY_ID}" \
      mount_accessor="${USERPASS_ACCESSOR}"

    vault write identity/oidc/assignment/default \
      entity_ids="${ENTITY_ID}" \
      group_ids="${GROUP_ID}"
    vault write identity/oidc/key/default \
      allowed_client_ids="*" \
      verification_ttl=2h \
      rotation_period=1h \
      algorithm=RS256
    vault write identity/oidc/client/pinniped \
      redirect_uris=http://127.0.0.1:8080/v1/auth-methods/oidc/callback \
      assignments=default \
      key=default \
      id_token_ttl=30m \
      access_token_ttl=1h
    CLIENT_ID="$(vault read -field=client_id identity/oidc/client/pinniped)"

    USER_SCOPE_TEMPLATE='{
        "username": {{identity.entity.name}},
        "contact": {
            "email": {{identity.entity.metadata.email}},
            "phone_number": {{identity.entity.metadata.phone_number}}
        }
    }'
    vault write identity/oidc/scope/user \
      description="The user scope provides claims using Vault identity entity metadata" \
      template="$(echo "${USER_SCOPE_TEMPLATE}" | base64 -)"
    GROUPS_SCOPE_TEMPLATE='{
        "groups": {{identity.entity.groups.names}}
    }'
    vault write identity/oidc/scope/groups \
      description="The groups scope provides the groups claim using Vault group membership" \
      template="$(echo "${GROUPS_SCOPE_TEMPLATE}" | base64 -)"
    vault write identity/oidc/provider/vault \
      allowed_client_ids="${CLIENT_ID}" \
      scopes_supported="groups,user"
  vault-policy.sh: |-
    #!/bin/bash
    set -e

    # add policies
    vault policy write admins /bitnami/vault/home/userconfig/admins.hcl
    vault policy write oidc-auth /bitnami/vault/home/userconfig/oidc-auth.hcl
    vault policy write oidc-admin /bitnami/vault/home/userconfig/oidc-admin.hcl
  vault-unseal.sh: |-
    #!/bin/bash
    set -e

    # init vault
    initialize() {
      echo 'initializing vault...'

      vault operator init \
        -tls-skip-verify \
        -key-shares=10 \
        -key-threshold=3 \
        -format=json > /bitnami/vault/data/vault-credentials.json
    }

    # unseal vault
    unseal() {
      echo 'unsealing vault...'

      UNSEAL_KEY_1="$(cat /bitnami/vault/data/vault-credentials.json | tail -n +3 | head -n 1 | tr -d ',' | tr -d '"')"
      UNSEAL_KEY_2="$(cat /bitnami/vault/data/vault-credentials.json | tail -n +4 | head -n 1 | tr -d ',' | tr -d '"')"
      UNSEAL_KEY_3="$(cat /bitnami/vault/data/vault-credentials.json | tail -n +5 | head -n 1 | tr -d ',' | tr -d '"')"

      vault operator unseal "${UNSEAL_KEY_1}"
      vault operator unseal "${UNSEAL_KEY_2}"
      vault operator unseal "${UNSEAL_KEY_3}"
    }

    # login vault
    login() {
      echo 'logging into vault...'

      ROOT_TOKEN="$(cat /bitnami/vault/data/vault-credentials.json | awk '/root_token/ { print $2 }' | tr -d ',' | tr -d '"')"
      vault login "${ROOT_TOKEN}"
    }

    # save vault credentials
    save() {
      echo 'saving vault credentials...'

      vault kv put kv/vault-credentials \
        root_token="${ROOT_TOKEN}" \
        unseal_key_1="${UNSEAL_KEY_1}" \
        unseal_key_2="${UNSEAL_KEY_2}" \
        unseal_key_3="${UNSEAL_KEY_3}" \
        vault_credentials_json="$(cat /bitnami/vault/data/vault-credentials.json)"
    }

    INIT_STATUS=$(vault status | awk '/Initialized/ { print $2 }' | tr -d ',' | tr -d '"')
    SEAL_STATUS=$(vault status | awk '/Sealed/ { print $2 }' | tr -d ',' | tr -d '"')

    [[ "${INIT_STATUS}" == 'false' ]] && initialize
    [[ "${SEAL_STATUS}" == 'true' ]] && unseal

    login

    VAULT_KV_STATUS=$(vault secrets list | awk /kv/)
    [[ -z "${VAULT_KV_STATUS}" ]] && vault secrets enable -version=2 kv

    VAULT_KV_SECRET_STATUS=$(vault kv list kv/ | awk /vault-credentials/)
    [[ -z "${VAULT_KV_SECRET_STATUS}" ]] && save

    echo 'vault initialized and unsealed'
    exit 0
  vault-userpass.sh: |-
    #!/bin/bash
    set -e

    # enable userpass auth method
    vault auth enable userpass || true

    # TODO: create admins group
    # TODO: create admins group
    # FIXME: create admin user and add to admins group
    # vault write auth/userpass/admins/admin \
    #   password=${PASSWORD:-changeme} \
    #   policies=admins
kind: ConfigMap
metadata:
  name: vault-script
  namespace: iam
---
apiVersion: v1
data:
  admins.hcl: |
    # Allow managing leases
    path "sys/leases/*"
    {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # Manage auth methods broadly across Vault
    path "auth/*"
    {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # Create, update, and delete auth methods
    path "sys/auth/*"
    {
      capabilities = ["create", "update", "delete", "sudo"]
    }

    # List auth methods
    path "sys/auth"
    {
      capabilities = ["read"]
    }

    # List existing policies
    path "sys/policies/acl"
    {
      capabilities = ["read","list"]
    }

    # Create and manage ACL policies
    path "sys/policies/acl/*"
    {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # List, create, update, and delete key/value secrets
    path "secret/*"
    {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # Manage secret engines
    path "sys/mounts/*"
    {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # List existing secret engines.
    path "sys/mounts"
    {
      capabilities = ["read"]
    }

    # Read health checks
    path "sys/health"
    {
      capabilities = ["read", "sudo"]
    }
  oidc-admin.hcl: |
    # To create an entity and entity alias. Enable and configure Vault as an OIDC provider
    path "identity/*" {
      capabilities = [ "create", "read", "update", "delete", "list" ]
    }

    # To enable userpass auth method
    path "sys/auth/userpass" {
      capabilities = [ "create", "read", "update", "delete" ]
    }

    # To create a new user, "end-user" for userpass
    path "auth/userpass/users/*" {
      capabilities = [ "create", "read", "update", "delete", "list" ]
    }
  oidc-auth.hcl: |
    path "identity/oidc/provider/vault/authorize" {
      capabilities = [ "read" ]
    }
kind: ConfigMap
metadata:
  name: vault-userconfig
  namespace: iam
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-webhook-service
  namespace: capi-kubeadm-bootstrap-system
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-webhook-service
  namespace: capi-kubeadm-control-plane-system
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    cluster.x-k8s.io/provider: control-plane-kubeadm
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-webhook-service
  namespace: capi-system
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    cluster.x-k8s.io/provider: cluster-api
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: k0smotron
    control-plane: controller-manager
  name: k0smotron-controller-manager-metrics-service
  namespace: k0smotron
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
    control-plane: controller-manager
  name: capi-kubeadm-bootstrap-controller-manager
  namespace: capi-kubeadm-bootstrap-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: bootstrap-kubeadm
      control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        cluster.x-k8s.io/provider: bootstrap-kubeadm
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --leader-elect
        - --metrics-bind-addr=localhost:8080
        - --feature-gates=MachinePool=true,KubeadmBootstrapFormatIgnition=false,LazyRestmapper=false
        - --bootstrap-token-ttl=15m
        command:
        - /manager
        image: registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:v1.4.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 65532
          runAsUser: 65532
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: capi-kubeadm-bootstrap-manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - name: cert
        secret:
          secretName: capi-kubeadm-bootstrap-webhook-service-cert
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
    control-plane: controller-manager
  name: capi-kubeadm-control-plane-controller-manager
  namespace: capi-kubeadm-control-plane-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: control-plane-kubeadm
      control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        cluster.x-k8s.io/provider: control-plane-kubeadm
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --leader-elect
        - --metrics-bind-addr=localhost:8080
        - --feature-gates=ClusterTopology=true,KubeadmBootstrapFormatIgnition=false,LazyRestmapper=false
        command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        image: registry.k8s.io/cluster-api/kubeadm-control-plane-controller:v1.4.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 65532
          runAsUser: 65532
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: capi-kubeadm-control-plane-manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - name: cert
        secret:
          secretName: capi-kubeadm-control-plane-webhook-service-cert
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
    control-plane: controller-manager
  name: capi-controller-manager
  namespace: capi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: cluster-api
      control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        cluster.x-k8s.io/provider: cluster-api
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --leader-elect
        - --metrics-bind-addr=localhost:8080
        - --feature-gates=MachinePool=true,ClusterResourceSet=true,ClusterTopology=true,RuntimeSDK=false,LazyRestmapper=false
        command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        image: registry.k8s.io/cluster-api/cluster-api-controller:v1.4.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 65532
          runAsUser: 65532
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: capi-manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - name: cert
        secret:
          secretName: capi-webhook-service-cert
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: k0smotron
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: k0smotron
    control-plane: controller-manager
  name: k0smotron-controller-manager
  namespace: k0smotron
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: SSH_KNOWN_HOSTS
          value: ""
        image: quay.io/k0sproject/k0smotron:v0.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: k0smotron-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: ceph.rook.io/v1
kind: CephObjectStoreUser
metadata:
  name: ceph-user-pg
  namespace: ucp
spec:
  displayName: postgresql
  store: ceph-objectstore
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-serving-cert
  namespace: capi-kubeadm-bootstrap-system
spec:
  dnsNames:
  - capi-kubeadm-bootstrap-webhook-service.capi-kubeadm-bootstrap-system.svc
  - capi-kubeadm-bootstrap-webhook-service.capi-kubeadm-bootstrap-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: capi-kubeadm-bootstrap-selfsigned-issuer
  secretName: capi-kubeadm-bootstrap-webhook-service-cert
  subject:
    organizations:
    - k8s-sig-cluster-lifecycle
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-serving-cert
  namespace: capi-kubeadm-control-plane-system
spec:
  dnsNames:
  - capi-kubeadm-control-plane-webhook-service.capi-kubeadm-control-plane-system.svc
  - capi-kubeadm-control-plane-webhook-service.capi-kubeadm-control-plane-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: capi-kubeadm-control-plane-selfsigned-issuer
  secretName: capi-kubeadm-control-plane-webhook-service-cert
  subject:
    organizations:
    - k8s-sig-cluster-lifecycle
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-serving-cert
  namespace: capi-system
spec:
  dnsNames:
  - capi-webhook-service.capi-system.svc
  - capi-webhook-service.capi-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: capi-selfsigned-issuer
  secretName: capi-webhook-service-cert
  subject:
    organizations:
    - k8s-sig-cluster-lifecycle
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-selfsigned-issuer
  namespace: capi-kubeadm-bootstrap-system
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-selfsigned-issuer
  namespace: capi-kubeadm-control-plane-system
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-selfsigned-issuer
  namespace: capi-system
spec:
  selfSigned: {}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: capi-bm-kubeadm
  namespace: capi
spec:
  controlPlane:
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: ByoMachineTemplate
        name: byoh-control-plane
    namingStrategy:
      template: capi-{{ .cluster.name }}-{{ .random }}
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: kubeadm-control-plane
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: ByoClusterTemplate
      name: byoh
  patches:
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/bundleLookupBaseRegistry
        valueFrom:
          variable: bundleLookupBaseRegistry
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: ByoClusterTemplate
        matchResources:
          infrastructureCluster: true
    description: Sets the bundleLookupBaseRegistry used for the BYOCluster.
    name: bundleLookupBaseRegistry
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/controlPlaneEndpoint
        valueFrom:
          template: |
            host: "{{ .controlPlaneIpAddr }}"
            port: 6443
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: ByoClusterTemplate
        matchResources:
          infrastructureCluster: true
    description: Sets control plane endpoint
    name: controlPlaneEndpoint
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/0/content
        valueFrom:
          variable: kubeVipPodManifest
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: kubeVipEnabled
  variables:
  - name: bundleLookupBaseRegistry
    required: false
    schema:
      openAPIV3Schema:
        default: https://projects.registry.vmware.com/cluster_api_provider_bringyourownhost
        description: |
          The base registry to use for bundle lookup. This is used to find the
          bundle for the control plane and worker nodes. The default is the
          VMware registry.
        type: string
  - name: controlPlaneIpAddr
    required: true
    schema:
      openAPIV3Schema:
        description: The IP address of the control plane.
        type: string
  - name: enableKubeVip
    required: false
    schema:
      openAPIV3Schema:
        default: false
        description: |
          Whether to enable kube-vip for the control plane. This is used to
          provide a virtual IP address for the control plane.
        type: boolean
  - name: kubeVipPodManifest
    required: true
    schema:
      openAPIV3Schema:
        description: kube-vip manifest for the control plane.
        type: string
  workers:
    machineDeployments:
    - class: vm-cruiser-worker
      namingStrategy:
        template: capi-{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{
          .random }}
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: kubeadm-worker-bootstrap-template
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: ByoMachineTemplate
            name: byoh-worker-machinetemplate
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: capi-vm-kubeadm
  namespace: capi
spec:
  controlPlane:
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: ByoMachineTemplate
        name: byoh-control-plane
    namingStrategy:
      template: capi-{{ .cluster.name }}-{{ .random }}
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: kubeadm-control-plane
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: ByoClusterTemplate
      name: byoh
  patches:
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/bundleLookupBaseRegistry
        valueFrom:
          variable: bundleLookupBaseRegistry
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: ByoClusterTemplate
        matchResources:
          infrastructureCluster: true
    description: Sets the bundleLookupBaseRegistry used for the BYOCluster.
    name: bundleLookupBaseRegistry
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/controlPlaneEndpoint
        valueFrom:
          template: |
            host: "{{ .controlPlaneIpAddr }}"
            port: 6443
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: ByoClusterTemplate
        matchResources:
          infrastructureCluster: true
    description: Sets control plane endpoint
    name: controlPlaneEndpoint
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/0/content
        valueFrom:
          variable: kubeVipPodManifest
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: kubeVipEnabled
  variables:
  - name: bundleLookupBaseRegistry
    required: false
    schema:
      openAPIV3Schema:
        default: https://projects.registry.vmware.com/cluster_api_provider_bringyourownhost
        description: |
          The base registry to use for bundle lookup. This is used to find the
          bundle for the control plane and worker nodes. The default is the
          VMware registry.
        type: string
  - name: controlPlaneIpAddr
    required: true
    schema:
      openAPIV3Schema:
        description: The IP address of the control plane.
        type: string
  - name: enableKubeVip
    required: false
    schema:
      openAPIV3Schema:
        default: false
        description: |
          Whether to enable kube-vip for the control plane. This is used to
          provide a virtual IP address for the control plane.
        type: boolean
  - name: kubeVipPodManifest
    required: true
    schema:
      openAPIV3Schema:
        description: kube-vip manifest for the control plane.
        type: string
  workers:
    machineDeployments:
    - class: vm-cruiser-worker
      namingStrategy:
        template: capi-{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{
          .random }}
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: kubeadm-worker-bootstrap-template
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: ByoMachineTemplate
            name: byoh-worker-machinetemplate
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: pinniped-supervisor
  namespace: iam
spec:
  chart:
    spec:
      chart: bitnamicharts/pinniped
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: docker
        namespace: sre
      version: 1.2.5
  install:
    crds: Create
    createNamespace: true
    replace: true
  interval: 1m0s
  postRenderers:
  - kustomize:
      images:
      - name: bitnami/pinniped
  upgrade:
    crds: CreateReplace
  values:
    concierge:
      enabled: false
    supervisor:
      enabled: true
      replicaCount: 1
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vault
  namespace: iam
spec:
  chart:
    spec:
      chart: bitnamicharts/vault
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: docker
        namespace: sre
      version: 0.25.0
  dependsOn:
  - name: prometheus
    namespace: observability
  install:
    crds: Create
    createNamespace: true
    replace: true
  interval: 1m0s
  postRenderers:
  - kustomize:
      images:
      - name: docker.io/bitnami/os-shell
      - name: docker.io/hashicorp/vault
      - name: docker.io/hashicorp/vault-csi-provider
      - name: docker.io/hashicorp/vault-k8s
  upgrade:
    crds: CreateReplace
  values:
    global:
      serverTelemetry:
        prometheusOperator: true
      tlsDisable: false
    server:
      dataStorage:
        storageClass: ceph-rbd
      extraInitContainers: []
      postStart:
      - /bin/sh
      - -c
      - /vault/userconfig/scripts/vault-unseal.sh
      resources:
        limits:
          cpu: 250m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
      - mountPath: /vault/userconfig/scripts
        name: vault-script
        readOnly: true
      - mountPath: /vault/userconfig/config
        name: vault-userconfig
        readOnly: true
      volumes:
      - configMap:
          defaultMode: 420
          name: vault-userconfig
        name: vault-userconfig
      - configMap:
          defaultMode: 493
          name: vault-script
        name: vault-script
    serverTelemetry:
      prometheusRules:
        enabled: true
        rules:
        - alert: vault-HighResponseTime
          annotations:
            message: The response time of Vault is over 500ms on average over the
              last 5 minutes.
          expr: vault_core_handle_request{quantile="0.5", namespace="mynamespace"}
            > 500
          for: 5m
          labels:
            severity: warning
        - alert: vault-HighResponseTime
          annotations:
            message: The response time of Vault is over 1s on average over the last
              5 minutes.
          expr: vault_core_handle_request{quantile="0.5", namespace="mynamespace"}
            > 1000
          for: 5m
          labels:
            severity: critical
      serviceMonitor:
        enabled: true
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: issuer
  namespace: ucp
spec:
  chart:
    spec:
      chart: sanselme/ca-issuer
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: docker
        namespace: sre
      version: 0.2.2
  dependsOn:
  - name: cert-manager
    namespace: cert-manager
  install:
    crds: Create
    createNamespace: true
    replace: true
  interval: 1m0s
  upgrade:
    crds: CreateReplace
  values:
    conf:
      ca:
        issuer:
          name: ucp-ca-issuer
        secret:
          name: ucp-ca-key-pair
    manifests:
      secret_ca: false
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: maas
  namespace: ucp
spec:
  chart:
    spec:
      chart: sanselme/maas
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: docker
        namespace: sre
      version: 0.1.4
  dependsOn:
  - name: ucp-ca-issuer
  - name: prostgresql
  install:
    crds: Create
    createNamespace: true
    replace: true
  interval: 1m0s
  postRenderers:
  - kustomize:
      images:
      - name: docker.io/busybox
      - name: docker.io/postgres
      - name: docker.io/sanselme/kubernetes-entrypoint
      - name: docker.io/sanselme/maas-rack-controller
      - name: docker.io/sanselme/maas-region-controller
      - name: docker.io/sanselme/maas-region-controller
      - name: docker.io/sanselme/maas-region-controller
      - name: docker.io/sanselme/maas-region-controller
      - name: docker.io/sanselme/maas-region-controller
      - name: docker.io/sanselme/maas-region-controller
      - name: gcr.io/google_containers/ingress-gce-404-server-with-metrics-amd64
      - name: quay.io/airshipit/sstream-cache
      - name: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
  upgrade:
    crds: CreateReplace
  values:
    cert_manager:
      create: false
      enabled: false
      issuer:
        kind: Issuer
        name: maas-ca-issuer
    conf:
      cache:
        enabled: true
      cloudconfig:
        override: true
        sections:
          bootcmd:
          - rm -fr /var/lib/apt/lists
          - sysctl net.ipv6.conf.all.disable_ipv6=1
          - sysctl net.ipv6.conf.default.disable_ipv6=1
          - sysctl net.ipv6.conf.lo.disable_ipv6=0
      maas:
        credentials:
          secret:
            namespace: ucp
        dns:
          dns_servers:
          - 192.168.11.1
          - 1.1.1.1
          - 9.9.9.9
          require_dnssec: "no"
        extra_settings:
          active_discovery_interval: 0
          enlist_commissioning: false
          network_discovery: disabled
        images:
          default_image: focal
          default_kernel: ga-20.04
          default_os: ubuntu
        ntp:
          disable_ntpd_rack: true
          disable_ntpd_region: true
          ntp_servers:
          - 0.ca.pool.ntp.org
          - 2.ca.pool.ntp.org
          - 3.ca.pool.ntp.org
          - 4.ca.pool.ntp.org
          use_external_only: true
        syslog:
          log_level: DEBUG
        tls:
          create: false
          enabled: false
        url:
          maas_url: http://maas-region.ucp/MAAS
      ssh: {}
    dependencies:
      static:
        bootstrap_admin_user:
          jobs:
          - maas-db-sync
          services:
          - endpoint: internal
            service: maas_region
          - endpoint: internal
            service: maas_db
        db_init:
          services:
          - endpoint: internal
            service: maas_db
        db_sync:
          jobs:
          - maas-db-init
        export_api_key:
          jobs:
          - maas-bootstrap-admin-user
          services:
          - endpoint: internal
            service: maas_region
          - endpoint: internal
            service: maas_db
        import_resources:
          jobs:
          - maas-bootstrap-admin-user
          services:
          - endpoint: internal
            service: maas_region
          - endpoint: internal
            service: maas_db
        rack_controller:
          jobs:
          - maas-export-api-key
          services:
          - endpoint: internal
            service: maas_region
        region_controller:
          jobs:
          - maas-db-sync
          services:
          - endpoint: internal
            service: maas_db
    endpoints:
      maas_ingress:
        hosts: {}
      maas_region:
        host_fqdn_override:
          public: maas.ucp.svc.cluster.local
        name: maas-region
        scheme:
          default: http
      maas_syslog:
        host_fqdn_override:
          public: maas.ucp.svc.cluster.local
    manifests:
      configmap_ingress: false
      ingress_region: false
      maas_ingress: false
      rack_statefulset: true
      region_statefulset: true
      test_maas_api: false
    network:
      region_api:
        ingress:
          classes:
            cluster: cilium
            namespace: cilium
    pod:
      replicas:
        rack: 2
        region: 2
        syslog: 1
      resources:
        enabled: true
    storage:
      rackd:
        pvc:
          class_name: ceph-block
      syslog:
        pvc:
          class_name: ceph-block
---
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: pg-bucket
  namespace: ucp
spec:
  generateBucketName: ceph-bkt-pg
  storageClassName: rook-ceph-bucket
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: postgresql
  namespace: ucp
spec:
  backup:
    barmanObjectStore:
      destinationPath: s3://postgresql/
      endpointURL: https://ceph-rgw.rook-ceph.svc.cluster.local
      s3Credentials:
        accessKeyId:
          key: ""
          name: aws-creds
        secretAccessKey:
          key: ""
          name: aws-creds
  instances: 3
  logLevel: info
  primaryUpdateStrategy: unsupervised
  storage:
    size: 1Gi
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Pooler
metadata:
  name: pgbouncer
  namespace: ucp
spec:
  cluster:
    name: postgresql
  instances: 1
  pgbouncer:
    poolMode: session
  type: rw
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: ScheduledBackup
metadata:
  name: scheduledbackup
  namespace: ucp
spec:
  cluster:
    name: postgresql
  schedule: 0 0 0 * * *
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-bootstrap-webhook-service
      namespace: capi-kubeadm-bootstrap-system
      path: /mutate-bootstrap-cluster-x-k8s-io-v1beta1-kubeadmconfig
  failurePolicy: Fail
  name: default.kubeadmconfig.bootstrap.cluster.x-k8s.io
  rules:
  - apiGroups:
    - bootstrap.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmconfigs
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-bootstrap-webhook-service
      namespace: capi-kubeadm-bootstrap-system
      path: /mutate-bootstrap-cluster-x-k8s-io-v1beta1-kubeadmconfigtemplate
  failurePolicy: Fail
  name: default.kubeadmconfigtemplate.bootstrap.cluster.x-k8s.io
  rules:
  - apiGroups:
    - bootstrap.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmconfigtemplates
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-kubeadm-control-plane-system
      path: /mutate-controlplane-cluster-x-k8s-io-v1beta1-kubeadmcontrolplane
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.kubeadmcontrolplane.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmcontrolplanes
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-kubeadm-control-plane-system
      path: /mutate-controlplane-cluster-x-k8s-io-v1beta1-kubeadmcontrolplanetemplate
  failurePolicy: Fail
  name: default.kubeadmcontrolplanetemplate.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmcontrolplanetemplates
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-machine
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machine.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machines
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-machinedeployment
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machinedeployment.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinedeployments
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-machinehealthcheck
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machinehealthcheck.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinehealthchecks
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-machineset
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machineset.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinesets
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-cluster
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.cluster.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusters
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-clusterclass
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.clusterclass.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterclasses
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-runtime-cluster-x-k8s-io-v1alpha1-extensionconfig
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.extensionconfig.runtime.addons.cluster.x-k8s.io
  rules:
  - apiGroups:
    - runtime.cluster.x-k8s.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - extensionconfigs
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-cluster-x-k8s-io-v1beta1-machinepool
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machinepool.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinepools
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /mutate-addons-cluster-x-k8s-io-v1beta1-clusterresourceset
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.clusterresourceset.addons.cluster.x-k8s.io
  rules:
  - apiGroups:
    - addons.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterresourcesets
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-bootstrap-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-bootstrap-webhook-service
      namespace: capi-kubeadm-bootstrap-system
      path: /validate-bootstrap-cluster-x-k8s-io-v1beta1-kubeadmconfig
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.kubeadmconfig.bootstrap.cluster.x-k8s.io
  rules:
  - apiGroups:
    - bootstrap.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmconfigs
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-bootstrap-webhook-service
      namespace: capi-kubeadm-bootstrap-system
      path: /validate-bootstrap-cluster-x-k8s-io-v1beta1-kubeadmconfigtemplate
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.kubeadmconfigtemplate.bootstrap.cluster.x-k8s.io
  rules:
  - apiGroups:
    - bootstrap.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmconfigtemplates
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    clusterctl.cluster.x-k8s.io: ""
  name: capi-kubeadm-control-plane-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-kubeadm-control-plane-system
      path: /validate-controlplane-cluster-x-k8s-io-v1beta1-kubeadmcontrolplane
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.kubeadmcontrolplane.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmcontrolplanes
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-kubeadm-control-plane-system
      path: /validate-controlplane-cluster-x-k8s-io-v1beta1-kubeadmcontrolplanetemplate
  failurePolicy: Fail
  name: validation.kubeadmcontrolplanetemplate.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmcontrolplanetemplates
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-kubeadm-control-plane-system
      path: /validate-scale-controlplane-cluster-x-k8s-io-v1beta1-kubeadmcontrolplane
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation-scale.kubeadmcontrolplane.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - UPDATE
    resources:
    - kubeadmcontrolplanes/scale
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-system/capi-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
    clusterctl.cluster.x-k8s.io: ""
  name: capi-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-machine
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machine.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machines
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-machinedeployment
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machinedeployment.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinedeployments
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-machinehealthcheck
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machinehealthcheck.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinehealthchecks
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-machineset
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machineset.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinesets
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-cluster
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.cluster.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - clusters
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-clusterclass
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.clusterclass.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - clusterclasses
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-runtime-cluster-x-k8s-io-v1alpha1-extensionconfig
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.extensionconfig.runtime.cluster.x-k8s.io
  rules:
  - apiGroups:
    - runtime.cluster.x-k8s.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - extensionconfigs
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-cluster-x-k8s-io-v1beta1-machinepool
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machinepool.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinepools
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-addons-cluster-x-k8s-io-v1beta1-clusterresourceset
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.clusterresourceset.addons.cluster.x-k8s.io
  rules:
  - apiGroups:
    - addons.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterresourcesets
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-addons-cluster-x-k8s-io-v1beta1-clusterresourcesetbinding
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.clusterresourcesetbinding.addons.cluster.x-k8s.io
  rules:
  - apiGroups:
    - addons.cluster.x-k8s.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterresourcesetbindings
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-ipam-cluster-x-k8s-io-v1alpha1-ipaddress
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.ipaddress.ipam.cluster.x-k8s.io
  rules:
  - apiGroups:
    - ipam.cluster.x-k8s.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - ipaddresses
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: capi-webhook-service
      namespace: capi-system
      path: /validate-ipam-cluster-x-k8s-io-v1alpha1-ipaddressclaim
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.ipaddressclaim.ipam.cluster.x-k8s.io
  rules:
  - apiGroups:
    - ipam.cluster.x-k8s.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - ipaddressclaims
  sideEffects: None
